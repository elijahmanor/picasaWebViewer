/* automatically generated by JSCoverage - do not edit */
if (! top._$jscoverage) {
  top._$jscoverage = {};
}
var _$jscoverage = top._$jscoverage;
if (! _$jscoverage['qmock_qunit_unit_tests.js']) {
  _$jscoverage['qmock_qunit_unit_tests.js'] = [];
  _$jscoverage['qmock_qunit_unit_tests.js'][1] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][13] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][15] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][16] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][19] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][20] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][21] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][23] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][24] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][27] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][29] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][30] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][31] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][33] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][34] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][37] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][39] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][40] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][41] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][43] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][44] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][47] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][49] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][50] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][51] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][53] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][54] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][57] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][59] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][64] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][65] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][66] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][68] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][69] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][72] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][75] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][76] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][78] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][79] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][80] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][82] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][83] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][86] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][89] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][91] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][95] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][97] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][100] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][104] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][106] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][110] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][111] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][114] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][117] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][119] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][121] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][126] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][127] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][132] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][134] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][135] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][138] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][140] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][145] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][147] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][148] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][151] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][153] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][158] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][160] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][161] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][164] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][166] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][168] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][173] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][175] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][176] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][179] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][187] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][188] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][189] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][191] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][192] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][195] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][198] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][199] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][200] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][201] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][202] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][204] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][205] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][208] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][211] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][214] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][217] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][223] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][226] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][227] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][228] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][229] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][231] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][232] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][237] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][243] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][244] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][247] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][251] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][253] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][255] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][257] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][262] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][263] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][264] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][266] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][267] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][270] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][273] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][274] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][278] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][279] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][282] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][283] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][286] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][288] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][289] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][290] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][292] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][293] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][298] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][299] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][303] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][304] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][306] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][307] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][309] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][313] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][315] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][321] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][322] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][325] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][327] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][329] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][330] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][331] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][332] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][334] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][335] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][340] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][342] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][344] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][348] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][356] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][357] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][358] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][360] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][361] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][364] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][367] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][368] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][372] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][373] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][376] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][377] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][380] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][382] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][383] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][384] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][386] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][387] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][392] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][399] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][400] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][402] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][403] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][405] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][408] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][415] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][416] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][418] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][420] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][422] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][424] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][425] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][426] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][427] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][429] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][430] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][435] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][437] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][439] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][441] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][450] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][451] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][452] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][454] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][455] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][458] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][460] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][461] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][462] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][466] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][470] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][472] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][474] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][487] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][488] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][489] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][491] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][492] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][495] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][497] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][498] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][499] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][503] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][507] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][509] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][511] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][514] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][515] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][516] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][518] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][519] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][522] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][524] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][529] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][531] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][533] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][541] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][544] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][546] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][556] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][559] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][560] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][564] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][566] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][568] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][604] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][605] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][606] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][607] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][608] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][609] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][610] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][611] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][612] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][613] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][617] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][619] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][621] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][626] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][627] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][632] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][634] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][635] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][638] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][644] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][646] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][648] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][657] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][660] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][672] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][675] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][676] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][680] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][682] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][716] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][717] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][718] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][719] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][720] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][721] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][722] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][723] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][724] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][728] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][730] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][732] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][734] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][742] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][762] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][763] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][764] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][765] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][766] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][767] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][768] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][769] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][770] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][771] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][772] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][773] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][774] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][775] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][777] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][778] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][786] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][787] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][788] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][792] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][794] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][796] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][807] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][840] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][841] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][842] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][843] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][844] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][845] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][846] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][847] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][848] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][849] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][850] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][851] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][852] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][854] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][856] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][865] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][866] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][867] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][871] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][873] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][876] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][877] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][886] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][888] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][889] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][890] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][892] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][893] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][896] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][902] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][903] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][905] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][909] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][910] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][912] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][916] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][917] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][921] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][923] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][928] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][930] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][939] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][940] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][941] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][942] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][944] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][945] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][948] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][952] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][953] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][955] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][959] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][960] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][962] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][966] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][967] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][971] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][973] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][982] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][984] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][985] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][986] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][988] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][989] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][992] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][998] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][999] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1001] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1005] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1007] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1010] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1011] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1025] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1026] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1027] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1028] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1030] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1031] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1034] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1038] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1039] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1040] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1041] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1043] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1044] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1047] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1051] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1052] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1053] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1057] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1058] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1059] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1063] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1064] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1065] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1069] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1071] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1075] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1076] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1084] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1086] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1087] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1088] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1090] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1091] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1094] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1098] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1099] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1100] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1101] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1103] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1104] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1109] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1111] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1113] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1117] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1119] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1129] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1131] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1132] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1133] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1135] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1136] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1139] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1143] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1145] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1146] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1147] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1149] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1150] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1153] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1157] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1159] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1163] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1165] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1175] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1177] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1178] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1179] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1181] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1182] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1185] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1189] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1191] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1192] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1193] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1195] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1196] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1199] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1203] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1205] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1208] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1239] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1240] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1241] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1242] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1244] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1245] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1248] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1252] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1253] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1254] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1255] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1257] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1258] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1261] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1265] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1267] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1268] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1272] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1273] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1274] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1278] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1279] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1280] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1286] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1288] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1290] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1292] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1301] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1302] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1303] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1304] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1306] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1307] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1310] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1314] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1315] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1316] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1317] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1319] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1320] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1323] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1327] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1328] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1329] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1330] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1332] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1333] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1336] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1340] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1341] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1342] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1343] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1345] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1346] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1349] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1353] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1354] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1355] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1356] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1358] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1359] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1362] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1366] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1368] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1370] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1372] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1381] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1383] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1384] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1385] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1387] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1388] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1391] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1395] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1397] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1398] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1399] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1401] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1402] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1405] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1409] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1411] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1412] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1413] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1415] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1416] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1419] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1423] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1425] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1427] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1429] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1438] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1440] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1441] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1442] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1444] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1445] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1448] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1452] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1454] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1455] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1456] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1458] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1459] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1462] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1466] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1468] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1469] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1470] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1472] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1473] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1476] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1480] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1482] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1486] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1488] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1490] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1492] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1504] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1505] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1506] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1508] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1509] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1512] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1516] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1518] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1519] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1520] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1522] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1523] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1526] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1532] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1538] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1540] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1544] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1546] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1552] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1556] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1558] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1581] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1591] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1593] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1594] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1596] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1600] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1610] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1612] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1613] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1617] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1619] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1621] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1623] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1636] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1637] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1638] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1640] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1641] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1644] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1648] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1650] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1651] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1652] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1654] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1655] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1658] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1662] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1668] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1669] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1670] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1672] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1673] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1676] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1680] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1682] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1688] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1692] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1694] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1718] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1728] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1730] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1731] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1732] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1734] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1735] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1738] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1742] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1752] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1754] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1755] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1759] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1761] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1763] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1765] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1771] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1772] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1773] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1775] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1776] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1779] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1782] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1783] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1784] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1785] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1787] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1788] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1791] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1795] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1796] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1800] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1802] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1815] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1823] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1824] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1825] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1827] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1828] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1831] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1835] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1842] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1846] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1848] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1852] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1854] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1860] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1862] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1864] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1866] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1868] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1874] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1876] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1877] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1878] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1880] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1881] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1884] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1886] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1888] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1892] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1894] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1899] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1903] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1905] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1910] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1911] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1912] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1913] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1915] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1916] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1919] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1922] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1923] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1924] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1925] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1927] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1928] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1931] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1933] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1935] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1936] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1937] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1939] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1940] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1943] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1945] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1947] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1952] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1954] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1956] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1960] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1962] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1971] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1973] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1975] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1977] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1979] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1981] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1983] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1985] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1987] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1991] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1993] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1995] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1997] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][1999] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2001] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2003] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2005] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2007] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2009] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2011] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2013] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2015] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2017] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2019] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2023] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2025] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2027] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2029] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2031] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2033] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2035] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2037] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2039] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2041] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2043] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2045] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2047] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2049] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2051] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2053] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2055] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2057] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2059] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2064] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2066] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2070] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2072] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2074] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2076] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2078] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2090] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2091] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2092] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2093] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2095] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2098] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2102] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2103] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2104] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2105] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2107] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2110] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2114] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2115] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2116] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2117] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2119] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2122] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2126] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2127] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2128] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2129] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2131] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2132] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2133] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2136] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2140] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2141] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2145] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2147] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2149] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2151] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2164] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2165] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2166] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2167] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2169] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2172] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2176] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2177] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2178] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2179] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2181] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2184] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2188] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2189] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2190] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2191] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2193] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2196] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2200] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2201] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2202] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2203] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2205] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2206] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2207] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2210] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2214] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2215] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2220] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2222] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2224] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2226] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2228] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2237] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2238] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2239] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2240] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2242] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2243] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2246] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2250] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2251] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2252] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2253] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2255] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2256] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2257] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2260] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2264] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2265] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2266] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2267] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2269] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2270] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2271] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2274] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2278] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2279] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2280] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2281] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2283] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2284] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2285] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2288] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2293] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2294] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2296] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2299] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2300] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2302] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2306] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2307] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2309] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2312] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2313] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2317] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2319] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2321] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2323] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2334] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2335] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2336] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2337] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2339] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2340] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2343] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2347] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2348] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2349] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2350] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2352] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2353] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2354] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2357] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2361] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2362] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2363] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2364] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2366] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2367] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2368] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2371] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2375] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2376] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2377] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2378] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2380] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2381] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2382] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2385] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2390] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2391] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2393] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2396] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2397] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2399] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2403] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2404] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2406] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2409] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2410] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2414] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2416] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2418] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2420] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2431] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2432] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2433] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2434] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2436] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2437] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2440] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2446] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2447] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2449] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2452] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2453] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2455] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2458] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2459] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2461] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2468] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2475] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2496] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2497] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2498] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2499] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2500] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2504] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2506] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2509] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2511] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2520] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2522] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2523] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2524] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2526] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2527] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2530] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2534] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2535] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2539] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2541] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2550] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2551] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2552] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2553] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2555] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2556] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2559] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2563] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2565] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2566] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2567] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2569] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2570] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2575] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2579] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2581] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2601] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2602] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2603] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2604] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2605] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2611] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2614] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2616] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2617] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2618] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2630] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2631] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2632] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2633] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2635] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2636] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2637] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2638] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2641] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2644] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2645] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2646] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2647] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2649] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2650] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2651] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2654] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2658] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2660] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2661] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2662] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2664] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2665] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2668] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2674] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2676] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2678] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2681] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2685] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2687] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2688] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2689] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2691] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2692] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2696] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2700] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2702] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2706] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2708] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2730] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2731] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2732] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2740] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2744] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2746] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2748] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2752] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2757] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2758] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2760] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2761] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2762] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2764] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2765] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2768] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2772] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2774] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2776] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2780] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2782] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2785] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2786] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2789] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2791] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2795] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2796] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2806] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2808] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2812] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2814] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2816] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2818] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2822] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2825] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2826] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2827] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2828] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2829] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2830] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2831] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2832] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2833] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2834] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2835] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2836] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2837] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2838] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2839] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2840] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2841] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2842] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2843] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2844] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2845] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2846] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2847] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2851] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2852] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2853] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2854] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2855] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2856] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2857] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2858] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2862] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2863] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2867] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2868] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2869] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2870] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2871] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2872] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2873] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2874] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2875] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2876] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2877] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2878] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2879] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2880] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2881] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2882] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2883] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2884] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2885] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2886] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2890] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2892] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2894] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2896] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2900] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2904] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2905] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2906] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2907] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2908] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2909] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2910] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2911] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2912] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2913] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2914] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2915] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2916] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2917] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2918] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2919] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2920] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2921] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2925] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2926] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2927] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2928] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2929] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2930] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2931] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2932] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2933] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2936] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2940] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2941] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2942] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2943] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2944] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2945] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2946] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2947] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2948] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2949] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2950] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2951] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2952] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2953] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2954] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2955] = 0;
  _$jscoverage['qmock_qunit_unit_tests.js'][2956] = 0;
}
_$jscoverage['qmock_qunit_unit_tests.js'][1]++;
module("QMock");
_$jscoverage['qmock_qunit_unit_tests.js'][13]++;
test("mock with single parameterless method (explicit execution call total, no return value)", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][15]++;
  expect(16);
  _$jscoverage['qmock_qunit_unit_tests.js'][16]++;
  var ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][19]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][20]++;
    ninja.expects(1).method("expects");
    _$jscoverage['qmock_qunit_unit_tests.js'][21]++;
    fail("mock should detect bad method name 'expects'");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][23]++;
    equals(e.length, 1, "array of 1 error should be thrown when bad method name 'expects' is used. Actual was");
    _$jscoverage['qmock_qunit_unit_tests.js'][24]++;
    equals(e[0].type, "InvalidMethodNameException", "error type should be InvalidMethodNameException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][27]++;
  var ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][29]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][30]++;
    ninja.expects(1).method("andExpects");
    _$jscoverage['qmock_qunit_unit_tests.js'][31]++;
    fail("mock should detect bad method name 'andExpects'");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][33]++;
    equals(e.length, 1, "array of 1 error should be thrown");
    _$jscoverage['qmock_qunit_unit_tests.js'][34]++;
    equals(e[0].type, "InvalidMethodNameException", "error type should be InvalidMethodNameException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][37]++;
  ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][39]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][40]++;
    ninja.expects(1).method("expectsArguments");
    _$jscoverage['qmock_qunit_unit_tests.js'][41]++;
    fail("mock should detect bad method name 'expectsArguments'");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][43]++;
    equals(e.length, 1, "array of 1 error should be thrown");
    _$jscoverage['qmock_qunit_unit_tests.js'][44]++;
    equals(e[0].type, "InvalidMethodNameException", "error type should be InvalidMethodNameException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][47]++;
  ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][49]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][50]++;
    ninja.expects(1).method("reset");
    _$jscoverage['qmock_qunit_unit_tests.js'][51]++;
    fail("mock should detect bad method name 'reset'");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][53]++;
    equals(e.length, 1, "array of 1 error should be thrown");
    _$jscoverage['qmock_qunit_unit_tests.js'][54]++;
    equals(e[0].type, "InvalidMethodNameException", "error type should be InvalidMethodNameException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][57]++;
  ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][59]++;
  ninja.expects(1).method("swing");
  _$jscoverage['qmock_qunit_unit_tests.js'][64]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][65]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][66]++;
    fail("verify() should throw exception when swing not called");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][68]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][69]++;
    equals(e[0].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][72]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][75]++;
  ninja.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][76]++;
  ninja.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][78]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][79]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][80]++;
    fail("verify() should throw exception when swing called too many times");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][82]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][83]++;
    equals(e[0].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][86]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][89]++;
  equals(ninja.swing(), undefined, "swing() without return value set should return undefined");
  _$jscoverage['qmock_qunit_unit_tests.js'][91]++;
  ok(ninja.verify(), "verify() should pass after swing called");
  _$jscoverage['qmock_qunit_unit_tests.js'][95]++;
  var samurai = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][97]++;
  samurai.expects(0).method("swing");
  _$jscoverage['qmock_qunit_unit_tests.js'][100]++;
  ok(samurai.verify(), "verify() should pass if swing not called");
  _$jscoverage['qmock_qunit_unit_tests.js'][104]++;
  var wizard = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][106]++;
  wizard.expects(2000).method("sendFireball");
  _$jscoverage['qmock_qunit_unit_tests.js'][110]++;
  for (var i = 0; i < 2000; i++) {
    _$jscoverage['qmock_qunit_unit_tests.js'][111]++;
    wizard.sendFireball();
}
  _$jscoverage['qmock_qunit_unit_tests.js'][114]++;
  ok(wizard.verify(), "verify() should pass if sendFireball called 2000 times");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][117]++;
test("w/ JSON: mock with single parameterless method (explicit execution call total, no return value)", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][119]++;
  expect(18);
  _$jscoverage['qmock_qunit_unit_tests.js'][121]++;
  var ninja, samarui, wizard;
  _$jscoverage['qmock_qunit_unit_tests.js'][126]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][127]++;
    ninja = new Mock({"expects": {}});
    _$jscoverage['qmock_qunit_unit_tests.js'][132]++;
    fail("mock should detect bad method name 'expects'");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][134]++;
    equals(e.length, 1, "array of 1 error should be thrown");
    _$jscoverage['qmock_qunit_unit_tests.js'][135]++;
    equals(e[0].type, "InvalidMethodNameException", "error type should be InvalidMethodNameException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][138]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][140]++;
    ninja = new Mock({"andExpects": {}});
    _$jscoverage['qmock_qunit_unit_tests.js'][145]++;
    fail("mock should detect bad method name 'andExpects'");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][147]++;
    equals(e.length, 1, "array of 1 error should be thrown");
    _$jscoverage['qmock_qunit_unit_tests.js'][148]++;
    equals(e[0].type, "InvalidMethodNameException", "error type should be InvalidMethodNameException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][151]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][153]++;
    ninja = new Mock({"expectsArguments": {}});
    _$jscoverage['qmock_qunit_unit_tests.js'][158]++;
    fail("mock should detect bad method name 'expectsArguments'");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][160]++;
    equals(e.length, 1, "array of 1 error should be thrown");
    _$jscoverage['qmock_qunit_unit_tests.js'][161]++;
    equals(e[0].type, "InvalidMethodNameException", "error type should be InvalidMethodNameException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][164]++;
  ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][166]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][168]++;
    ninja = new Mock({"expectsArguments": {}});
    _$jscoverage['qmock_qunit_unit_tests.js'][173]++;
    fail("mock should detect bad method name 'reset'");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][175]++;
    equals(e.length, 1, "array of 1 error should be thrown");
    _$jscoverage['qmock_qunit_unit_tests.js'][176]++;
    equals(e[0].type, "InvalidMethodNameException", "error type should be InvalidMethodNameException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][179]++;
  ninja = new Mock({"swing": {calls: 1}});
  _$jscoverage['qmock_qunit_unit_tests.js'][187]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][188]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][189]++;
    fail("verify() should throw exception when swing not called");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][191]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][192]++;
    equals(e[0].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][195]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][198]++;
  ninja.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][199]++;
  ninja.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][200]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][201]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][202]++;
    fail("verify() should throw exception when swing called too many times");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][204]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][205]++;
    equals(e[0].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][208]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][211]++;
  equals(ninja.swing(), undefined, "swing() without return value set should return undefined");
  _$jscoverage['qmock_qunit_unit_tests.js'][214]++;
  ok(ninja.verify(), "verify() should pass after swing called");
  _$jscoverage['qmock_qunit_unit_tests.js'][217]++;
  samurai = new Mock({"swing": {calls: 0}});
  _$jscoverage['qmock_qunit_unit_tests.js'][223]++;
  ok(samurai.verify(), "verify() should pass if swing not called");
  _$jscoverage['qmock_qunit_unit_tests.js'][226]++;
  samurai.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][227]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][228]++;
    samurai.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][229]++;
    fail("verify() should throw exception when swing called too many times (test false positive)");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][231]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][232]++;
    equals(e[0].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][237]++;
  wizard = new Mock({"sendFireball": {calls: 2000}});
  _$jscoverage['qmock_qunit_unit_tests.js'][243]++;
  for (var i = 0; i < 2000; i++) {
    _$jscoverage['qmock_qunit_unit_tests.js'][244]++;
    wizard.sendFireball();
}
  _$jscoverage['qmock_qunit_unit_tests.js'][247]++;
  ok(wizard.verify(), "verify() should pass if sendFireball called 2000 times");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][251]++;
test("mock with single parameterless method (arbitrary execution call range, no return value)", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][253]++;
  expect(12);
  _$jscoverage['qmock_qunit_unit_tests.js'][255]++;
  var ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][257]++;
  ninja.expects(1, 3).method("swing");
  _$jscoverage['qmock_qunit_unit_tests.js'][262]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][263]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][264]++;
    fail("verify() should throw exception when swing not called");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][266]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][267]++;
    equals(e[0].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][270]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][273]++;
  ninja.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][274]++;
  ok(ninja.verify(), "verify() should pass after swing was called once");
  _$jscoverage['qmock_qunit_unit_tests.js'][278]++;
  ninja.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][279]++;
  ok(ninja.verify(), "verify() should pass after swing was called twice");
  _$jscoverage['qmock_qunit_unit_tests.js'][282]++;
  ninja.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][283]++;
  ok(ninja.verify(), "verify() should pass after swing was called thrice");
  _$jscoverage['qmock_qunit_unit_tests.js'][286]++;
  ninja.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][288]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][289]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][290]++;
    fail("verify() should throw exception when swing called too many times");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][292]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][293]++;
    equals(e[0].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][298]++;
  var samurai = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][299]++;
  samurai.expects(1, Infinity).method("swing");
  _$jscoverage['qmock_qunit_unit_tests.js'][303]++;
  samurai.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][304]++;
  ok(samurai.verify(), "verify() should pass after swing was called once");
  _$jscoverage['qmock_qunit_unit_tests.js'][306]++;
  for (var i = 0; i < 4999; i++) {
    _$jscoverage['qmock_qunit_unit_tests.js'][307]++;
    samurai.swing();
}
  _$jscoverage['qmock_qunit_unit_tests.js'][309]++;
  ok(samurai.verify(), "verify() should pass after swing was called 5000 times");
  _$jscoverage['qmock_qunit_unit_tests.js'][313]++;
  var wizard = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][315]++;
  wizard.expects().method("sendFireball").atLeast(100).noMoreThan(250);
  _$jscoverage['qmock_qunit_unit_tests.js'][321]++;
  for (var i = 0; i < (100 + Math.floor(Math.random() * (151))); i++) {
    _$jscoverage['qmock_qunit_unit_tests.js'][322]++;
    wizard.sendFireball();
}
  _$jscoverage['qmock_qunit_unit_tests.js'][325]++;
  ok(wizard.verify(), "verify() should pass if sendFireball called a random amount of times between a specified range");
  _$jscoverage['qmock_qunit_unit_tests.js'][327]++;
  wizard.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][329]++;
  wizard.sendFireball();
  _$jscoverage['qmock_qunit_unit_tests.js'][330]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][331]++;
    wizard.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][332]++;
    fail("verify() should throw exception when swing out of defined call execution range");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][334]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][335]++;
    equals(e[0].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
  }
}));
_$jscoverage['qmock_qunit_unit_tests.js'][340]++;
test("w/ JSON: mock with single parameterless method (arbitrary execution call range, no return value)", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][342]++;
  expect(12);
  _$jscoverage['qmock_qunit_unit_tests.js'][344]++;
  var ninja, samurai, wizard;
  _$jscoverage['qmock_qunit_unit_tests.js'][348]++;
  ninja = new Mock({swing: {min: 1, max: 3}});
  _$jscoverage['qmock_qunit_unit_tests.js'][356]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][357]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][358]++;
    fail("verify() should throw exception when swing not called");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][360]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][361]++;
    equals(e[0].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][364]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][367]++;
  ninja.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][368]++;
  ok(ninja.verify(), "verify() should pass after swing was called once");
  _$jscoverage['qmock_qunit_unit_tests.js'][372]++;
  ninja.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][373]++;
  ok(ninja.verify(), "verify() should pass after swing was called twice");
  _$jscoverage['qmock_qunit_unit_tests.js'][376]++;
  ninja.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][377]++;
  ok(ninja.verify(), "verify() should pass after swing was called thrice");
  _$jscoverage['qmock_qunit_unit_tests.js'][380]++;
  ninja.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][382]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][383]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][384]++;
    fail("verify() should throw exception when swing called too many times");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][386]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][387]++;
    equals(e[0].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][392]++;
  samurai = new Mock({swing: {min: 0, max: Infinity}});
  _$jscoverage['qmock_qunit_unit_tests.js'][399]++;
  samurai.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][400]++;
  ok(samurai.verify(), "verify() should pass after swing was called once");
  _$jscoverage['qmock_qunit_unit_tests.js'][402]++;
  for (var i = 0; i < 4999; i++) {
    _$jscoverage['qmock_qunit_unit_tests.js'][403]++;
    samurai.swing();
}
  _$jscoverage['qmock_qunit_unit_tests.js'][405]++;
  ok(samurai.verify(), "verify() should pass after swing was called 5000 times");
  _$jscoverage['qmock_qunit_unit_tests.js'][408]++;
  wizard = new Mock({sendFireball: {atLeast: 100, noMoreThan: 250}});
  _$jscoverage['qmock_qunit_unit_tests.js'][415]++;
  for (var i = 0; i < (100 + Math.floor(Math.random() * (151))); i++) {
    _$jscoverage['qmock_qunit_unit_tests.js'][416]++;
    wizard.sendFireball();
}
  _$jscoverage['qmock_qunit_unit_tests.js'][418]++;
  wizard.verify();
  _$jscoverage['qmock_qunit_unit_tests.js'][420]++;
  ok(wizard.verify(), "verify() should pass if sendFireball called a random amount of times between a specified range");
  _$jscoverage['qmock_qunit_unit_tests.js'][422]++;
  wizard.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][424]++;
  wizard.sendFireball();
  _$jscoverage['qmock_qunit_unit_tests.js'][425]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][426]++;
    wizard.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][427]++;
    fail("verify() should throw exception when swing out of defined call execution range");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][429]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][430]++;
    equals(e[0].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
  }
}));
_$jscoverage['qmock_qunit_unit_tests.js'][435]++;
test("mock with multiple parameterless methods", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][437]++;
  expect(3);
  _$jscoverage['qmock_qunit_unit_tests.js'][439]++;
  var ninja = Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][441]++;
  ninja.expects(1).method("swing").andExpects(1).method("run").andExpects(1).method("block");
  _$jscoverage['qmock_qunit_unit_tests.js'][450]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][451]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][452]++;
    fail("verify() should throw exception when no methods called");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][454]++;
    equals(e.length, 3, "verify() should return an array of 3 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][455]++;
    equals(e[1].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][458]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][460]++;
  ninja.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][461]++;
  ninja.run();
  _$jscoverage['qmock_qunit_unit_tests.js'][462]++;
  ninja.block();
  _$jscoverage['qmock_qunit_unit_tests.js'][466]++;
  ok(ninja.verify(), "verify() should return true once swing, run and block called");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][470]++;
test("w/ JSON: mock with multiple parameterless methods", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][472]++;
  expect(3);
  _$jscoverage['qmock_qunit_unit_tests.js'][474]++;
  var ninja = new Mock({"swing": {calls: 1}, "run": {calls: 1}, "block": {calls: 1}});
  _$jscoverage['qmock_qunit_unit_tests.js'][487]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][488]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][489]++;
    fail("verify() should throw exception when no methods called");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][491]++;
    equals(e.length, 3, "verify() should return an array of 3 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][492]++;
    equals(e[1].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][495]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][497]++;
  ninja.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][498]++;
  ninja.run();
  _$jscoverage['qmock_qunit_unit_tests.js'][499]++;
  ninja.block();
  _$jscoverage['qmock_qunit_unit_tests.js'][503]++;
  ok(ninja.verify(), "verify() should return true once swing, run and block called");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][507]++;
test("mock with stubbed properties", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][509]++;
  expect(16);
  _$jscoverage['qmock_qunit_unit_tests.js'][511]++;
  var ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][514]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][515]++;
    ninja.expects(1).property("expects");
    _$jscoverage['qmock_qunit_unit_tests.js'][516]++;
    fail("mock should detect bad property name 'expects'");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][518]++;
    equals(e.length, 1, "array of 1 error should be thrown");
    _$jscoverage['qmock_qunit_unit_tests.js'][519]++;
    equals(e[0].type, "InvalidPropertyNameException", "error type should be InvalidPropertyNameException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][522]++;
  var ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][524]++;
  ninja.expects().property("rank").withValue("apprentice");
  _$jscoverage['qmock_qunit_unit_tests.js'][529]++;
  ok((ninja.rank === "apprentice"), "ninja mock object should have a property called rank with correct value");
  _$jscoverage['qmock_qunit_unit_tests.js'][531]++;
  ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][533]++;
  ninja.expects().property("rank").withValue("apprentice").andExpects().property("master").withValue("The Chrome");
  _$jscoverage['qmock_qunit_unit_tests.js'][541]++;
  ok(((ninja.rank === "apprentice") && (ninja.master === "The Chrome")), "ninja mock object should have a two properties set correctly");
  _$jscoverage['qmock_qunit_unit_tests.js'][544]++;
  var samurai = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][546]++;
  samurai.expects().property("rank").withValue("apprentice").andExpects(1, 2).method("swing").andExpects().property("master").withValue("The Chrome");
  _$jscoverage['qmock_qunit_unit_tests.js'][556]++;
  samurai.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][559]++;
  ok(samurai.verify(), "verify() should pass after swing was called once");
  _$jscoverage['qmock_qunit_unit_tests.js'][560]++;
  ok(((samurai.rank === "apprentice") && (samurai.master === "The Chrome")), "ninja mock object should have a two properties set correctly");
  _$jscoverage['qmock_qunit_unit_tests.js'][564]++;
  var wizard = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][566]++;
  function Custom() {
}
  _$jscoverage['qmock_qunit_unit_tests.js'][566]++;
  ;
  _$jscoverage['qmock_qunit_unit_tests.js'][568]++;
  wizard.expects().property("number").withValue(1).andExpects().property("boolean").withValue(true).andExpects().property("string").withValue("string").andExpects().property("null").withValue(null).andExpects().property("undefined").withValue(undefined).andExpects().property("function").withValue((function stubbedFunction() {
})).andExpects().property("object").withValue({}).andExpects().property("array").withValue([]).andExpects().property("regExp").withValue(/RegExp/).andExpects().property("date").withValue(new Date()).andExpects().property("custom object").withValue(new Custom());
  _$jscoverage['qmock_qunit_unit_tests.js'][604]++;
  ok((wizard.number === 1), "wizard mock object should have a stubbed property of 'number' with a value of '1'");
  _$jscoverage['qmock_qunit_unit_tests.js'][605]++;
  ok((wizard["boolean"] === true), "wizard mock object should have a stubbed property of 'boolen' with a value of 'true'");
  _$jscoverage['qmock_qunit_unit_tests.js'][606]++;
  ok((wizard["null"] === null), "wizard mock object should have a stubbed property of 'null' with a value of 'null'");
  _$jscoverage['qmock_qunit_unit_tests.js'][607]++;
  ok((wizard.undefined === undefined), "wizard mock object should have a stubbed property of 'undefined' with a value of undefined");
  _$jscoverage['qmock_qunit_unit_tests.js'][608]++;
  ok(Mock._assertArray([wizard["function"]], [(function () {
})]), "wizard mock object should have a stubbed property of 'function' with a value of 'function stubbedFunction () {}'");
  _$jscoverage['qmock_qunit_unit_tests.js'][609]++;
  ok(Mock._assertArray([wizard.object], [{}]), "wizard mock object should have a stubbed property of 'object' with a value of '{}'");
  _$jscoverage['qmock_qunit_unit_tests.js'][610]++;
  ok(Mock._assertArray([wizard.array], [[]]), "wizard mock object should have a stubbed property of 'array' with a value of '[]'");
  _$jscoverage['qmock_qunit_unit_tests.js'][611]++;
  ok(Mock._assertArray([wizard.regExp], [/RegExp/]), "wizard mock object should have a stubbed property of 'regExp' with a value of '/RegExp/'");
  _$jscoverage['qmock_qunit_unit_tests.js'][612]++;
  ok(Mock._assertArray([wizard.date], [new Date()]), "wizard mock object should have a stubbed property of 'date' with a value of 'new Date()'");
  _$jscoverage['qmock_qunit_unit_tests.js'][613]++;
  ok(Mock._assertArray([wizard["custom object"]], [new Custom()]), "wizard mock object should have a stubbed property of 'custom object' with a value of 'new Custom()'");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][617]++;
test("w/ JSON: mock with stubbed properties", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][619]++;
  expect(15);
  _$jscoverage['qmock_qunit_unit_tests.js'][621]++;
  var ninja, samurai, wizard;
  _$jscoverage['qmock_qunit_unit_tests.js'][626]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][627]++;
    ninja = new Mock({"expects": {value: Variable}});
    _$jscoverage['qmock_qunit_unit_tests.js'][632]++;
    fail("mock should detect bad property name 'expects'");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][634]++;
    equals(e.length, 1, "array of 1 error should be thrown");
    _$jscoverage['qmock_qunit_unit_tests.js'][635]++;
    equals(e[0].type, "InvalidPropertyNameException", "error type should be InvalidPropertyNameException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][638]++;
  ninja = new Mock({"rank": {value: "apprentice"}});
  _$jscoverage['qmock_qunit_unit_tests.js'][644]++;
  ok((ninja.rank === "apprentice"), "ninja mock object should have a property called 'rank' with correct value");
  _$jscoverage['qmock_qunit_unit_tests.js'][646]++;
  ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][648]++;
  ninja = new Mock({"rank": {value: "apprentice"}, "master": {value: "The Chrome"}});
  _$jscoverage['qmock_qunit_unit_tests.js'][657]++;
  ok(((ninja.rank === "apprentice") && (ninja.master === "The Chrome")), "ninja mock object should have a two properties set correctly");
  _$jscoverage['qmock_qunit_unit_tests.js'][660]++;
  samurai = new Mock({"rank": {value: "apprentice"}, "master": {value: "The Chrome"}, "swing": {calls: 1}});
  _$jscoverage['qmock_qunit_unit_tests.js'][672]++;
  samurai.swing();
  _$jscoverage['qmock_qunit_unit_tests.js'][675]++;
  ok(samurai.verify(), "verify() should pass after swing was called once");
  _$jscoverage['qmock_qunit_unit_tests.js'][676]++;
  ok(((samurai.rank === "apprentice") && (samurai.master === "The Chrome")), "ninja mock object should have a two properties set correctly");
  _$jscoverage['qmock_qunit_unit_tests.js'][680]++;
  function Custom() {
}
  _$jscoverage['qmock_qunit_unit_tests.js'][680]++;
  ;
  _$jscoverage['qmock_qunit_unit_tests.js'][682]++;
  wizard = new Mock({"number": {value: 1}, "boolean": {value: true}, "string": {value: "string"}, "null": {value: null}, "function": {value: (function stubbedFunction() {
})}, "object": {value: {}}, "array": {value: []}, "regExp": {value: /RegExp/}, "date": {value: new Date()}, "custom object": {value: new Custom()}});
  _$jscoverage['qmock_qunit_unit_tests.js'][716]++;
  ok((wizard.number === 1), "wizard mock object should have a stubbed property of 'number' with a value of '1'");
  _$jscoverage['qmock_qunit_unit_tests.js'][717]++;
  ok((wizard["boolean"] === true), "wizard mock object should have a stubbed property of 'number' with a value of 'true'");
  _$jscoverage['qmock_qunit_unit_tests.js'][718]++;
  ok((wizard["null"] === null), "wizard mock object should have a stubbed property of 'null' with a value of 'null'");
  _$jscoverage['qmock_qunit_unit_tests.js'][719]++;
  ok(Mock._assertArray([wizard["function"]], [(function () {
})]), "wizard mock object should have a stubbed property of 'function' with a value of 'function stubbedFunction () {}'");
  _$jscoverage['qmock_qunit_unit_tests.js'][720]++;
  ok(Mock._assertArray([wizard.object], [{}]), "wizard mock object should have a stubbed property of 'object' with a value of '{}'");
  _$jscoverage['qmock_qunit_unit_tests.js'][721]++;
  ok(Mock._assertArray([wizard.array], [[]]), "wizard mock object should have a stubbed property of 'array' with a value of '[]'");
  _$jscoverage['qmock_qunit_unit_tests.js'][722]++;
  ok(Mock._assertArray([wizard.regExp], [/RegExp/]), "wizard mock object should have a stubbed property of 'regExp' with a value of '/RegExp/'");
  _$jscoverage['qmock_qunit_unit_tests.js'][723]++;
  ok(Mock._assertArray([wizard.date], [new Date()]), "wizard mock object should have a stubbed property of 'date' with a value of 'new Date()'");
  _$jscoverage['qmock_qunit_unit_tests.js'][724]++;
  ok(Mock._assertArray([wizard["custom object"]], [new Custom()]), "wizard mock object should have a stubbed property of 'custom object' with a value of 'new Custom()'");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][728]++;
test("mock with no parameters, return values", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][730]++;
  expect(15);
  _$jscoverage['qmock_qunit_unit_tests.js'][732]++;
  var mock = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][734]++;
  mock.expects(1).method("getNumericValue").returns(10).andExpects(1).method("getStringValue").returns("data").andExpects(1).method("getArrayValue").returns([1, 2, 3]).andExpects(1).method("getFunctionValue").returns((function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][742]++;
  return "function";
})).andExpects(1).method("getObjectValue").returns({id: 5, value: "value"}).andExpects(1).method("getNullValue").returns(null).andExpects(1).method("getUndefinedValue").returns(undefined).andExpects(1).method("getEmptyStringValue").returns("").andExpects(1).method("getZeroValue").returns(0).andExpects(1).method("getTrueValue").returns(true).andExpects(1).method("getFalseValue").returns(false).andExpects(1).method("getEmptyArrayValue").returns([]).andExpects(1).method("getEmptyObjectValue").returns({});
  _$jscoverage['qmock_qunit_unit_tests.js'][762]++;
  equals(mock.getNumericValue(), 10, "getNumericValue() should return 10");
  _$jscoverage['qmock_qunit_unit_tests.js'][763]++;
  equals(mock.getStringValue(), "data", "getStringValue() should return 'data'");
  _$jscoverage['qmock_qunit_unit_tests.js'][764]++;
  ok(Mock._assertArray(mock.getArrayValue(), [1, 2, 3]), "getArrayValue() should return [ 1, 2, 3 ]");
  _$jscoverage['qmock_qunit_unit_tests.js'][765]++;
  equals(mock.getFunctionValue()(), "function", "getFunctionValue() when invoked should return 'function'");
  _$jscoverage['qmock_qunit_unit_tests.js'][766]++;
  ok(Mock._assertObject(mock.getObjectValue(), {id: 5, value: "value"}), "getObjectValue() should return object");
  _$jscoverage['qmock_qunit_unit_tests.js'][767]++;
  equals(mock.getNullValue(), null, "getNullValue() should return null");
  _$jscoverage['qmock_qunit_unit_tests.js'][768]++;
  equals(mock.getUndefinedValue(), undefined, "getUndefinedValue() should return undefined");
  _$jscoverage['qmock_qunit_unit_tests.js'][769]++;
  equals(mock.getEmptyStringValue(), "", "getEmptyStringValue() should return ''");
  _$jscoverage['qmock_qunit_unit_tests.js'][770]++;
  equals(mock.getZeroValue(), 0, "getZeroValue() should return 0");
  _$jscoverage['qmock_qunit_unit_tests.js'][771]++;
  equals(mock.getTrueValue(), true, "getTrueValue() should return true");
  _$jscoverage['qmock_qunit_unit_tests.js'][772]++;
  equals(mock.getFalseValue(), false, "getFalseValue() should return false");
  _$jscoverage['qmock_qunit_unit_tests.js'][773]++;
  ok(Mock._assertArray(mock.getEmptyArrayValue(), []), "getEmptyArrayValue() should return [ ]");
  _$jscoverage['qmock_qunit_unit_tests.js'][774]++;
  ok(Mock._assertObject(mock.getEmptyObjectValue(), {}), "getEmptyObjectValue() should return { }");
  _$jscoverage['qmock_qunit_unit_tests.js'][775]++;
  ok(mock.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][777]++;
  mock = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][778]++;
  mock.expects(1).method("returnsTest").returns("return").andExpects(1).method("isMethod").accepts(Variable);
  _$jscoverage['qmock_qunit_unit_tests.js'][786]++;
  mock.returnsTest();
  _$jscoverage['qmock_qunit_unit_tests.js'][787]++;
  mock.isMethod("test");
  _$jscoverage['qmock_qunit_unit_tests.js'][788]++;
  ok(mock.verify(), "verify() should be true");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][792]++;
test("w/ JSON: mock with no parameters, return values", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][794]++;
  expect(15);
  _$jscoverage['qmock_qunit_unit_tests.js'][796]++;
  var mock = new Mock({"getNumericValue": {returns: 10}, "getStringValue": {returns: "data"}, "getArrayValue": {returns: [1, 2, 3]}, "getFunctionValue": {returns: (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][807]++;
  return "function";
})}, "getObjectValue": {returns: {id: 5, value: "value"}}, "getNullValue": {returns: null}, "getUndefinedValue": {returns: undefined}, "getEmptyStringValue": {returns: ""}, "getZeroValue": {returns: 0}, "getTrueValue": {returns: true}, "getFalseValue": {returns: false}, "getEmptyArrayValue": {returns: []}, "getEmptyObjectValue": {returns: {}}});
  _$jscoverage['qmock_qunit_unit_tests.js'][840]++;
  equals(mock.getNumericValue(), 10, "getNumericValue() should return 10");
  _$jscoverage['qmock_qunit_unit_tests.js'][841]++;
  equals(mock.getStringValue(), "data", "getStringValue() should return 'data'");
  _$jscoverage['qmock_qunit_unit_tests.js'][842]++;
  ok(Mock._assertArray(mock.getArrayValue(), [1, 2, 3]), "getArrayValue() should return [ 1, 2, 3 ]");
  _$jscoverage['qmock_qunit_unit_tests.js'][843]++;
  equals(mock.getFunctionValue()(), "function", "getFunctionValue() when invoked should return 'function'");
  _$jscoverage['qmock_qunit_unit_tests.js'][844]++;
  ok(Mock._assertObject(mock.getObjectValue(), {id: 5, value: "value"}), "getObjectValue() should return object");
  _$jscoverage['qmock_qunit_unit_tests.js'][845]++;
  equals(mock.getNullValue(), null, "getNullValue() should return null");
  _$jscoverage['qmock_qunit_unit_tests.js'][846]++;
  equals(mock.getUndefinedValue(), undefined, "getUndefinedValue() should return undefined");
  _$jscoverage['qmock_qunit_unit_tests.js'][847]++;
  equals(mock.getEmptyStringValue(), "", "getEmptyStringValue() should return ''");
  _$jscoverage['qmock_qunit_unit_tests.js'][848]++;
  equals(mock.getZeroValue(), 0, "getZeroValue() should return 0");
  _$jscoverage['qmock_qunit_unit_tests.js'][849]++;
  equals(mock.getTrueValue(), true, "getTrueValue() should return true");
  _$jscoverage['qmock_qunit_unit_tests.js'][850]++;
  equals(mock.getFalseValue(), false, "getFalseValue() should return false");
  _$jscoverage['qmock_qunit_unit_tests.js'][851]++;
  ok(Mock._assertArray(mock.getEmptyArrayValue(), []), "getEmptyArrayValue() should return [ ]");
  _$jscoverage['qmock_qunit_unit_tests.js'][852]++;
  ok(Mock._assertObject(mock.getEmptyObjectValue(), {}), "getEmptyObjectValue() should return { }");
  _$jscoverage['qmock_qunit_unit_tests.js'][854]++;
  ok(mock.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][856]++;
  mock = new Mock({"returnsTest": {returns: "return"}, "isMethod": {accepts: Variable}});
  _$jscoverage['qmock_qunit_unit_tests.js'][865]++;
  mock.returnsTest();
  _$jscoverage['qmock_qunit_unit_tests.js'][866]++;
  mock.isMethod("test");
  _$jscoverage['qmock_qunit_unit_tests.js'][867]++;
  ok(mock.verify(), "verify() should be true");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][871]++;
test("mock with single & multiple primitive parameter expectation - default type check", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][873]++;
  expect(21);
  _$jscoverage['qmock_qunit_unit_tests.js'][876]++;
  var ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][877]++;
  ninja.expects(1).method("swing").accepts(1);
  _$jscoverage['qmock_qunit_unit_tests.js'][886]++;
  ninja.swing("one");
  _$jscoverage['qmock_qunit_unit_tests.js'][888]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][889]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][890]++;
    fail("verify() should throw exception when swing called with incorrect argument type");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][892]++;
    equals(e.length, 1, "verify() should return an array of 1 errors when not passed a paramter of type 'Number'");
    _$jscoverage['qmock_qunit_unit_tests.js'][893]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][896]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][902]++;
  ninja.swing(0);
  _$jscoverage['qmock_qunit_unit_tests.js'][903]++;
  ok(ninja.verify(), "verify() should pass after swing was called once with number primitive type - falsy value 0");
  _$jscoverage['qmock_qunit_unit_tests.js'][905]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][909]++;
  ninja.swing(2);
  _$jscoverage['qmock_qunit_unit_tests.js'][910]++;
  ok(ninja.verify(), "verify() should pass after swing was called once with number primitive type, but wrong value");
  _$jscoverage['qmock_qunit_unit_tests.js'][912]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][916]++;
  ninja.swing(1);
  _$jscoverage['qmock_qunit_unit_tests.js'][917]++;
  ok(ninja.verify(), "verify() should pass after swing was called once with number primitive type and exact expected value");
  _$jscoverage['qmock_qunit_unit_tests.js'][921]++;
  ninja.accepts(Number);
  _$jscoverage['qmock_qunit_unit_tests.js'][923]++;
  ninja.swing(1);
  _$jscoverage['qmock_qunit_unit_tests.js'][928]++;
  var samurai = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][930]++;
  samurai.expects(1).method("run").accepts("fast");
  _$jscoverage['qmock_qunit_unit_tests.js'][939]++;
  samurai.run(1);
  _$jscoverage['qmock_qunit_unit_tests.js'][940]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][941]++;
    samurai.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][942]++;
    fail("verify() should throw exception when run called with incorrect argument type");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][944]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][945]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][948]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][952]++;
  samurai.run("");
  _$jscoverage['qmock_qunit_unit_tests.js'][953]++;
  ok(samurai.verify(), "verify() should pass after swing was called once with string primitive type - falsy value ''");
  _$jscoverage['qmock_qunit_unit_tests.js'][955]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][959]++;
  samurai.run("slow");
  _$jscoverage['qmock_qunit_unit_tests.js'][960]++;
  ok(samurai.verify(), "verify() should pass after swing was called once with string primitive type but wrong value");
  _$jscoverage['qmock_qunit_unit_tests.js'][962]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][966]++;
  samurai.run("fast");
  _$jscoverage['qmock_qunit_unit_tests.js'][967]++;
  ok(samurai.verify(), "verify() should pass after swing was called once with string primitive type and exact expected value");
  _$jscoverage['qmock_qunit_unit_tests.js'][971]++;
  var wizard = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][973]++;
  wizard.expects(1).method("fireball").accepts(true);
  _$jscoverage['qmock_qunit_unit_tests.js'][982]++;
  wizard.fireball("true");
  _$jscoverage['qmock_qunit_unit_tests.js'][984]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][985]++;
    wizard.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][986]++;
    fail("verify() should throw exception when run called with incorrect argument type");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][988]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][989]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][992]++;
  wizard.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][998]++;
  wizard.fireball(false);
  _$jscoverage['qmock_qunit_unit_tests.js'][999]++;
  ok(wizard.verify(), "verify() should pass after fireball was called once with boolean primitive type");
  _$jscoverage['qmock_qunit_unit_tests.js'][1001]++;
  wizard.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1005]++;
  wizard.fireball(true);
  _$jscoverage['qmock_qunit_unit_tests.js'][1007]++;
  ok(wizard.verify(), "verify() should pass after fireball was called once with boolean primitive type and exact expected value");
  _$jscoverage['qmock_qunit_unit_tests.js'][1010]++;
  var jedi = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][1011]++;
  jedi.expects(1).method("setForceLevel").accepts({params: [3]}, {params: [9]}).required(1);
  _$jscoverage['qmock_qunit_unit_tests.js'][1025]++;
  jedi.setForceLevel();
  _$jscoverage['qmock_qunit_unit_tests.js'][1026]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1027]++;
    jedi.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1028]++;
    fail("verify() should throw exception when 'setForceLevel' called with no arguments");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1030]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1031]++;
    equals(e[0].type, "IncorrectNumberOfArgumentsException", "verify() error type should be IncorrectNumberOfArgumentsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1034]++;
  jedi.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1038]++;
  jedi.setForceLevel("one");
  _$jscoverage['qmock_qunit_unit_tests.js'][1039]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1040]++;
    jedi.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1041]++;
    fail("verify() should throw exception when 'setForceLevel' called with incorrect argument type");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1043]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1044]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1047]++;
  jedi.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1051]++;
  jedi.setForceLevel(2, "overloaded");
  _$jscoverage['qmock_qunit_unit_tests.js'][1052]++;
  ok(jedi.verify(), "verify() should pass after 'setForceLevel' was called once with Number primitive type but wrong exact expected value");
  _$jscoverage['qmock_qunit_unit_tests.js'][1053]++;
  jedi.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1057]++;
  jedi.setForceLevel(3);
  _$jscoverage['qmock_qunit_unit_tests.js'][1058]++;
  ok(jedi.verify(), "verify() should pass after 'setForceLevel' was called once with Number primitive type and first exact expected value");
  _$jscoverage['qmock_qunit_unit_tests.js'][1059]++;
  jedi.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1063]++;
  jedi.setForceLevel(9);
  _$jscoverage['qmock_qunit_unit_tests.js'][1064]++;
  ok(jedi.verify(), "verify() should pass after 'setForceLevel' was called once with Number primitive type and second exact expected value");
  _$jscoverage['qmock_qunit_unit_tests.js'][1065]++;
  jedi.reset();
}));
_$jscoverage['qmock_qunit_unit_tests.js'][1069]++;
test("mock with single & multiple primitive parameter expectation - strict value check", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][1071]++;
  expect(22);
  _$jscoverage['qmock_qunit_unit_tests.js'][1075]++;
  var ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][1076]++;
  ninja.expects(1).method("swing").accepts(1).strict();
  _$jscoverage['qmock_qunit_unit_tests.js'][1084]++;
  ninja.swing("one");
  _$jscoverage['qmock_qunit_unit_tests.js'][1086]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1087]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1088]++;
    fail("verify() should throw exception when swing called with incorrect argument type");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1090]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1091]++;
    equals(e[0].type, "IncorrectArgumentValueException", "verify() error type should be IncorrectArgumentValueException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1094]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1098]++;
  ninja.swing(2);
  _$jscoverage['qmock_qunit_unit_tests.js'][1099]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1100]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1101]++;
    fail("verify() should throw exception when swing called with incorrect argument value");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1103]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1104]++;
    equals(e[0].type, "IncorrectArgumentValueException", "verify() error type should be IncorrectArgumentValueException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1109]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1111]++;
  ninja.swing(1);
  _$jscoverage['qmock_qunit_unit_tests.js'][1113]++;
  ok(ninja.verify(), "verify() should pass after swing was called once with number primitive type");
  _$jscoverage['qmock_qunit_unit_tests.js'][1117]++;
  var samurai = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][1119]++;
  samurai.expects(1).method("run").accepts("fast").strict();
  _$jscoverage['qmock_qunit_unit_tests.js'][1129]++;
  samurai.run(1);
  _$jscoverage['qmock_qunit_unit_tests.js'][1131]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1132]++;
    samurai.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1133]++;
    fail("verify() should throw exception when swing called with incorrect argument type");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1135]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1136]++;
    equals(e[0].type, "IncorrectArgumentValueException", "verify() error type should be IncorrectArgumentValueException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1139]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1143]++;
  samurai.run("slow");
  _$jscoverage['qmock_qunit_unit_tests.js'][1145]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1146]++;
    samurai.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1147]++;
    fail("verify() should throw exception when swing called with incorrect argument type");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1149]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1150]++;
    equals(e[0].type, "IncorrectArgumentValueException", "verify() error type should be IncorrectArgumentValueException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1153]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1157]++;
  samurai.run("fast");
  _$jscoverage['qmock_qunit_unit_tests.js'][1159]++;
  ok(samurai.verify(), "verify() should pass after run was called once with string primitive type");
  _$jscoverage['qmock_qunit_unit_tests.js'][1163]++;
  var wizard = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][1165]++;
  wizard.expects(1).method("fireball").accepts(true).strict();
  _$jscoverage['qmock_qunit_unit_tests.js'][1175]++;
  wizard.fireball("true");
  _$jscoverage['qmock_qunit_unit_tests.js'][1177]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1178]++;
    wizard.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1179]++;
    fail("verify() should throw exception when swing called with incorrect argument type");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1181]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1182]++;
    equals(e[0].type, "IncorrectArgumentValueException", "verify() error type should be IncorrectArgumentValueException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1185]++;
  wizard.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1189]++;
  wizard.fireball(false);
  _$jscoverage['qmock_qunit_unit_tests.js'][1191]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1192]++;
    wizard.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1193]++;
    fail("verify() should throw exception when swing called with incorrect argument type");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1195]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1196]++;
    equals(e[0].type, "IncorrectArgumentValueException", "verify() error type should be IncorrectArgumentValueException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1199]++;
  wizard.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1203]++;
  wizard.fireball(true);
  _$jscoverage['qmock_qunit_unit_tests.js'][1205]++;
  ok(wizard.verify(), "verify() should pass after fireball was called once with boolean primitive type");
  _$jscoverage['qmock_qunit_unit_tests.js'][1208]++;
  var jedi = new Mock({"setForceLevel": {calls: 1, accepts: [{params: [3]}, {params: [9]}], required: 1}});
  _$jscoverage['qmock_qunit_unit_tests.js'][1239]++;
  jedi.setForceLevel();
  _$jscoverage['qmock_qunit_unit_tests.js'][1240]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1241]++;
    jedi.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1242]++;
    fail("verify() should throw exception when 'setForceLevel' called with no arguments");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1244]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1245]++;
    equals(e[0].type, "IncorrectNumberOfArgumentsException", "verify() error type should be IncorrectNumberOfArgumentsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1248]++;
  jedi.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1252]++;
  jedi.setForceLevel("one");
  _$jscoverage['qmock_qunit_unit_tests.js'][1253]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1254]++;
    jedi.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1255]++;
    fail("verify() should throw exception when 'setForceLevel' called with incorrect argument type");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1257]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1258]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1261]++;
  jedi.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1265]++;
  jedi.setForceLevel(2, "overloaded");
  _$jscoverage['qmock_qunit_unit_tests.js'][1267]++;
  ok(jedi.verify(), "verify() should pass after 'setForceLevel' was called once with Number primitive type but wrong exact expected value");
  _$jscoverage['qmock_qunit_unit_tests.js'][1268]++;
  jedi.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1272]++;
  jedi.setForceLevel(3);
  _$jscoverage['qmock_qunit_unit_tests.js'][1273]++;
  ok(jedi.verify(), "verify() should pass after 'setForceLevel' was called once with Number primitive type and first exact expected value");
  _$jscoverage['qmock_qunit_unit_tests.js'][1274]++;
  jedi.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1278]++;
  jedi.setForceLevel(9);
  _$jscoverage['qmock_qunit_unit_tests.js'][1279]++;
  ok(jedi.verify(), "verify() should pass after 'setForceLevel' was called once with Number primitive type and second exact expected value");
  _$jscoverage['qmock_qunit_unit_tests.js'][1280]++;
  jedi.reset();
}));
_$jscoverage['qmock_qunit_unit_tests.js'][1286]++;
test("mock with falsey (null & undefined) argument types - strict value check only [default] (no type check available)", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][1288]++;
  expect(25);
  _$jscoverage['qmock_qunit_unit_tests.js'][1290]++;
  var ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][1292]++;
  ninja.expects(1).method("giveUp").accepts(null);
  _$jscoverage['qmock_qunit_unit_tests.js'][1301]++;
  ninja.giveUp("ok");
  _$jscoverage['qmock_qunit_unit_tests.js'][1302]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1303]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1304]++;
    fail("verify() should throw exception when 'giveUp' called with incorrect argument type: String");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1306]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1307]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1310]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1314]++;
  ninja.giveUp(undefined);
  _$jscoverage['qmock_qunit_unit_tests.js'][1315]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1316]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1317]++;
    fail("verify() should throw exception when 'givep' called with incorrect argument type: undefined");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1319]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1320]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1323]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1327]++;
  ninja.giveUp(undefined);
  _$jscoverage['qmock_qunit_unit_tests.js'][1328]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1329]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1330]++;
    fail("verify() should throw exception when swing called with incorrect argument type: 0");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1332]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1333]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1336]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1340]++;
  ninja.giveUp(undefined);
  _$jscoverage['qmock_qunit_unit_tests.js'][1341]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1342]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1343]++;
    fail("verify() should throw exception when 'giveUp' called with incorrect argument type: ''");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1345]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1346]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1349]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1353]++;
  ninja.giveUp(false);
  _$jscoverage['qmock_qunit_unit_tests.js'][1354]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1355]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1356]++;
    fail("verify() should throw exception when 'giveUp' called with incorrect argument type: false");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1358]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1359]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1362]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1366]++;
  ninja.giveUp(null);
  _$jscoverage['qmock_qunit_unit_tests.js'][1368]++;
  ok(ninja.verify(), "verify() should pass after 'giveUp' was called once with null type");
  _$jscoverage['qmock_qunit_unit_tests.js'][1370]++;
  var samurai = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][1372]++;
  samurai.expects(1).method("fear").accepts(undefined);
  _$jscoverage['qmock_qunit_unit_tests.js'][1381]++;
  samurai.fear("everything");
  _$jscoverage['qmock_qunit_unit_tests.js'][1383]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1384]++;
    samurai.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1385]++;
    fail("verify() should throw exception when 'fear' called with incorrect argument type: String");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1387]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1388]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1391]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1395]++;
  samurai.fear(null);
  _$jscoverage['qmock_qunit_unit_tests.js'][1397]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1398]++;
    samurai.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1399]++;
    fail("verify() should throw exception when 'fear' called with incorrect argument type: null");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1401]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1402]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1405]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1409]++;
  samurai.fear(false);
  _$jscoverage['qmock_qunit_unit_tests.js'][1411]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1412]++;
    samurai.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1413]++;
    fail("verify() should throw exception when 'fear' called with incorrect argument type: String");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1415]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1416]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1419]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1423]++;
  samurai.fear(undefined);
  _$jscoverage['qmock_qunit_unit_tests.js'][1425]++;
  ok(samurai.verify(), "verify() should pass after 'fear' was called once with falsey type");
  _$jscoverage['qmock_qunit_unit_tests.js'][1427]++;
  var wizard = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][1429]++;
  wizard.expects(1).method("teleport").accepts(false);
  _$jscoverage['qmock_qunit_unit_tests.js'][1438]++;
  wizard.teleport("maybe");
  _$jscoverage['qmock_qunit_unit_tests.js'][1440]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1441]++;
    wizard.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1442]++;
    fail("verify() should throw exception when 'teleport' called with incorrect argument type: String");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1444]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1445]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1448]++;
  wizard.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1452]++;
  wizard.teleport(null);
  _$jscoverage['qmock_qunit_unit_tests.js'][1454]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1455]++;
    wizard.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1456]++;
    fail("verify() should throw exception when 'teleport' called with incorrect argument type: null");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1458]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1459]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1462]++;
  wizard.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1466]++;
  wizard.teleport(undefined);
  _$jscoverage['qmock_qunit_unit_tests.js'][1468]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1469]++;
    wizard.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1470]++;
    fail("verify() should throw exception when 'teleport' called with incorrect argument type: undefined");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1472]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1473]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1476]++;
  wizard.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1480]++;
  wizard.teleport(false);
  _$jscoverage['qmock_qunit_unit_tests.js'][1482]++;
  ok(wizard.verify(), "verify() should pass after 'teleport' was called once with falsey type");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][1486]++;
test("mock with composite argument types: object (literal) [enum] - type checking members", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][1488]++;
  expect(10);
  _$jscoverage['qmock_qunit_unit_tests.js'][1490]++;
  var ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][1492]++;
  ninja.expects(1).method("describe").accepts({name: "Jackie", surname: "Chan", age: 46});
  _$jscoverage['qmock_qunit_unit_tests.js'][1504]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1505]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1506]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1508]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][1509]++;
    equals(e[0].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1512]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1516]++;
  ninja.describe("Jet Li");
  _$jscoverage['qmock_qunit_unit_tests.js'][1518]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1519]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1520]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1522]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][1523]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify()[0] error type should be IncorrectArgumentsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1526]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1532]++;
  ninja.describe({name: "Jet", surname: "Li", age: 37});
  _$jscoverage['qmock_qunit_unit_tests.js'][1538]++;
  ok(ninja.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][1540]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1544]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1546]++;
  ninja.describe({name: "Jackie", surname: "Chan", age: 46});
  _$jscoverage['qmock_qunit_unit_tests.js'][1552]++;
  ok(ninja.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][1556]++;
  var samurai = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][1558]++;
  samurai.expects(1).method("describe").accepts({name: "Jet Li", age: 37, "marshal arts": ["karate", "kung-fu", "boxing"], weapon: {damage: "+2", type: "sword"}}).andExpects().property("rank").withValue("General").andExpects(1).method("getDamage").returns(-30);
  _$jscoverage['qmock_qunit_unit_tests.js'][1581]++;
  samurai.describe({name: "Jet Li", age: 37, "marshal arts": ["karate", "boxing", "kung-fu"], weapon: {damage: "+2", type: "sword"}});
  _$jscoverage['qmock_qunit_unit_tests.js'][1591]++;
  samurai.getDamage();
  _$jscoverage['qmock_qunit_unit_tests.js'][1593]++;
  ok(samurai.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][1594]++;
  ok((samurai.rank === "General"), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][1596]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1600]++;
  samurai.describe({name: "Jet Li", age: 37, "marshal arts": ["karate", "kung-fu", "boxing"], weapon: {damage: "+2", type: "sword"}});
  _$jscoverage['qmock_qunit_unit_tests.js'][1610]++;
  samurai.getDamage();
  _$jscoverage['qmock_qunit_unit_tests.js'][1612]++;
  ok(samurai.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][1613]++;
  ok((samurai.rank === "General"), "verify() should be true");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][1617]++;
test("mock with composite argument types: object (literal) [enum] - strict type checking members", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][1619]++;
  expect(11);
  _$jscoverage['qmock_qunit_unit_tests.js'][1621]++;
  var ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][1623]++;
  ninja.expects(1).method("describe").accepts({name: "Jackie", surname: "Chan", age: 46}).strict();
  _$jscoverage['qmock_qunit_unit_tests.js'][1636]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1637]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1638]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1640]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][1641]++;
    equals(e[0].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1644]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1648]++;
  ninja.describe("Jet Li");
  _$jscoverage['qmock_qunit_unit_tests.js'][1650]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1651]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1652]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1654]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][1655]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify()[0] error type should be IncorrectArgumentsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1658]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1662]++;
  ninja.describe({name: "Jet", surname: "Li", age: 37});
  _$jscoverage['qmock_qunit_unit_tests.js'][1668]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1669]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1670]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1672]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1673]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify()[0] error type should be IncorrectArgumentsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1676]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1680]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1682]++;
  ninja.describe({name: "Jackie", surname: "Chan", age: 46});
  _$jscoverage['qmock_qunit_unit_tests.js'][1688]++;
  ok(ninja.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][1692]++;
  var samurai = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][1694]++;
  samurai.expects(1).method("describe").accepts({name: "Jet Li", age: 37, "marshal arts": ["karate", "kung-fu", "boxing"], weapon: {damage: "+2", type: "sword"}}).strict().andExpects().property("rank").withValue("General").andExpects(1).method("getDamage").returns(-30);
  _$jscoverage['qmock_qunit_unit_tests.js'][1718]++;
  samurai.describe({name: "Jet Li", age: 37, "marshal arts": ["karate", "boxing", "kung-fu"], weapon: {damage: "+2", type: "sword"}});
  _$jscoverage['qmock_qunit_unit_tests.js'][1728]++;
  samurai.getDamage();
  _$jscoverage['qmock_qunit_unit_tests.js'][1730]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1731]++;
    samurai.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1732]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1734]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][1735]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify()[0] error type should be IncorrectArgumentsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1738]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1742]++;
  samurai.describe({name: "Jet Li", age: 37, "marshal arts": ["karate", "kung-fu", "boxing"], weapon: {damage: "+2", type: "sword"}});
  _$jscoverage['qmock_qunit_unit_tests.js'][1752]++;
  samurai.getDamage();
  _$jscoverage['qmock_qunit_unit_tests.js'][1754]++;
  ok(samurai.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][1755]++;
  ok((samurai.rank === "General"), "verify() should be true");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][1759]++;
test("mock with composite argument types: array", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][1761]++;
  expect(8);
  _$jscoverage['qmock_qunit_unit_tests.js'][1763]++;
  var ninja = Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][1765]++;
  ninja.expects(1).method("setSkills").accepts(["swordplay", "kung-fu", "stealth"]);
  _$jscoverage['qmock_qunit_unit_tests.js'][1771]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1772]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1773]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1775]++;
    equals(e.length, 1, "verify() should return an array of 2 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][1776]++;
    equals(e[0].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1779]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1782]++;
  ninja.setSkills(["swordplay", 1, true]);
  _$jscoverage['qmock_qunit_unit_tests.js'][1783]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1784]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1785]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1787]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][1788]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify()[0] error type should be IncorrectArgumentsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1791]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1795]++;
  ninja.setSkills(["swordplay", "kung-fu", "stealth"]);
  _$jscoverage['qmock_qunit_unit_tests.js'][1796]++;
  ok(ninja.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][1800]++;
  var jedi = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][1802]++;
  jedi.expects(0, 1).method("setMasters").accepts([{"mace windu": "Samual L Jackson"}, {"yoda": "CGI"}, {"Obi-wan Kenobi": "Ewan McGregor"}]);
  _$jscoverage['qmock_qunit_unit_tests.js'][1815]++;
  jedi.setMasters([{"mace windu": "Samual L Jackson"}, {"yoda": "CGI"}, {"Qui-Gon Jinn": "Liam Neeson"}]);
  _$jscoverage['qmock_qunit_unit_tests.js'][1823]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1824]++;
    jedi.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1825]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1827]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][1828]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify()[0] error type should be IncorrectArgumentsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1831]++;
  jedi.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1835]++;
  jedi.setMasters([{"mace windu": "Samual L Jackson"}, {"yoda": "CGI"}, {"Obi-wan Kenobi": "Ewan McGregor"}]);
  _$jscoverage['qmock_qunit_unit_tests.js'][1842]++;
  ok(jedi.verify(), "verify() should be true");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][1846]++;
test("mock with composite argument types: Date & RegExp", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][1848]++;
  expect(4);
  _$jscoverage['qmock_qunit_unit_tests.js'][1852]++;
  var ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][1854]++;
  ninja.expects(1).method("chooseTarget").accepts("Jet Li, Bruce Lee, Chuck Norris", /Bruce Lee/).strict(true);
  _$jscoverage['qmock_qunit_unit_tests.js'][1860]++;
  ninja.chooseTarget("Jet Li, Bruce Lee, Chuck Norris", /Bruce Lee/);
  _$jscoverage['qmock_qunit_unit_tests.js'][1862]++;
  ok(ninja.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][1864]++;
  var samurai = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][1866]++;
  var date = new Date();
  _$jscoverage['qmock_qunit_unit_tests.js'][1868]++;
  samurai.expects(1).method("timeOfFight").accepts(date).strict(true);
  _$jscoverage['qmock_qunit_unit_tests.js'][1874]++;
  samurai.timeOfFight(new Date(1970));
  _$jscoverage['qmock_qunit_unit_tests.js'][1876]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1877]++;
    samurai.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1878]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1880]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][1881]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify()[0] error type should be IncorrectArgumentsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1884]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1886]++;
  samurai.timeOfFight(date);
  _$jscoverage['qmock_qunit_unit_tests.js'][1888]++;
  ok(samurai.verify(), "verify() should be true");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][1892]++;
test("mock with custom object argument types", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][1894]++;
  var Sword = (function Sword() {
}), Shield = (function Shield() {
}), katana = new Sword(), wooden = new Shield();
  _$jscoverage['qmock_qunit_unit_tests.js'][1899]++;
  expect(7);
  _$jscoverage['qmock_qunit_unit_tests.js'][1903]++;
  var ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][1905]++;
  ninja.expects(1).method("setSword").accepts(katana);
  _$jscoverage['qmock_qunit_unit_tests.js'][1910]++;
  ninja.setSword(wooden);
  _$jscoverage['qmock_qunit_unit_tests.js'][1911]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1912]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1913]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1915]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][1916]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1919]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1922]++;
  ninja.setSword(null);
  _$jscoverage['qmock_qunit_unit_tests.js'][1923]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1924]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1925]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1927]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][1928]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1931]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1933]++;
  ninja.setSword(undefined);
  _$jscoverage['qmock_qunit_unit_tests.js'][1935]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][1936]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][1937]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][1939]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][1940]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][1943]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1945]++;
  ninja.setSword(katana);
  _$jscoverage['qmock_qunit_unit_tests.js'][1947]++;
  ok(ninja.verify(), "verify() should be true");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][1952]++;
test("mock with pass-through argument types: Selector & Variable", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][1954]++;
  expect(15);
  _$jscoverage['qmock_qunit_unit_tests.js'][1956]++;
  function Custom() {
}
  _$jscoverage['qmock_qunit_unit_tests.js'][1956]++;
  ;
  _$jscoverage['qmock_qunit_unit_tests.js'][1960]++;
  var ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][1962]++;
  ninja.expects(1).method("hitOpponents").accepts(Variable);
  _$jscoverage['qmock_qunit_unit_tests.js'][1971]++;
  ninja.hitOpponents(1);
  _$jscoverage['qmock_qunit_unit_tests.js'][1973]++;
  ok(ninja.verify(), "verify() should be true with primitive argument type: 1");
  _$jscoverage['qmock_qunit_unit_tests.js'][1975]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1977]++;
  ninja.hitOpponents("hard");
  _$jscoverage['qmock_qunit_unit_tests.js'][1979]++;
  ok(ninja.verify(), "verify() should be true with primitive argument type: \"hard\"");
  _$jscoverage['qmock_qunit_unit_tests.js'][1981]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1983]++;
  ninja.hitOpponents(true);
  _$jscoverage['qmock_qunit_unit_tests.js'][1985]++;
  ok(ninja.verify(), "verify() should be true with primitive argument type: true");
  _$jscoverage['qmock_qunit_unit_tests.js'][1987]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1991]++;
  ninja.hitOpponents((function () {
}));
  _$jscoverage['qmock_qunit_unit_tests.js'][1993]++;
  ok(ninja.verify(), "verify() should be true with composite argument type: Function () {}");
  _$jscoverage['qmock_qunit_unit_tests.js'][1995]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][1997]++;
  ninja.hitOpponents({});
  _$jscoverage['qmock_qunit_unit_tests.js'][1999]++;
  ok(ninja.verify(), "verify() should be true with composite argument type: {}");
  _$jscoverage['qmock_qunit_unit_tests.js'][2001]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2003]++;
  ninja.hitOpponents([]);
  _$jscoverage['qmock_qunit_unit_tests.js'][2005]++;
  ok(ninja.verify(), "verify() should be true with composite argument type: []");
  _$jscoverage['qmock_qunit_unit_tests.js'][2007]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2009]++;
  ninja.hitOpponents(new Date());
  _$jscoverage['qmock_qunit_unit_tests.js'][2011]++;
  ok(ninja.verify(), "verify() should be true with composite argument type: new Date ()");
  _$jscoverage['qmock_qunit_unit_tests.js'][2013]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2015]++;
  ninja.hitOpponents(new Custom());
  _$jscoverage['qmock_qunit_unit_tests.js'][2017]++;
  ok(ninja.verify(), "verify() should be true with composite argument type: new Custom ()");
  _$jscoverage['qmock_qunit_unit_tests.js'][2019]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2023]++;
  ninja.hitOpponents(null);
  _$jscoverage['qmock_qunit_unit_tests.js'][2025]++;
  ok(ninja.verify(), "verify() should be true with falsy argument type: null");
  _$jscoverage['qmock_qunit_unit_tests.js'][2027]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2029]++;
  ninja.hitOpponents(undefined);
  _$jscoverage['qmock_qunit_unit_tests.js'][2031]++;
  ok(ninja.verify(), "verify() should be true with falsy argument type: undefined");
  _$jscoverage['qmock_qunit_unit_tests.js'][2033]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2035]++;
  ninja.hitOpponents(false);
  _$jscoverage['qmock_qunit_unit_tests.js'][2037]++;
  ok(ninja.verify(), "verify() should be true with falsy argument type: false");
  _$jscoverage['qmock_qunit_unit_tests.js'][2039]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2041]++;
  ninja.hitOpponents("");
  _$jscoverage['qmock_qunit_unit_tests.js'][2043]++;
  ok(ninja.verify(), "verify() should be true with falsy argument type: \"\"");
  _$jscoverage['qmock_qunit_unit_tests.js'][2045]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2047]++;
  ninja.hitOpponents(0);
  _$jscoverage['qmock_qunit_unit_tests.js'][2049]++;
  ok(ninja.verify(), "verify() should be true with falsy argument type: 0");
  _$jscoverage['qmock_qunit_unit_tests.js'][2051]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2053]++;
  ninja.hitOpponents(Variable);
  _$jscoverage['qmock_qunit_unit_tests.js'][2055]++;
  ok(ninja.verify(), "verify() should be true with pass-through object: Variable");
  _$jscoverage['qmock_qunit_unit_tests.js'][2057]++;
  var samurai = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][2059]++;
  samurai.expects(1).method("findArmour").accepts(Selector);
  _$jscoverage['qmock_qunit_unit_tests.js'][2064]++;
  samurai.findArmour(Selector);
  _$jscoverage['qmock_qunit_unit_tests.js'][2066]++;
  ok(samurai.verify(), "verify() should be true with pass-through object: Selector");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][2070]++;
test("mock with multiple parameters - required total arguments", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][2072]++;
  expect(7);
  _$jscoverage['qmock_qunit_unit_tests.js'][2074]++;
  function Custom() {
}
  _$jscoverage['qmock_qunit_unit_tests.js'][2074]++;
  ;
  _$jscoverage['qmock_qunit_unit_tests.js'][2076]++;
  var ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][2078]++;
  ninja.expects(1).method("testMultipleParameters").accepts(1, "string", true, null, undefined, {}, [], new Date(), /RegExp/, Selector, new Custom()).required(11).overload(false);
  _$jscoverage['qmock_qunit_unit_tests.js'][2090]++;
  ninja.testMultipleParameters();
  _$jscoverage['qmock_qunit_unit_tests.js'][2091]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2092]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2093]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2095]++;
    equals(e[0].type, "IncorrectNumberOfArgumentsException", "verify() error type should be IncorrectNumberOfArgumentsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2098]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2102]++;
  ninja.testMultipleParameters("string", 1, true, null, undefined, {});
  _$jscoverage['qmock_qunit_unit_tests.js'][2103]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2104]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2105]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2107]++;
    equals(e[0].type, "IncorrectNumberOfArgumentsException", "verify() error type should be IncorrectNumberOfArgumentsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2110]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2114]++;
  ninja.testMultipleParameters("string", 1, true, null, undefined, {}, [], new Date(), /RegExp/, Selector, new Custom(), "string");
  _$jscoverage['qmock_qunit_unit_tests.js'][2115]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2116]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2117]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2119]++;
    equals(e[0].type, "IncorrectNumberOfArgumentsException", "verify() error type should be IncorrectNumberOfArgumentsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2122]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2126]++;
  ninja.testMultipleParameters("string", 1, true, null, undefined, {}, [], new Date(), /RegExp/, Selector, new Custom());
  _$jscoverage['qmock_qunit_unit_tests.js'][2127]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2128]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2129]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2131]++;
    equals(e.length, 2, "verify() should return an array of 2 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][2132]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
    _$jscoverage['qmock_qunit_unit_tests.js'][2133]++;
    equals(e[1].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2136]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2140]++;
  ninja.testMultipleParameters(1, "string", true, null, undefined, {}, [], new Date(), /RegExp/, Selector, new Custom());
  _$jscoverage['qmock_qunit_unit_tests.js'][2141]++;
  ok(ninja.verify(), "verify() should be true");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][2145]++;
test("w/ JSON: mock with multiple parameters - required total arguments", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][2147]++;
  expect(7);
  _$jscoverage['qmock_qunit_unit_tests.js'][2149]++;
  function Custom() {
}
  _$jscoverage['qmock_qunit_unit_tests.js'][2149]++;
  ;
  _$jscoverage['qmock_qunit_unit_tests.js'][2151]++;
  var ninja = new Mock({"testMultipleParameters": {accepts: [1, "string", true, null, undefined, {}, [], new Date(), /RegExp/, Selector, new Custom()], calls: 1, required: 11, overload: false}});
  _$jscoverage['qmock_qunit_unit_tests.js'][2164]++;
  ninja.testMultipleParameters();
  _$jscoverage['qmock_qunit_unit_tests.js'][2165]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2166]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2167]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2169]++;
    equals(e[0].type, "IncorrectNumberOfArgumentsException", "verify() error type should be IncorrectNumberOfArgumentsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2172]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2176]++;
  ninja.testMultipleParameters("string", 1, true, null, undefined, {});
  _$jscoverage['qmock_qunit_unit_tests.js'][2177]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2178]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2179]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2181]++;
    equals(e[0].type, "IncorrectNumberOfArgumentsException", "verify() error type should be IncorrectNumberOfArgumentsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2184]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2188]++;
  ninja.testMultipleParameters("string", 1, true, null, undefined, {}, [], new Date(), /RegExp/, Selector, new Custom(), "string");
  _$jscoverage['qmock_qunit_unit_tests.js'][2189]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2190]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2191]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2193]++;
    equals(e[0].type, "IncorrectNumberOfArgumentsException", "verify() error type should be IncorrectNumberOfArgumentsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2196]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2200]++;
  ninja.testMultipleParameters("string", 1, true, null, undefined, {}, [], new Date(), /RegExp/, Selector, new Custom());
  _$jscoverage['qmock_qunit_unit_tests.js'][2201]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2202]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2203]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2205]++;
    equals(e.length, 2, "verify() should return an array of 2 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][2206]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
    _$jscoverage['qmock_qunit_unit_tests.js'][2207]++;
    equals(e[1].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2210]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2214]++;
  ninja.testMultipleParameters(1, "string", true, null, undefined, {}, [], new Date(), /RegExp/, Selector, new Custom());
  _$jscoverage['qmock_qunit_unit_tests.js'][2215]++;
  ok(ninja.verify(), "verify() should be true");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][2220]++;
test("mock with multiple parameters - all optional arguments", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][2222]++;
  expect(15);
  _$jscoverage['qmock_qunit_unit_tests.js'][2224]++;
  function Custom() {
}
  _$jscoverage['qmock_qunit_unit_tests.js'][2224]++;
  ;
  _$jscoverage['qmock_qunit_unit_tests.js'][2226]++;
  var samurai = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][2228]++;
  samurai.expects(1).method("testMultipleParameters").accepts(1, "string", true, null, undefined, {}, [], new Date(), /RegExp/, Selector, new Custom());
  _$jscoverage['qmock_qunit_unit_tests.js'][2237]++;
  samurai.testMultipleParameters("string");
  _$jscoverage['qmock_qunit_unit_tests.js'][2238]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2239]++;
    samurai.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2240]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2242]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][2243]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2246]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2250]++;
  samurai.testMultipleParameters("string", 1, true, null, undefined, {});
  _$jscoverage['qmock_qunit_unit_tests.js'][2251]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2252]++;
    samurai.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2253]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2255]++;
    equals(e.length, 2, "verify() should return an array of 2 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][2256]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
    _$jscoverage['qmock_qunit_unit_tests.js'][2257]++;
    equals(e[1].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2260]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2264]++;
  samurai.testMultipleParameters("string", 1, true, null, undefined, {}, [], new Date(), /RegExp/, Selector, new Custom());
  _$jscoverage['qmock_qunit_unit_tests.js'][2265]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2266]++;
    samurai.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2267]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2269]++;
    equals(e.length, 2, "verify() should return an array of 2 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][2270]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
    _$jscoverage['qmock_qunit_unit_tests.js'][2271]++;
    equals(e[1].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2274]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2278]++;
  samurai.testMultipleParameters("string", 1, true, null, undefined, {}, [], new Date(), /RegExp/, Selector, new Custom(), null);
  _$jscoverage['qmock_qunit_unit_tests.js'][2279]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2280]++;
    samurai.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2281]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2283]++;
    equals(e.length, 2, "verify() should return an array of 2 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][2284]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
    _$jscoverage['qmock_qunit_unit_tests.js'][2285]++;
    equals(e[1].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2288]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2293]++;
  samurai.testMultipleParameters();
  _$jscoverage['qmock_qunit_unit_tests.js'][2294]++;
  ok(samurai.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][2296]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2299]++;
  samurai.testMultipleParameters(1, "string", true, null, undefined, {});
  _$jscoverage['qmock_qunit_unit_tests.js'][2300]++;
  ok(samurai.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][2302]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2306]++;
  samurai.testMultipleParameters(1, "string", true, null, undefined, {}, [], new Date(), /RegExp/, Selector, new Custom());
  _$jscoverage['qmock_qunit_unit_tests.js'][2307]++;
  ok(samurai.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][2309]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2312]++;
  samurai.testMultipleParameters(1, "string", true, null, undefined, {}, [], new Date(), /RegExp/, Selector, new Custom(), null);
  _$jscoverage['qmock_qunit_unit_tests.js'][2313]++;
  ok(samurai.verify(), "verify() should be true");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][2317]++;
test("w/ JSON: mock with multiple parameters - all optional arguments", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][2319]++;
  expect(15);
  _$jscoverage['qmock_qunit_unit_tests.js'][2321]++;
  function Custom() {
}
  _$jscoverage['qmock_qunit_unit_tests.js'][2321]++;
  ;
  _$jscoverage['qmock_qunit_unit_tests.js'][2323]++;
  var samurai = new Mock({"testMultipleParameters": {accepts: [1, "string", true, null, undefined, {}, [], new Date(), /RegExp/, Selector, new Custom()], calls: 1}});
  _$jscoverage['qmock_qunit_unit_tests.js'][2334]++;
  samurai.testMultipleParameters("string");
  _$jscoverage['qmock_qunit_unit_tests.js'][2335]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2336]++;
    samurai.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2337]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2339]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][2340]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2343]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2347]++;
  samurai.testMultipleParameters("string", 1, true, null, undefined, {});
  _$jscoverage['qmock_qunit_unit_tests.js'][2348]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2349]++;
    samurai.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2350]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2352]++;
    equals(e.length, 2, "verify() should return an array of 2 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][2353]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
    _$jscoverage['qmock_qunit_unit_tests.js'][2354]++;
    equals(e[1].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2357]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2361]++;
  samurai.testMultipleParameters("string", 1, true, null, undefined, {}, [], new Date(), /RegExp/, Selector, new Custom());
  _$jscoverage['qmock_qunit_unit_tests.js'][2362]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2363]++;
    samurai.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2364]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2366]++;
    equals(e.length, 2, "verify() should return an array of 2 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][2367]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
    _$jscoverage['qmock_qunit_unit_tests.js'][2368]++;
    equals(e[1].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2371]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2375]++;
  samurai.testMultipleParameters("string", 1, true, null, undefined, {}, [], new Date(), /RegExp/, Selector, new Custom(), null);
  _$jscoverage['qmock_qunit_unit_tests.js'][2376]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2377]++;
    samurai.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2378]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2380]++;
    equals(e.length, 2, "verify() should return an array of 2 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][2381]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
    _$jscoverage['qmock_qunit_unit_tests.js'][2382]++;
    equals(e[1].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2385]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2390]++;
  samurai.testMultipleParameters();
  _$jscoverage['qmock_qunit_unit_tests.js'][2391]++;
  ok(samurai.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][2393]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2396]++;
  samurai.testMultipleParameters(1, "string", true, null, undefined, {});
  _$jscoverage['qmock_qunit_unit_tests.js'][2397]++;
  ok(samurai.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][2399]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2403]++;
  samurai.testMultipleParameters(1, "string", true, null, undefined, {}, [], new Date(), /RegExp/, Selector, new Custom());
  _$jscoverage['qmock_qunit_unit_tests.js'][2404]++;
  ok(samurai.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][2406]++;
  samurai.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2409]++;
  samurai.testMultipleParameters(1, "string", true, null, undefined, {}, [], new Date(), /RegExp/, Selector, new Custom(), null);
  _$jscoverage['qmock_qunit_unit_tests.js'][2410]++;
  ok(samurai.verify(), "verify() should be true");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][2414]++;
test("mock with single / multiple parameters and matched return values", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][2416]++;
  expect(13);
  _$jscoverage['qmock_qunit_unit_tests.js'][2418]++;
  var ninja = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][2420]++;
  ninja.expects(1).method("swing").accepts({params: ["hard"], returns: "hit"});
  _$jscoverage['qmock_qunit_unit_tests.js'][2431]++;
  ninja.swing(1);
  _$jscoverage['qmock_qunit_unit_tests.js'][2432]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2433]++;
    ninja.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2434]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2436]++;
    equals(e.length, 1, "verify() should return an array of 1 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][2437]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentTypeException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2440]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2446]++;
  equals(ninja.swing(), undefined, "ninja.swing() should return 'undefined' when called without parameters");
  _$jscoverage['qmock_qunit_unit_tests.js'][2447]++;
  ok(ninja.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][2449]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2452]++;
  equals(ninja.swing("soft"), undefined, "ninja.swing() should return 'undefined' when called with argument of right type but non-predefined value");
  _$jscoverage['qmock_qunit_unit_tests.js'][2453]++;
  ok(ninja.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][2455]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2458]++;
  equals(ninja.swing("hard"), "hit", "ninja.swing() should return 'hit' when called with 'hard'");
  _$jscoverage['qmock_qunit_unit_tests.js'][2459]++;
  ok(ninja.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][2461]++;
  ninja.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2468]++;
  var fileMock = new Mock({"readWhole": {returns: "Foo bar baz"}});
  _$jscoverage['qmock_qunit_unit_tests.js'][2475]++;
  var fs = new Mock({isFile: {accepts: [{params: ["templates/index.tt"], returns: false}, {params: ["templates/index.haml"], returns: false}, {params: ["templates/index.tash"], returns: true}], calls: 3}, rawOpen: {accepts: ["templates/index.tash"], returns: fileMock, calls: 1}});
  _$jscoverage['qmock_qunit_unit_tests.js'][2496]++;
  equals(fs.isFile("templates/index.tt"), false, "fs.isFile('templates/index.tt') should return 'false'");
  _$jscoverage['qmock_qunit_unit_tests.js'][2497]++;
  equals(fs.isFile("templates/index.haml"), false, "fs.isFile('templates/index.haml') should return 'false'");
  _$jscoverage['qmock_qunit_unit_tests.js'][2498]++;
  equals(fs.isFile("templates/index.tash"), true, "fs.isFile('templates/index.tash') should return 'true'");
  _$jscoverage['qmock_qunit_unit_tests.js'][2499]++;
  equals(fs.rawOpen("templates/index.tt").readWhole(), "Foo bar baz", "fs.rawOpen('templates/index.tt') should return 'fileMock'");
  _$jscoverage['qmock_qunit_unit_tests.js'][2500]++;
  ok(fs.verify(), "verify() should be true");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][2504]++;
test("mock with constructor function parameters - i.e. jQuery", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][2506]++;
  expect(8);
  _$jscoverage['qmock_qunit_unit_tests.js'][2509]++;
  var $ = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][2511]++;
  $.accepts("#id").expects(1).method("html").accepts("<span>blah</span>");
  _$jscoverage['qmock_qunit_unit_tests.js'][2520]++;
  $(1).html("<span>blah</span>");
  _$jscoverage['qmock_qunit_unit_tests.js'][2522]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2523]++;
    $.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2524]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2526]++;
    equals(e.length, 1, "verify() should return an array of 1 error: test invalid parameter type");
    _$jscoverage['qmock_qunit_unit_tests.js'][2527]++;
    equals(e[0].type, "InvalidConstructorException", "verify() error type should be InvalidConstructorException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2530]++;
  $.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2534]++;
  $("#customid").html("<span>blah</span>");
  _$jscoverage['qmock_qunit_unit_tests.js'][2535]++;
  ok($.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][2539]++;
  $ = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][2541]++;
  $.accepts("#id").strict().expects(1).method("html").accepts("<span>blah</span>");
  _$jscoverage['qmock_qunit_unit_tests.js'][2550]++;
  $("#customid").html("<span>blah</span>");
  _$jscoverage['qmock_qunit_unit_tests.js'][2551]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2552]++;
    $.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2553]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2555]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][2556]++;
    equals(e[0].type, "IncorrectArgumentValueException", "verify() error type should be IncorrectArgumentValueException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2559]++;
  $.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2563]++;
  $("#id").html(true);
  _$jscoverage['qmock_qunit_unit_tests.js'][2565]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2566]++;
    $.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2567]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2569]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][2570]++;
    equals(e[0].type, "IncorrectArgumentTypeException", "verify() error type should be IncorrectArgumentValueException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2575]++;
  $("#id").html("<span>blah</span>");
  _$jscoverage['qmock_qunit_unit_tests.js'][2579]++;
  var jQuery = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][2581]++;
  jQuery.accepts(".ninjas").expects(1).method("each").accepts(Function).andExpects(3).method("wrap").accepts("<div />").andExpects().property("browser").withValue({ie: false, mozilla: false, safari: false, opera: false, chrome: true});
  _$jscoverage['qmock_qunit_unit_tests.js'][2601]++;
  jQuery(".ninjas").each((function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][2602]++;
  if (jQuery.browser.chrome === true) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2603]++;
    jQuery.wrap("<div />");
    _$jscoverage['qmock_qunit_unit_tests.js'][2604]++;
    jQuery.wrap("<div />");
    _$jscoverage['qmock_qunit_unit_tests.js'][2605]++;
    jQuery.wrap("<div />");
  }
}));
  _$jscoverage['qmock_qunit_unit_tests.js'][2611]++;
  ok(jQuery.verify(), "verify() should be true: jQuery is mocked :-)");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][2614]++;
test("chaining", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][2616]++;
  expect(14);
  _$jscoverage['qmock_qunit_unit_tests.js'][2617]++;
  var $ = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][2618]++;
  $.accepts(".ninja").expects(2).method("run").accepts(Variable).andChain().expects(1).method("fight").accepts("hard").andChain();
  _$jscoverage['qmock_qunit_unit_tests.js'][2630]++;
  $(1);
  _$jscoverage['qmock_qunit_unit_tests.js'][2631]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2632]++;
    $.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2633]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2635]++;
    equals(e.length, 3, "verify() should return an array of 3 errors");
    _$jscoverage['qmock_qunit_unit_tests.js'][2636]++;
    equals(e[0].type, "InvalidConstructorException", "verify() error type should be InvalidConstructorException");
    _$jscoverage['qmock_qunit_unit_tests.js'][2637]++;
    equals(e[1].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
    _$jscoverage['qmock_qunit_unit_tests.js'][2638]++;
    equals(e[2].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2641]++;
  $.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2644]++;
  $().run("slow").fight("hard").run("again");
  _$jscoverage['qmock_qunit_unit_tests.js'][2645]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2646]++;
    $.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2647]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2649]++;
    equals(e.length, 2, "verify() should return an array of 2 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][2650]++;
    equals(e[0].type, "InvalidConstructorException", "verify() error type should be InvalidConstructorException");
    _$jscoverage['qmock_qunit_unit_tests.js'][2651]++;
    equals(e[1].type, "IncorrectNumberOfArgumentsException", "verify() error type should be IncorrectNumberOfArgumentsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2654]++;
  $.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2658]++;
  $(".ninja").run("at a canter");
  _$jscoverage['qmock_qunit_unit_tests.js'][2660]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2661]++;
    $.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2662]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2664]++;
    equals(e.length, 2, "verify() should return an array of 2 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][2665]++;
    equals(e[0].type, "IncorrectNumberOfMethodCallsException", "verify() error type should be IncorrectNumberOfMethodCallsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2668]++;
  $.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2674]++;
  $(".samauri").run("slow").fight("hard").run("again");
  _$jscoverage['qmock_qunit_unit_tests.js'][2676]++;
  ok($.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][2678]++;
  $.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2681]++;
  $.strict();
  _$jscoverage['qmock_qunit_unit_tests.js'][2685]++;
  $(".samauri").run("slow").fight("hard").run("again");
  _$jscoverage['qmock_qunit_unit_tests.js'][2687]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2688]++;
    $.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2689]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2691]++;
    equals(e.length, 1, "verify() should return an array of 2 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][2692]++;
    equals(e[0].type, "IncorrectArgumentValueException", "verify() error type should be IncorrectArgumentValueException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2696]++;
  $.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2700]++;
  $(".ninja").run("slow").fight("hard").run("again");
  _$jscoverage['qmock_qunit_unit_tests.js'][2702]++;
  ok($.verify(), "verify() should be true");
  _$jscoverage['qmock_qunit_unit_tests.js'][2706]++;
  var jQuery = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][2708]++;
  jQuery.accepts(".ninjas").expects(2).method("each").accepts((function () {
})).andChain().andExpects(3).method("wrap").accepts("<div />").andChain().andExpects().property("browser").withValue({ie: false, mozilla: false, safari: false, opera: false, chrome: true});
  _$jscoverage['qmock_qunit_unit_tests.js'][2730]++;
  jQuery(".ninjas").each((function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][2731]++;
  if (jQuery.browser.chrome === true) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2732]++;
    jQuery.wrap("<div />").wrap("<div />").wrap("<div />");
  }
})).each((function () {
}));
  _$jscoverage['qmock_qunit_unit_tests.js'][2740]++;
  ok(jQuery.verify(), "verify() should be true: jQuery is mocked with chaining");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][2744]++;
test("callbacks", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][2746]++;
  expect(3);
  _$jscoverage['qmock_qunit_unit_tests.js'][2748]++;
  var $ = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][2752]++;
  $.expects(1).method("get").accepts("some/url", Function).required(2).callFunctionWith("data response");
  _$jscoverage['qmock_qunit_unit_tests.js'][2757]++;
  var called = false;
  _$jscoverage['qmock_qunit_unit_tests.js'][2758]++;
  $.get("some/url");
  _$jscoverage['qmock_qunit_unit_tests.js'][2760]++;
  try {
    _$jscoverage['qmock_qunit_unit_tests.js'][2761]++;
    $.verify();
    _$jscoverage['qmock_qunit_unit_tests.js'][2762]++;
    fail("verify() should throw exception");
  }
  catch (e) {
    _$jscoverage['qmock_qunit_unit_tests.js'][2764]++;
    equals(e.length, 1, "verify() should return an array of 1 error");
    _$jscoverage['qmock_qunit_unit_tests.js'][2765]++;
    equals(e[0].type, "IncorrectNumberOfArgumentsException", "verify() error type should be IncorrectNumberOfArgumentsException");
  }
  _$jscoverage['qmock_qunit_unit_tests.js'][2768]++;
  $.reset();
  _$jscoverage['qmock_qunit_unit_tests.js'][2772]++;
  var called = false;
  _$jscoverage['qmock_qunit_unit_tests.js'][2774]++;
  $.get("some/url", (function (data) {
  _$jscoverage['qmock_qunit_unit_tests.js'][2774]++;
  called = true;
}));
  _$jscoverage['qmock_qunit_unit_tests.js'][2776]++;
  equals(called, true, "called should be set to true");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][2780]++;
test("QMock version 0.1 Constructor and mockedMember object API backward compatibility", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][2782]++;
  expect(2);
  _$jscoverage['qmock_qunit_unit_tests.js'][2785]++;
  var $ = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][2786]++;
  $.expectsArguments("className");
  _$jscoverage['qmock_qunit_unit_tests.js'][2789]++;
  $(".myClassName");
  _$jscoverage['qmock_qunit_unit_tests.js'][2791]++;
  ok($.verify(), "verify() should be true: mock supports 'expectsArguments' on mock constructors");
  _$jscoverage['qmock_qunit_unit_tests.js'][2795]++;
  var mock = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][2796]++;
  mock.expects(1).method("swing").withArguments(1).andChain().andExpects(1).method("run").withArguments("string");
  _$jscoverage['qmock_qunit_unit_tests.js'][2806]++;
  mock.swing(1).run("string");
  _$jscoverage['qmock_qunit_unit_tests.js'][2808]++;
  ok(mock.verify(), "verify() should be true: mock supports 'withArguments' setup method on mocked members");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][2812]++;
test("private Mock._assertArray method", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][2814]++;
  expect(54);
  _$jscoverage['qmock_qunit_unit_tests.js'][2816]++;
  var mock = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][2818]++;
  function Custom() {
}
  _$jscoverage['qmock_qunit_unit_tests.js'][2818]++;
  ;
  _$jscoverage['qmock_qunit_unit_tests.js'][2822]++;
  ok(! Mock._assertArray(1, 2), "Mock._assertArray should be false");
  _$jscoverage['qmock_qunit_unit_tests.js'][2825]++;
  ok(Mock._assertArray([0], [0], true), "Mock._assertArray should be true (matching numbers 0)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2826]++;
  ok(Mock._assertArray([10], [10]), "Mock._assertArray should be true (matching numbers)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2827]++;
  ok(Mock._assertArray([10], [1]), "Mock._assertArray should be true (non-matching numbers)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2828]++;
  ok(Mock._assertArray([""], [""]), "Mock._assertArray should be true (falsy matching empty strings)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2829]++;
  ok(Mock._assertArray(["string"], ["string"]), "Mock._assertArray should be true (matching strings)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2830]++;
  ok(Mock._assertArray([""], ["different string"]), "Mock._assertArray should be true ([\"\"], [\"different string\"])");
  _$jscoverage['qmock_qunit_unit_tests.js'][2831]++;
  ok(Mock._assertArray([false], [false]), "Mock._assertArray should be true (matching false Booleans)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2832]++;
  ok(Mock._assertArray([true], [false]), "Mock._assertArray should be true (matching true Booleans)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2833]++;
  ok(Mock._assertArray([false], [true]), "Mock._assertArray should be true (mismatched Booleans)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2834]++;
  ok(Mock._assertArray([true], [true]), "Mock._assertArray should be true (mismatched Booleans)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2835]++;
  ok(Mock._assertArray([[]], [[]]), "Mock._assertArray should be true (empty array)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2836]++;
  ok(Mock._assertArray([{}], [{}]), "Mock._assertArray should be true (empty object)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2837]++;
  ok(Mock._assertArray([{test: "string"}], [{test: "string"}]), "Mock._assertArray should be true (object)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2838]++;
  ok(Mock._assertArray([{test: "string"}], [{test: "different string"}]), "Mock._assertArray should be true (object)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2839]++;
  ok(Mock._assertArray([["nested"]], [["nested"]]), "Mock._assertArray should be true (nested arrays)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2840]++;
  ok(Mock._assertArray([(function () {
})], [(function () {
})]), "Mock._assertArray should be true (function)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2841]++;
  ok(Mock._assertArray([null], [null]), "Mock._assertArray should be true (null)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2842]++;
  ok(Mock._assertArray([undefined], [undefined]), "Mock._assertArray should be true (undefined)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2843]++;
  ok(Mock._assertArray([/re/], [/re/]), "Mock._assertArray should be true (RegExp)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2844]++;
  ok(Mock._assertArray([new Date()], [new Date()]), "Mock._assertArray should be true (Date)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2845]++;
  ok(Mock._assertArray([new Date()], [new Date(1970)]), "Mock._assertArray should be false: [new Date()], [new Date(1970)]");
  _$jscoverage['qmock_qunit_unit_tests.js'][2846]++;
  ok(Mock._assertArray([new Custom()], [new Custom()]), "Mock._assertArray should be true (Custom object)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2847]++;
  ok(Mock._assertArray([0, "string", true, [], {}, (function () {
}), null, undefined, /re/, new Date()], [0, "string", true, [], {}, (function () {
}), null, undefined, /re/, new Date()]), "Mock._assertArray should be true (All types)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2851]++;
  ok(! Mock._assertArray([10], [""]), "Mock._assertArray should be false: [10], [\"\"]");
  _$jscoverage['qmock_qunit_unit_tests.js'][2852]++;
  ok(! Mock._assertArray([""], [10]), "Mock._assertArray should be false: [\"\"], [10]");
  _$jscoverage['qmock_qunit_unit_tests.js'][2853]++;
  ok(! Mock._assertArray([{test: "one"}], [{test: 1}]), "Mock._assertArray should be false: [{test: \"one\"}], [{test: 1}]");
  _$jscoverage['qmock_qunit_unit_tests.js'][2854]++;
  ok(! Mock._assertArray([(function () {
})], []), "Mock._assertArray should be false: [function() {}], []");
  _$jscoverage['qmock_qunit_unit_tests.js'][2855]++;
  ok(! Mock._assertArray([null], [undefined]), "Mock._assertArray should be false: [null], [undefined]");
  _$jscoverage['qmock_qunit_unit_tests.js'][2856]++;
  ok(! Mock._assertArray([undefined], ["string"]), "Mock._assertArray should be false: [undefined], [\"string\"]");
  _$jscoverage['qmock_qunit_unit_tests.js'][2857]++;
  ok(! Mock._assertArray([/re/], [9]), "Mock._assertArray should be false: [/re/], [9]");
  _$jscoverage['qmock_qunit_unit_tests.js'][2858]++;
  ok(! Mock._assertArray([new Custom()], [new Number()]), "Mock._assertArray should be false: [new Custom()], [new Number()]");
  _$jscoverage['qmock_qunit_unit_tests.js'][2862]++;
  ok(Mock._assertArray([[[["test"]]]], [[[["test"]]]]), "Mock._assertArray should be true (nested array to 4 levels)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2863]++;
  ok(Mock._assertArray(["one", ["two", ["three", ["four"]]]], ["one", ["two", ["three", ["four"]]]]), "Mock._assertArray should be true (nested array to 4 levels)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2867]++;
  ok(Mock._assertArray([0], [0], true), "Mock._assertArray should be true (matching numbers 0)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2868]++;
  ok(! Mock._assertArray([10], [1], true), "Mock._assertArray should be false (non-matching numbers)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2869]++;
  ok(Mock._assertArray([""], [""], true), "Mock._assertArray should be true (falsy matching empty strings)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2870]++;
  ok(! Mock._assertArray([""], ["different string"], true), "Mock._assertArray should be false ([\"\"], [\"different string\"])");
  _$jscoverage['qmock_qunit_unit_tests.js'][2871]++;
  ok(Mock._assertArray([false], [false], true), "Mock._assertArray should be true (matching false Booleans)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2872]++;
  ok(! Mock._assertArray([true], [false], true), "Mock._assertArray should be false (mismatched Booleans)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2873]++;
  ok(! Mock._assertArray([false], [true], true), "Mock._assertArray should be true (mismatched Booleans)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2874]++;
  ok(Mock._assertArray([true], [true], true), "Mock._assertArray should be true (mismatched Booleans)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2875]++;
  ok(Mock._assertArray([[]], [[]], true), "Mock._assertArray should be true (empty array)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2876]++;
  ok(Mock._assertArray([{}], [{}], true), "Mock._assertArray should be true (empty object)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2877]++;
  ok(Mock._assertArray([{test: "string"}], [{test: "string"}], true), "Mock._assertArray should be true (object)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2878]++;
  ok(! Mock._assertArray([{test: "string"}], [{test: "different string"}], true), "Mock._assertArray should be false (object)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2879]++;
  ok(Mock._assertArray([["nested"]], [["nested"]], true), "Mock._assertArray should be true (nested arrays)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2880]++;
  ok(Mock._assertArray([(function () {
})], [(function () {
})], true), "Mock._assertArray should be true (function)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2881]++;
  ok(Mock._assertArray([null], [null], true), "Mock._assertArray should be true (null)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2882]++;
  ok(Mock._assertArray([undefined], [undefined], true), "Mock._assertArray should be true (undefined)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2883]++;
  ok(Mock._assertArray([/re/], [/re/], true), "Mock._assertArray should be true (RegExp)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2884]++;
  ok(! Mock._assertArray([new Date()], [new Custom()], true), "Mock._assertArray should be false (Date)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2885]++;
  ok(! Mock._assertArray([new Custom()], [new Date()], true), "Mock._assertArray should be true (Custom object)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2886]++;
  ok(! Mock._assertArray([0, "string", true, [], {}, (function () {
}), null, undefined, /re/, new Date()], [1, "string", true, [], {}, (function () {
}), null, undefined, /re/, new Date()], true), "Mock._assertArray should be true (All types)");
}));
_$jscoverage['qmock_qunit_unit_tests.js'][2890]++;
test("private Mock._assertObject method", (function () {
  _$jscoverage['qmock_qunit_unit_tests.js'][2892]++;
  expect(46);
  _$jscoverage['qmock_qunit_unit_tests.js'][2894]++;
  var mock = new Mock();
  _$jscoverage['qmock_qunit_unit_tests.js'][2896]++;
  function Custom() {
}
  _$jscoverage['qmock_qunit_unit_tests.js'][2896]++;
  ;
  _$jscoverage['qmock_qunit_unit_tests.js'][2900]++;
  ok(! Mock._assertObject(undefined, false), "Mock._assertObject should be false");
  _$jscoverage['qmock_qunit_unit_tests.js'][2904]++;
  ok(Mock._assertObject({Number: 0}, {Number: 0}), "Mock._assertObject should be true (number)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2905]++;
  ok(Mock._assertObject({Number: 10}, {Number: 10}), "Mock._assertObject should be true (number)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2906]++;
  ok(Mock._assertObject({String: ""}, {String: ""}), "Mock._assertObject should be true (empty string)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2907]++;
  ok(Mock._assertObject({String: "string"}, {String: "string"}), "Mock._assertObject should be true (string)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2908]++;
  ok(Mock._assertObject({Boolean: false}, {Boolean: false}), "Mock._assertObject should be true (false Boolean)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2909]++;
  ok(Mock._assertObject({Boolean: true}, {Boolean: true}), "Mock._assertObject should be true (true Boolean)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2910]++;
  ok(Mock._assertObject({Array: []}, {Array: []}), "Mock._assertObject should be true (empty array)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2911]++;
  ok(Mock._assertObject({Object: {}}, {Object: {}}), "Mock._assertObject should be true (empty object)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2912]++;
  ok(Mock._assertObject({Object: ["one"]}, {Object: ["one"]}), "Mock._assertObject should be true (object)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2913]++;
  ok(Mock._assertObject({Object: {test: "one"}}, {Object: {test: "one"}}), "Mock._assertObject should be true (nested arrays)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2914]++;
  ok(Mock._assertObject({Function: (function () {
})}, {Function: (function () {
})}), "Mock._assertObject should be true (function)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2915]++;
  ok(Mock._assertObject({"null": null}, {"null": null}), "Mock._assertObject should be true (null)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2916]++;
  ok(Mock._assertObject({"undefined": undefined}, {"undefined": undefined}), "Mock._assertObject should be true (undefined)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2917]++;
  ok(Mock._assertObject({RegExp: /re/}, {RegExp: /re/}), "Mock._assertObject should be true (RegExp)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2918]++;
  ok(Mock._assertObject({Date: new Date()}, {Date: new Date()}), "Mock._assertObject should be true (Date)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2919]++;
  ok(Mock._assertObject({Date: new Date()}, {Date: new Date(1970)}), "Mock._assertObject should be false");
  _$jscoverage['qmock_qunit_unit_tests.js'][2920]++;
  ok(Mock._assertObject({Custom: new Custom()}, {Custom: new Custom()}), "Mock._assertObject should be true (Custom object)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2921]++;
  ok(Mock._assertObject({Number: 0, String: "string", Boolean: true, Array: [], Object: {}, Function: (function () {
}), "null": null, "undefined": undefined, RegExp: /re/, Date: new Date()}, {Number: 0, String: "string", Boolean: true, Array: [], Object: {}, Function: (function () {
}), "null": null, "undefined": undefined, RegExp: /re/, Date: new Date()}), "Mock._assertObject should be true (Many native types)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2925]++;
  ok(! Mock._assertObject({Number: 10}, {Number: "string"}), "Mock._assertObject should be false");
  _$jscoverage['qmock_qunit_unit_tests.js'][2926]++;
  ok(! Mock._assertObject({String: "string"}, {String: (function () {
})}), "Mock._assertObject should be false");
  _$jscoverage['qmock_qunit_unit_tests.js'][2927]++;
  ok(! Mock._assertObject({Array: []}, {Array: {}}), "Mock._assertObject should be false");
  _$jscoverage['qmock_qunit_unit_tests.js'][2928]++;
  ok(! Mock._assertObject({Object: ["one"]}, {Object: false}), "Mock._assertObject should be false");
  _$jscoverage['qmock_qunit_unit_tests.js'][2929]++;
  ok(! Mock._assertObject({Function: (function () {
})}, {Function: false}), "Mock._assertObject should be false");
  _$jscoverage['qmock_qunit_unit_tests.js'][2930]++;
  ok(! Mock._assertObject({"null": null}, {"null": undefined}), "Mock._assertObject should be false");
  _$jscoverage['qmock_qunit_unit_tests.js'][2931]++;
  ok(! Mock._assertObject({"undefined": undefined}, {"undefined": 0}), "Mock._assertObject should be false");
  _$jscoverage['qmock_qunit_unit_tests.js'][2932]++;
  ok(! Mock._assertObject({RegExp: /re/}, {RegExp: "/re/"}), "Mock._assertObject should be false");
  _$jscoverage['qmock_qunit_unit_tests.js'][2933]++;
  ok(! Mock._assertObject({Custom: new Custom()}, {Custom: new Date()}), "Mock._assertObject should be false (Custom object)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2936]++;
  ok(Mock._assertObject({"one": {"two": {"three": {"four": "value"}}}}, {"one": {"two": {"three": {"four": "value"}}}}), "Mock._assertObject should be true (nested object literals to 4 levels)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2940]++;
  ok(Mock._assertObject({String: ""}, {String: ""}, true), "Mock._assertObject should be true (empty string)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2941]++;
  ok(! Mock._assertObject({String: "string"}, {String: "different string"}, true), "Mock._assertObject should be false (empty string)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2942]++;
  ok(Mock._assertObject({Boolean: true}, {Boolean: true}, true), "Mock._assertObject should be true (false Boolean)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2943]++;
  ok(Mock._assertObject({Boolean: false}, {Boolean: false}, true), "Mock._assertObject should be true (false Boolean)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2944]++;
  ok(! Mock._assertObject({Boolean: false}, {Boolean: true}, true), "Mock._assertObject should be false (false Boolean)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2945]++;
  ok(Mock._assertObject({Number: 0}, {Number: 0}, true), "Mock._assertObject should be true (number)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2946]++;
  ok(Mock._assertObject({Number: 10}, {Number: 10}, true), "Mock._assertObject should be true (number)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2947]++;
  ok(! Mock._assertObject({Number: 1}, {Number: 2}, true), "Mock._assertObject should be false (true Boolean)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2948]++;
  ok(! Mock._assertObject({Array: [1]}, {Array: [2]}, true), "Mock._assertObject should be false (empty array)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2949]++;
  ok(! Mock._assertObject({Object: {test: 1}}, {Object: {test: 2}}, true), "Mock._assertObject should be false (empty object)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2950]++;
  ok(! Mock._assertObject({Object: ["one"]}, {Object: ["two"]}, true), "Mock._assertObject should be false (object)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2951]++;
  ok(! Mock._assertObject({"null": null}, {"null": undefined}, true), "Mock._assertObject should be false (null)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2952]++;
  ok(! Mock._assertObject({"undefined": undefined}, {"undefined": null}, true), "Mock._assertObject should be false (undefined)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2953]++;
  ok(! Mock._assertObject({RegExp: /re/}, {RegExp: ""}, true), "Mock._assertObject should be false (RegExp)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2954]++;
  ok(! Mock._assertObject({Date: new Date()}, {Date: new Custom()}, true), "Mock._assertObject should be false (Date)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2955]++;
  ok(! Mock._assertObject({Custom: new Custom()}, {Custom: new Date()}, true), "Mock._assertObject should be false (Custom object)");
  _$jscoverage['qmock_qunit_unit_tests.js'][2956]++;
  ok(! Mock._assertObject({Number: 0, String: "string", Boolean: true, Array: [], Object: {}, Function: (function () {
}), "null": null, "undefined": undefined, RegExp: /re/, Date: new Date()}, {Number: 1, String: "string", Boolean: true, Array: [], Object: {}, Function: (function () {
}), "null": null, "undefined": undefined, RegExp: /re/, Date: new Date()}, true), "Mock._assertObject should be false (Many native types)");
}));
_$jscoverage['qmock_qunit_unit_tests.js'].source = ["module<span class=\"k\">(</span><span class=\"s\">\"QMock\"</span><span class=\"k\">);</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * All tests follow this simple process:</span>","<span class=\"c\"> * </span>","<span class=\"c\"> *  1. Setup: Instantiate mocks and set expected interactions upon them. Sometimes located in the 'setup' phase of the testrunner before each test block.</span>","<span class=\"c\"> *  2. Exercise: Execute the relevant collaborator code to interact with the mock object.</span>","<span class=\"c\"> *  3. Verify: Call the verify method on each mock object to establish if it was interacted with correctly.</span>","<span class=\"c\"> *  4. Reset: [Optional] Call reset method on the mock to return it's internal state to the end of the setup phase. Sometimes located in the 'teardown' phase of the testrunner after each test phase.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> */</span>","","test<span class=\"k\">(</span><span class=\"s\">\"mock with single parameterless method (explicit execution call total, no return value)\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","\t","\texpect<span class=\"k\">(</span><span class=\"s\">16</span><span class=\"k\">);</span>","\t<span class=\"k\">var</span> ninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>\t","    ","\t<span class=\"c\">// Test invalid method naming - protect API if using mocked member interface to set methods and properties</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\tninja<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">).</span>method<span class=\"k\">(</span><span class=\"s\">'expects'</span><span class=\"k\">);</span>","\t\tfail<span class=\"k\">(</span><span class=\"s\">\"mock should detect bad method name 'expects'\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"array of 1 error should be thrown when bad method name 'expects' is used. Actual was\"</span><span class=\"k\">);</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"InvalidMethodNameException\"</span><span class=\"k\">,</span> <span class=\"s\">\"error type should be InvalidMethodNameException\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t","\t<span class=\"k\">var</span> ninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>\t<span class=\"c\">// Can't call reset as mock is broken, must re-instantiate mock instance.</span>","    ","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\tninja<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">).</span>method<span class=\"k\">(</span><span class=\"s\">'andExpects'</span><span class=\"k\">);</span>","\t\tfail<span class=\"k\">(</span><span class=\"s\">\"mock should detect bad method name 'andExpects'\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"array of 1 error should be thrown\"</span><span class=\"k\">);</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"InvalidMethodNameException\"</span><span class=\"k\">,</span> <span class=\"s\">\"error type should be InvalidMethodNameException\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t","\tninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span> <span class=\"c\">// Can't call reset as mock is broken, must re-instantiate mock instance.</span>","\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\tninja<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">).</span>method<span class=\"k\">(</span><span class=\"s\">'expectsArguments'</span><span class=\"k\">);</span>","\t\tfail<span class=\"k\">(</span><span class=\"s\">\"mock should detect bad method name 'expectsArguments'\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"array of 1 error should be thrown\"</span><span class=\"k\">);</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"InvalidMethodNameException\"</span><span class=\"k\">,</span> <span class=\"s\">\"error type should be InvalidMethodNameException\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t","\tninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span> <span class=\"c\">// Can't call reset as mock is broken, must re-instantiate mock instance.</span>","\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\tninja<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">).</span>method<span class=\"k\">(</span><span class=\"s\">'reset'</span><span class=\"k\">);</span>","\t\tfail<span class=\"k\">(</span><span class=\"s\">\"mock should detect bad method name 'reset'\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"array of 1 error should be thrown\"</span><span class=\"k\">);</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"InvalidMethodNameException\"</span><span class=\"k\">,</span> <span class=\"s\">\"error type should be InvalidMethodNameException\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t","\tninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span> <span class=\"c\">// Can't call reset as mock is broken, must re-instantiate mock instance.</span>","\t","\tninja","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'swing'</span><span class=\"k\">);</span>","    ","\t<span class=\"c\">// Test Bad Exercise phase - no method call</span>","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing not called\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Too many method calls</span>","\tninja<span class=\"k\">.</span>swing<span class=\"k\">();</span>","    ninja<span class=\"k\">.</span>swing<span class=\"k\">();</span>","","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing called too many times\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>\t","    ","    ninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","\t<span class=\"c\">// Test undefined return value</span>","    equals<span class=\"k\">(</span>ninja<span class=\"k\">.</span>swing<span class=\"k\">(),</span> undefined<span class=\"k\">,</span> <span class=\"s\">\"swing() without return value set should return undefined\"</span><span class=\"k\">);</span>","\t<span class=\"c\">// Test Good Exercise Phase</span>","    ok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing called\"</span><span class=\"k\">);</span>","","\t<span class=\"c\">// False Positive, expect ZERO calls</span>","\t","\t<span class=\"k\">var</span> samurai <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tsamurai","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'swing'</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass if swing not called\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Lots of calls</span>","\t","\t<span class=\"k\">var</span> wizard <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\twizard","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">2000</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'sendFireball'</span><span class=\"k\">);</span>","\t\t\t","\t<span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"s\">2000</span><span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\twizard<span class=\"k\">.</span>sendFireball<span class=\"k\">();</span>","\t<span class=\"k\">}</span>","\t\t\t\t","\tok<span class=\"k\">(</span>wizard<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass if sendFireball called 2000 times\"</span><span class=\"k\">);</span>\t","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"w/ JSON: mock with single parameterless method (explicit execution call total, no return value)\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","\t","\texpect<span class=\"k\">(</span><span class=\"s\">18</span><span class=\"k\">);</span>","","\t<span class=\"k\">var</span> ninja<span class=\"k\">,</span>","\t \tsamarui<span class=\"k\">,</span>","\t \twizard<span class=\"k\">;</span>","    ","\t<span class=\"c\">// Test invalid method naming - protect API if using mocked member interface to set methods and properties</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\tninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\t<span class=\"s\">\"expects\"</span> \t<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"c\">// expectations</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tfail<span class=\"k\">(</span><span class=\"s\">\"mock should detect bad method name 'expects'\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"array of 1 error should be thrown\"</span><span class=\"k\">);</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"InvalidMethodNameException\"</span><span class=\"k\">,</span> <span class=\"s\">\"error type should be InvalidMethodNameException\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","    ","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// Can't call reset as mock is broken, must re-instantiate mock instance.</span>","\t\tninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\t<span class=\"s\">\"andExpects\"</span> \t<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"c\">// expectations</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tfail<span class=\"k\">(</span><span class=\"s\">\"mock should detect bad method name 'andExpects'\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"array of 1 error should be thrown\"</span><span class=\"k\">);</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"InvalidMethodNameException\"</span><span class=\"k\">,</span> <span class=\"s\">\"error type should be InvalidMethodNameException\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// Can't call reset as mock is broken, must re-instantiate mock instance.</span>","\t\tninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\t<span class=\"s\">\"expectsArguments\"</span> \t<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"c\">// expectations</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tfail<span class=\"k\">(</span><span class=\"s\">\"mock should detect bad method name 'expectsArguments'\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"array of 1 error should be thrown\"</span><span class=\"k\">);</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"InvalidMethodNameException\"</span><span class=\"k\">,</span> <span class=\"s\">\"error type should be InvalidMethodNameException\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t","\tninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span> <span class=\"c\">// Can't call reset as mock is broken, must re-instantiate mock instance.</span>","\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// Can't call reset as mock is broken, must re-instantiate mock instance.</span>","\t\tninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\t<span class=\"s\">\"expectsArguments\"</span> \t<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"c\">// expectations</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tfail<span class=\"k\">(</span><span class=\"s\">\"mock should detect bad method name 'reset'\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"array of 1 error should be thrown\"</span><span class=\"k\">);</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"InvalidMethodNameException\"</span><span class=\"k\">,</span> <span class=\"s\">\"error type should be InvalidMethodNameException\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t<span class=\"c\">// Can't call reset as mock is broken, must re-instantiate mock instance.</span>","\tninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t<span class=\"s\">\"swing\"</span>\t<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\t<span class=\"c\">// expectations</span>","\t\t\tcalls <span class=\"k\">:</span> <span class=\"s\">1</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","  ","\t<span class=\"c\">// Test Bad Exercise phase - no method call</span>","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing not called\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Too many method calls</span>","\tninja<span class=\"k\">.</span>swing<span class=\"k\">();</span>","    ninja<span class=\"k\">.</span>swing<span class=\"k\">();</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing called too many times\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>\t","    ","    ninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","\t<span class=\"c\">// Test undefined return value</span>","    equals<span class=\"k\">(</span>ninja<span class=\"k\">.</span>swing<span class=\"k\">(),</span> undefined<span class=\"k\">,</span> <span class=\"s\">\"swing() without return value set should return undefined\"</span><span class=\"k\">);</span>","","\t<span class=\"c\">// Test Good Exercise Phase</span>","    ok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing called\"</span><span class=\"k\">);</span>","","\t<span class=\"c\">// False Positive, expect ZERO calls</span>","\tsamurai <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t<span class=\"s\">\"swing\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tcalls<span class=\"k\">:</span> <span class=\"s\">0</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass if swing not called\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Should fail if called</span>","\tsamurai<span class=\"k\">.</span>swing<span class=\"k\">();</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        samurai<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing called too many times (test false positive)\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","\t<span class=\"c\">// Lots of calls</span>","\t","\twizard <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>\t","\t\t<span class=\"s\">\"sendFireball\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tcalls<span class=\"k\">:</span> <span class=\"s\">2000</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t","\t<span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"s\">2000</span><span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\twizard<span class=\"k\">.</span>sendFireball<span class=\"k\">();</span>","\t<span class=\"k\">}</span>","\t\t\t\t","\tok<span class=\"k\">(</span>wizard<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass if sendFireball called 2000 times\"</span><span class=\"k\">);</span>\t","<span class=\"k\">}</span><span class=\"k\">);</span>","","","test<span class=\"k\">(</span><span class=\"s\">\"mock with single parameterless method (arbitrary execution call range, no return value)\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t","\texpect<span class=\"k\">(</span><span class=\"s\">12</span><span class=\"k\">);</span>","\t","\t<span class=\"k\">var</span> ninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tninja","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">3</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'swing'</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Bad Exercise - no swings</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing not called\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","\t<span class=\"c\">// One swing</span>","\tninja<span class=\"k\">.</span>swing<span class=\"k\">();</span>","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called once\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Two swing</span>","\t","\tninja<span class=\"k\">.</span>swing<span class=\"k\">();</span>","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called twice\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Three swing</span>","\tninja<span class=\"k\">.</span>swing<span class=\"k\">();</span>","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called thrice\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Too many swings</span>","\tninja<span class=\"k\">.</span>swing<span class=\"k\">();</span>","\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing called too many times\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","\t<span class=\"c\">// At LEAST one swing...</span>","\t","\t<span class=\"k\">var</span> samurai <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\tsamurai","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> Infinity<span class=\"k\">)</span><span class=\"c\">// Can use any string, inifinity symbol used here.</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'swing'</span><span class=\"k\">);</span>","\t\t\t","\tsamurai<span class=\"k\">.</span>swing<span class=\"k\">();</span>","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called once\"</span><span class=\"k\">);</span>","\t","\t<span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"s\">4999</span><span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\tsamurai<span class=\"k\">.</span>swing<span class=\"k\">();</span>","\t<span class=\"k\">}</span>","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called 5000 times\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Range of calls</span>","\t","\t<span class=\"k\">var</span> wizard <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\twizard","\t\t<span class=\"k\">.</span>expects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'sendFireball'</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>atLeast<span class=\"k\">(</span><span class=\"s\">100</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>noMoreThan<span class=\"k\">(</span><span class=\"s\">250</span><span class=\"k\">);</span>","\t\t\t","\t<span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">(</span> <span class=\"s\">100</span> <span class=\"k\">+</span> Math<span class=\"k\">.</span>floor<span class=\"k\">(</span>Math<span class=\"k\">.</span>random<span class=\"k\">()</span> <span class=\"k\">*</span> <span class=\"k\">(</span><span class=\"s\">250</span> <span class=\"k\">-</span> <span class=\"s\">100</span> <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">)));</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\twizard<span class=\"k\">.</span>sendFireball<span class=\"k\">();</span>","\t<span class=\"k\">}</span>","\t\t\t\t","\tok<span class=\"k\">(</span>wizard<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass if sendFireball called a random amount of times between a specified range\"</span><span class=\"k\">);</span>\t","\t","\twizard<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\twizard<span class=\"k\">.</span>sendFireball<span class=\"k\">();</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        wizard<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing out of defined call execution range\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","\t","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"w/ JSON: mock with single parameterless method (arbitrary execution call range, no return value)\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t","\texpect<span class=\"k\">(</span><span class=\"s\">12</span><span class=\"k\">);</span>","\t","\t<span class=\"k\">var</span> ninja<span class=\"k\">,</span> ","\t\tsamurai<span class=\"k\">,</span>","\t\twizard<span class=\"k\">;</span>","\t","\tninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\tswing<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tmin<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span>","\t\t\tmax<span class=\"k\">:</span> <span class=\"s\">3</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Bad Exercise - no swings</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing not called\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","\t<span class=\"c\">// One swing</span>","\tninja<span class=\"k\">.</span>swing<span class=\"k\">();</span>","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called once\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Two swing</span>","\t","\tninja<span class=\"k\">.</span>swing<span class=\"k\">();</span>","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called twice\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Three swing</span>","\tninja<span class=\"k\">.</span>swing<span class=\"k\">();</span>","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called thrice\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Too many swings</span>","\tninja<span class=\"k\">.</span>swing<span class=\"k\">();</span>","\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing called too many times\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","\t<span class=\"c\">// At LEAST one swing...</span>","\t","\tsamurai <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\tswing<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tmin<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","\t\t\tmax<span class=\"k\">:</span> Infinity <span class=\"c\">// Can use any string, inifinity symbol used here.</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t","\tsamurai<span class=\"k\">.</span>swing<span class=\"k\">();</span>","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called once\"</span><span class=\"k\">);</span>","\t","\t<span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"s\">4999</span><span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\tsamurai<span class=\"k\">.</span>swing<span class=\"k\">();</span>","\t<span class=\"k\">}</span>","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called 5000 times\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Range of calls</span>"," \twizard <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\tsendFireball<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tatLeast<span class=\"k\">:</span> <span class=\"s\">100</span><span class=\"k\">,</span>","\t\t\tnoMoreThan<span class=\"k\">:</span> <span class=\"s\">250</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t\t","\t<span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> <span class=\"k\">(</span> <span class=\"s\">100</span> <span class=\"k\">+</span> Math<span class=\"k\">.</span>floor<span class=\"k\">(</span>Math<span class=\"k\">.</span>random<span class=\"k\">()</span> <span class=\"k\">*</span> <span class=\"k\">(</span><span class=\"s\">250</span> <span class=\"k\">-</span> <span class=\"s\">100</span> <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">)));</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","\t\twizard<span class=\"k\">.</span>sendFireball<span class=\"k\">();</span>","\t<span class=\"k\">}</span>","\twizard<span class=\"k\">.</span>verify<span class=\"k\">();</span>","\t\t","\tok<span class=\"k\">(</span>wizard<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass if sendFireball called a random amount of times between a specified range\"</span><span class=\"k\">);</span>\t","\t","\twizard<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\twizard<span class=\"k\">.</span>sendFireball<span class=\"k\">();</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        wizard<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing out of defined call execution range\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","\t","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"mock with multiple parameterless methods\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","   ","\texpect<span class=\"k\">(</span><span class=\"s\">3</span><span class=\"k\">);</span>","    ","    <span class=\"k\">var</span> ninja <span class=\"k\">=</span> Mock<span class=\"k\">();</span>","    ","    ninja","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'swing'</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'run'</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'block'</span><span class=\"k\">);</span>","    ","\t<span class=\"c\">// Bad Exercise</span>","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when no methods called\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">3</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 3 errors\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    ninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","    ninja<span class=\"k\">.</span>swing<span class=\"k\">();</span>","    ninja<span class=\"k\">.</span>run<span class=\"k\">();</span>","    ninja<span class=\"k\">.</span>block<span class=\"k\">();</span>","","\t<span class=\"c\">// Good Exercise</span>","    ","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should return true once swing, run and block called\"</span><span class=\"k\">);</span>","","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"w/ JSON: mock with multiple parameterless methods\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","   ","\texpect<span class=\"k\">(</span><span class=\"s\">3</span><span class=\"k\">);</span>","","    <span class=\"k\">var</span> ninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t<span class=\"s\">\"swing\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tcalls<span class=\"k\">:</span> <span class=\"s\">1</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"run\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tcalls<span class=\"k\">:</span> <span class=\"s\">1</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"block\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tcalls<span class=\"k\">:</span> <span class=\"s\">1</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","    ","\t<span class=\"c\">// Bad Exercise</span>","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when no methods called\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">3</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 3 errors\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    ninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","    ninja<span class=\"k\">.</span>swing<span class=\"k\">();</span>","    ninja<span class=\"k\">.</span>run<span class=\"k\">();</span>","    ninja<span class=\"k\">.</span>block<span class=\"k\">();</span>","","\t<span class=\"c\">// Good Exercise</span>","    ","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should return true once swing, run and block called\"</span><span class=\"k\">);</span>","","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"mock with stubbed properties\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","\t","\texpect<span class=\"k\">(</span><span class=\"s\">16</span><span class=\"k\">);</span>","\t","\t<span class=\"k\">var</span> ninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","    ","\t<span class=\"c\">// Test invalid property naming</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\tninja<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">).</span>property<span class=\"k\">(</span><span class=\"s\">'expects'</span><span class=\"k\">);</span>","\t\tfail<span class=\"k\">(</span><span class=\"s\">\"mock should detect bad property name 'expects'\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"array of 1 error should be thrown\"</span><span class=\"k\">);</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"InvalidPropertyNameException\"</span><span class=\"k\">,</span> <span class=\"s\">\"error type should be InvalidPropertyNameException\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t","\t<span class=\"k\">var</span> ninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tninja","\t\t<span class=\"k\">.</span>expects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">\"rank\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span><span class=\"s\">\"apprentice\"</span><span class=\"k\">);</span>","\t\t","\tok<span class=\"k\">(</span> <span class=\"k\">(</span>ninja<span class=\"k\">.</span>rank <span class=\"k\">===</span> <span class=\"s\">\"apprentice\"</span><span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"ninja mock object should have a property called rank with correct value\"</span> <span class=\"k\">);</span>","\t","\tninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tninja","\t\t<span class=\"k\">.</span>expects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">\"rank\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span><span class=\"s\">\"apprentice\"</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">\"master\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span><span class=\"s\">\"The Chrome\"</span><span class=\"k\">);</span>","\t\t","\tok<span class=\"k\">(</span> <span class=\"k\">(</span> <span class=\"k\">(</span>ninja<span class=\"k\">.</span>rank <span class=\"k\">===</span> <span class=\"s\">\"apprentice\"</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>ninja<span class=\"k\">.</span>master <span class=\"k\">===</span> <span class=\"s\">\"The Chrome\"</span><span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"ninja mock object should have a two properties set correctly\"</span><span class=\"k\">)</span>","\t","\t<span class=\"c\">// Composite</span>","\t<span class=\"k\">var</span> samurai <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tsamurai","\t\t<span class=\"k\">.</span>expects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">\"rank\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span><span class=\"s\">\"apprentice\"</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">2</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">\"swing\"</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">\"master\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span><span class=\"s\">\"The Chrome\"</span><span class=\"k\">);</span>","\t\t\t","\tsamurai<span class=\"k\">.</span>swing<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Good Exercise</span>","\tok<span class=\"k\">(</span> samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called once\"</span> <span class=\"k\">);</span>","\tok<span class=\"k\">(</span> <span class=\"k\">(</span> <span class=\"k\">(</span>samurai<span class=\"k\">.</span>rank <span class=\"k\">===</span> <span class=\"s\">\"apprentice\"</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>samurai<span class=\"k\">.</span>master <span class=\"k\">===</span> <span class=\"s\">\"The Chrome\"</span><span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"ninja mock object should have a two properties set correctly\"</span><span class=\"k\">)</span>","\t","\t<span class=\"c\">// Test all object types can be stored on property</span>","\t","\t<span class=\"k\">var</span> wizard <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\t<span class=\"k\">function</span> Custom <span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t","\twizard","\t\t<span class=\"k\">.</span>expects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">\"number\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">\"boolean\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">\"null\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">)</span>\t","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">\"undefined\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span>undefined<span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">\"function\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span><span class=\"k\">function</span> stubbedFunction <span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">\"object\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">\"array\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">([])</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">\"regExp\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span><span class=\"s\">/RegExp/</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">\"date\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span><span class=\"k\">new</span> Date<span class=\"k\">())</span>\t","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">\"custom object\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span><span class=\"k\">new</span> Custom<span class=\"k\">());</span>","\t\t\t","\t<span class=\"c\">// No need to exercise - all stubs</span>","\tok<span class=\"k\">(</span> <span class=\"k\">(</span>wizard<span class=\"k\">[</span><span class=\"s\">\"number\"</span><span class=\"k\">]</span> <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'number' with a value of '1'\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> <span class=\"k\">(</span>wizard<span class=\"k\">[</span><span class=\"s\">\"boolean\"</span><span class=\"k\">]</span> <span class=\"k\">===</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'boolen' with a value of 'true'\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> <span class=\"k\">(</span>wizard<span class=\"k\">[</span><span class=\"s\">\"null\"</span><span class=\"k\">]</span> <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'null' with a value of 'null'\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> <span class=\"k\">(</span>wizard<span class=\"k\">[</span><span class=\"s\">\"undefined\"</span><span class=\"k\">]</span> <span class=\"k\">===</span> undefined<span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'undefined' with a value of undefined\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">(</span> <span class=\"k\">[</span>wizard<span class=\"k\">[</span><span class=\"s\">\"function\"</span><span class=\"k\">]],</span> <span class=\"k\">[</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'function' with a value of 'function stubbedFunction () {}'\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">(</span> <span class=\"k\">[</span>wizard<span class=\"k\">[</span><span class=\"s\">\"object\"</span><span class=\"k\">]],</span> <span class=\"k\">[</span><span class=\"k\">{}</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'object' with a value of '{}'\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">(</span> <span class=\"k\">[</span>wizard<span class=\"k\">[</span><span class=\"s\">\"array\"</span><span class=\"k\">]],</span> <span class=\"k\">[[]]</span> <span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'array' with a value of '[]'\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">(</span> <span class=\"k\">[</span>wizard<span class=\"k\">[</span><span class=\"s\">\"regExp\"</span><span class=\"k\">]],</span> <span class=\"k\">[</span><span class=\"s\">/RegExp/</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'regExp' with a value of '/RegExp/'\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">(</span> <span class=\"k\">[</span>wizard<span class=\"k\">[</span><span class=\"s\">\"date\"</span><span class=\"k\">]],</span> <span class=\"k\">[</span><span class=\"k\">new</span> Date<span class=\"k\">()]</span> <span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'date' with a value of 'new Date()'\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">(</span> <span class=\"k\">[</span>wizard<span class=\"k\">[</span><span class=\"s\">\"custom object\"</span><span class=\"k\">]],</span> <span class=\"k\">[</span><span class=\"k\">new</span> Custom<span class=\"k\">()]</span> <span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'custom object' with a value of 'new Custom()'\"</span><span class=\"k\">);</span>","\t","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"w/ JSON: mock with stubbed properties\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","\t","\texpect<span class=\"k\">(</span><span class=\"s\">15</span><span class=\"k\">);</span>","\t","\t<span class=\"k\">var</span> ninja<span class=\"k\">,</span>","\t \tsamurai<span class=\"k\">,</span>","\t\twizard<span class=\"k\">;</span>","    ","\t<span class=\"c\">// Test invalid property naming</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\tninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\t<span class=\"s\">\"expects\"</span><span class=\"k\">:</span> <span class=\"k\">{</span> ","\t\t\t\tvalue<span class=\"k\">:</span> Variable","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\tfail<span class=\"k\">(</span><span class=\"s\">\"mock should detect bad property name 'expects'\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"array of 1 error should be thrown\"</span><span class=\"k\">);</span>","\t\tequals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"InvalidPropertyNameException\"</span><span class=\"k\">,</span> <span class=\"s\">\"error type should be InvalidPropertyNameException\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","\t","\tninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t<span class=\"s\">\"rank\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tvalue<span class=\"k\">:</span> <span class=\"s\">\"apprentice\"</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t","\tok<span class=\"k\">(</span> <span class=\"k\">(</span>ninja<span class=\"k\">.</span>rank <span class=\"k\">===</span> <span class=\"s\">\"apprentice\"</span><span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"ninja mock object should have a property called 'rank' with correct value\"</span> <span class=\"k\">);</span>","\t","\tninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t<span class=\"s\">\"rank\"</span>\t<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tvalue<span class=\"k\">:</span> <span class=\"s\">\"apprentice\"</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"master\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tvalue<span class=\"k\">:</span> <span class=\"s\">\"The Chrome\"</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t","\tok<span class=\"k\">(</span> <span class=\"k\">(</span> <span class=\"k\">(</span>ninja<span class=\"k\">.</span>rank <span class=\"k\">===</span> <span class=\"s\">\"apprentice\"</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>ninja<span class=\"k\">.</span>master <span class=\"k\">===</span> <span class=\"s\">\"The Chrome\"</span><span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"ninja mock object should have a two properties set correctly\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Composite - Methods and properties mixed</span>","\tsamurai <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t<span class=\"s\">\"rank\"</span>\t<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tvalue<span class=\"k\">:</span> <span class=\"s\">\"apprentice\"</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"master\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tvalue<span class=\"k\">:</span> <span class=\"s\">\"The Chrome\"</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"swing\"</span>\t<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tcalls<span class=\"k\">:</span> <span class=\"s\">1</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t","\tsamurai<span class=\"k\">.</span>swing<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Good Exercise</span>","\tok<span class=\"k\">(</span> samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called once\"</span> <span class=\"k\">);</span>","\tok<span class=\"k\">(</span> <span class=\"k\">(</span> <span class=\"k\">(</span>samurai<span class=\"k\">.</span>rank <span class=\"k\">===</span> <span class=\"s\">\"apprentice\"</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>samurai<span class=\"k\">.</span>master <span class=\"k\">===</span> <span class=\"s\">\"The Chrome\"</span><span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"ninja mock object should have a two properties set correctly\"</span><span class=\"k\">)</span>","\t","\t<span class=\"c\">// Test all object types can be stored on property</span>","\t","\t<span class=\"k\">function</span> Custom <span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t","\twizard <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t<span class=\"s\">\"number\"</span>\t<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tvalue\t<span class=\"k\">:</span> <span class=\"s\">1</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"boolean\"</span>\t<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tvalue\t<span class=\"k\">:</span> <span class=\"k\">true</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"string\"</span>\t<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tvalue\t<span class=\"k\">:</span> <span class=\"s\">\"string\"</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"null\"</span>\t\t<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tvalue\t<span class=\"k\">:</span> <span class=\"k\">null</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"function\"</span>\t<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tvalue\t<span class=\"k\">:</span> <span class=\"k\">function</span> stubbedFunction <span class=\"k\">()</span> <span class=\"k\">{}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"object\"</span>\t<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tvalue\t<span class=\"k\">:</span> <span class=\"k\">{}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"array\"</span>\t\t<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tvalue\t<span class=\"k\">:</span> <span class=\"k\">[]</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"regExp\"</span>\t<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tvalue\t<span class=\"k\">:</span> <span class=\"s\">/RegExp/</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"date\"</span>\t\t<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tvalue\t<span class=\"k\">:</span> <span class=\"k\">new</span> Date<span class=\"k\">()</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"custom object\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tvalue\t<span class=\"k\">:</span> <span class=\"k\">new</span> Custom<span class=\"k\">()</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t","\t<span class=\"c\">// No need to exercise - all stubs</span>","\tok<span class=\"k\">(</span> <span class=\"k\">(</span>wizard<span class=\"k\">[</span><span class=\"s\">\"number\"</span><span class=\"k\">]</span> <span class=\"k\">===</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'number' with a value of '1'\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> <span class=\"k\">(</span>wizard<span class=\"k\">[</span><span class=\"s\">\"boolean\"</span><span class=\"k\">]</span> <span class=\"k\">===</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'number' with a value of 'true'\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> <span class=\"k\">(</span>wizard<span class=\"k\">[</span><span class=\"s\">\"null\"</span><span class=\"k\">]</span> <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'null' with a value of 'null'\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">(</span> <span class=\"k\">[</span>wizard<span class=\"k\">[</span><span class=\"s\">\"function\"</span><span class=\"k\">]],</span> <span class=\"k\">[</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'function' with a value of 'function stubbedFunction () {}'\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">(</span> <span class=\"k\">[</span>wizard<span class=\"k\">[</span><span class=\"s\">\"object\"</span><span class=\"k\">]],</span> <span class=\"k\">[</span><span class=\"k\">{}</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'object' with a value of '{}'\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">(</span> <span class=\"k\">[</span>wizard<span class=\"k\">[</span><span class=\"s\">\"array\"</span><span class=\"k\">]],</span> <span class=\"k\">[[]]</span> <span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'array' with a value of '[]'\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">(</span> <span class=\"k\">[</span>wizard<span class=\"k\">[</span><span class=\"s\">\"regExp\"</span><span class=\"k\">]],</span> <span class=\"k\">[</span><span class=\"s\">/RegExp/</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'regExp' with a value of '/RegExp/'\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">(</span> <span class=\"k\">[</span>wizard<span class=\"k\">[</span><span class=\"s\">\"date\"</span><span class=\"k\">]],</span> <span class=\"k\">[</span><span class=\"k\">new</span> Date<span class=\"k\">()]</span> <span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'date' with a value of 'new Date()'\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">(</span> <span class=\"k\">[</span>wizard<span class=\"k\">[</span><span class=\"s\">\"custom object\"</span><span class=\"k\">]],</span> <span class=\"k\">[</span><span class=\"k\">new</span> Custom<span class=\"k\">()]</span> <span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"wizard mock object should have a stubbed property of 'custom object' with a value of 'new Custom()'\"</span><span class=\"k\">);</span>","\t","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"mock with no parameters, return values\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    ","\texpect<span class=\"k\">(</span><span class=\"s\">15</span><span class=\"k\">);</span>","    ","    <span class=\"k\">var</span> mock <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","    ","    mock","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'getNumericValue'</span><span class=\"k\">).</span>returns<span class=\"k\">(</span><span class=\"s\">10</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'getStringValue'</span><span class=\"k\">).</span>returns<span class=\"k\">(</span><span class=\"s\">'data'</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'getArrayValue'</span><span class=\"k\">).</span>returns<span class=\"k\">(</span> <span class=\"k\">[</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">3</span><span class=\"k\">]</span> <span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'getFunctionValue'</span><span class=\"k\">).</span>returns<span class=\"k\">(</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"s\">'function'</span><span class=\"k\">;</span> <span class=\"k\">}</span> <span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'getObjectValue'</span><span class=\"k\">).</span>returns<span class=\"k\">(</span> <span class=\"k\">{</span> id<span class=\"k\">:</span> <span class=\"s\">5</span><span class=\"k\">,</span> value<span class=\"k\">:</span> <span class=\"s\">'value'</span> <span class=\"k\">}</span> <span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'getNullValue'</span><span class=\"k\">).</span>returns<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'getUndefinedValue'</span><span class=\"k\">).</span>returns<span class=\"k\">(</span>undefined<span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'getEmptyStringValue'</span><span class=\"k\">).</span>returns<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'getZeroValue'</span><span class=\"k\">).</span>returns<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'getTrueValue'</span><span class=\"k\">).</span>returns<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'getFalseValue'</span><span class=\"k\">).</span>returns<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'getEmptyArrayValue'</span><span class=\"k\">).</span>returns<span class=\"k\">([</span> <span class=\"k\">])</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'getEmptyObjectValue'</span><span class=\"k\">).</span>returns<span class=\"k\">(</span><span class=\"k\">{</span> <span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"c\">// Use exposed qMock's exposed assertArray &amp; assertObject helper methods as check contents of array/object, rather than strict checking instance like QUnit.</span>","\tequals<span class=\"k\">(</span>mock<span class=\"k\">.</span>getNumericValue<span class=\"k\">(),</span> <span class=\"s\">10</span><span class=\"k\">,</span> <span class=\"s\">\"getNumericValue() should return 10\"</span><span class=\"k\">);</span>","    equals<span class=\"k\">(</span>mock<span class=\"k\">.</span>getStringValue<span class=\"k\">(),</span> <span class=\"s\">'data'</span><span class=\"k\">,</span> <span class=\"s\">\"getStringValue() should return 'data'\"</span><span class=\"k\">);</span>","    ok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">(</span>mock<span class=\"k\">.</span>getArrayValue<span class=\"k\">(),</span> <span class=\"k\">[</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">3</span> <span class=\"k\">]),</span> <span class=\"s\">\"getArrayValue() should return [ 1, 2, 3 ]\"</span><span class=\"k\">);</span>","    equals<span class=\"k\">(</span>mock<span class=\"k\">.</span>getFunctionValue<span class=\"k\">()(),</span> <span class=\"s\">'function'</span><span class=\"k\">,</span> <span class=\"s\">\"getFunctionValue() when invoked should return 'function'\"</span><span class=\"k\">);</span>","    ok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span>mock<span class=\"k\">.</span>getObjectValue<span class=\"k\">(),</span> <span class=\"k\">{</span> id<span class=\"k\">:</span> <span class=\"s\">5</span><span class=\"k\">,</span> value<span class=\"k\">:</span> <span class=\"s\">'value'</span> <span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"getObjectValue() should return object\"</span><span class=\"k\">);</span>","    equals<span class=\"k\">(</span>mock<span class=\"k\">.</span>getNullValue<span class=\"k\">(),</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"s\">\"getNullValue() should return null\"</span><span class=\"k\">);</span>","    equals<span class=\"k\">(</span>mock<span class=\"k\">.</span>getUndefinedValue<span class=\"k\">(),</span> undefined<span class=\"k\">,</span> <span class=\"s\">\"getUndefinedValue() should return undefined\"</span><span class=\"k\">);</span>","    equals<span class=\"k\">(</span>mock<span class=\"k\">.</span>getEmptyStringValue<span class=\"k\">(),</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> <span class=\"s\">\"getEmptyStringValue() should return ''\"</span><span class=\"k\">);</span>","    equals<span class=\"k\">(</span>mock<span class=\"k\">.</span>getZeroValue<span class=\"k\">(),</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">\"getZeroValue() should return 0\"</span><span class=\"k\">);</span>","    equals<span class=\"k\">(</span>mock<span class=\"k\">.</span>getTrueValue<span class=\"k\">(),</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"s\">\"getTrueValue() should return true\"</span><span class=\"k\">);</span>","    equals<span class=\"k\">(</span>mock<span class=\"k\">.</span>getFalseValue<span class=\"k\">(),</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"getFalseValue() should return false\"</span><span class=\"k\">);</span>","    ok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">(</span>mock<span class=\"k\">.</span>getEmptyArrayValue<span class=\"k\">(),</span> <span class=\"k\">[</span> <span class=\"k\">]),</span> <span class=\"s\">\"getEmptyArrayValue() should return [ ]\"</span><span class=\"k\">);</span>","    ok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span>mock<span class=\"k\">.</span>getEmptyObjectValue<span class=\"k\">(),</span> <span class=\"k\">{</span> <span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"getEmptyObjectValue() should return { }\"</span><span class=\"k\">);</span>","    ok<span class=\"k\">(</span>mock<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","","\tmock <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\tmock","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'returnsTest'</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>returns<span class=\"k\">(</span><span class=\"s\">'return'</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'isMethod'</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span>Variable<span class=\"k\">);</span>","\t\t\t","\tmock<span class=\"k\">.</span>returnsTest<span class=\"k\">()</span>","\tmock<span class=\"k\">.</span>isMethod<span class=\"k\">(</span><span class=\"s\">\"test\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>mock<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>\t\t","\t","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"w/ JSON: mock with no parameters, return values\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    ","\texpect<span class=\"k\">(</span><span class=\"s\">15</span><span class=\"k\">);</span>","    ","    <span class=\"k\">var</span> mock <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t<span class=\"s\">\"getNumericValue\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\treturns<span class=\"k\">:</span> <span class=\"s\">10</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"getStringValue\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\treturns<span class=\"k\">:</span> <span class=\"s\">'data'</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"getArrayValue\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\treturns<span class=\"k\">:</span> <span class=\"k\">[</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">3</span> <span class=\"k\">]</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"getFunctionValue\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\treturns<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"s\">'function'</span><span class=\"k\">;</span> <span class=\"k\">}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"getObjectValue\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\treturns<span class=\"k\">:</span> <span class=\"k\">{</span> id<span class=\"k\">:</span> <span class=\"s\">5</span><span class=\"k\">,</span> value<span class=\"k\">:</span> <span class=\"s\">'value'</span> <span class=\"k\">}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"getNullValue\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\treturns<span class=\"k\">:</span> <span class=\"k\">null</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"getUndefinedValue\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\treturns<span class=\"k\">:</span> undefined","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"getEmptyStringValue\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\treturns<span class=\"k\">:</span> <span class=\"s\">\"\"</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"getZeroValue\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\treturns<span class=\"k\">:</span> <span class=\"s\">0</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"getTrueValue\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\treturns<span class=\"k\">:</span> <span class=\"k\">true</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"getFalseValue\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\treturns<span class=\"k\">:</span> <span class=\"k\">false</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"getEmptyArrayValue\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\treturns<span class=\"k\">:</span> <span class=\"k\">[]</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"getEmptyObjectValue\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\treturns<span class=\"k\">:</span> <span class=\"k\">{}</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","    ","\t<span class=\"c\">// Use exposed qMock's exposed assertArray &amp; assertObject helper methods as check contents of array/object, rather than strict checking instance like QUnit.</span>","\t\t","\tequals<span class=\"k\">(</span>mock<span class=\"k\">.</span>getNumericValue<span class=\"k\">(),</span> <span class=\"s\">10</span><span class=\"k\">,</span> <span class=\"s\">\"getNumericValue() should return 10\"</span><span class=\"k\">);</span>","    equals<span class=\"k\">(</span>mock<span class=\"k\">.</span>getStringValue<span class=\"k\">(),</span> <span class=\"s\">'data'</span><span class=\"k\">,</span> <span class=\"s\">\"getStringValue() should return 'data'\"</span><span class=\"k\">);</span>","    ok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">(</span>mock<span class=\"k\">.</span>getArrayValue<span class=\"k\">(),</span> <span class=\"k\">[</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">3</span> <span class=\"k\">]),</span> <span class=\"s\">\"getArrayValue() should return [ 1, 2, 3 ]\"</span><span class=\"k\">);</span>","    equals<span class=\"k\">(</span>mock<span class=\"k\">.</span>getFunctionValue<span class=\"k\">()(),</span> <span class=\"s\">'function'</span><span class=\"k\">,</span> <span class=\"s\">\"getFunctionValue() when invoked should return 'function'\"</span><span class=\"k\">);</span>","    ok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span>mock<span class=\"k\">.</span>getObjectValue<span class=\"k\">(),</span> <span class=\"k\">{</span> id<span class=\"k\">:</span> <span class=\"s\">5</span><span class=\"k\">,</span> value<span class=\"k\">:</span> <span class=\"s\">'value'</span> <span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"getObjectValue() should return object\"</span><span class=\"k\">);</span>","    equals<span class=\"k\">(</span>mock<span class=\"k\">.</span>getNullValue<span class=\"k\">(),</span> <span class=\"k\">null</span><span class=\"k\">,</span> <span class=\"s\">\"getNullValue() should return null\"</span><span class=\"k\">);</span>","    equals<span class=\"k\">(</span>mock<span class=\"k\">.</span>getUndefinedValue<span class=\"k\">(),</span> undefined<span class=\"k\">,</span> <span class=\"s\">\"getUndefinedValue() should return undefined\"</span><span class=\"k\">);</span>","    equals<span class=\"k\">(</span>mock<span class=\"k\">.</span>getEmptyStringValue<span class=\"k\">(),</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> <span class=\"s\">\"getEmptyStringValue() should return ''\"</span><span class=\"k\">);</span>","    equals<span class=\"k\">(</span>mock<span class=\"k\">.</span>getZeroValue<span class=\"k\">(),</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">\"getZeroValue() should return 0\"</span><span class=\"k\">);</span>","    equals<span class=\"k\">(</span>mock<span class=\"k\">.</span>getTrueValue<span class=\"k\">(),</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"s\">\"getTrueValue() should return true\"</span><span class=\"k\">);</span>","    equals<span class=\"k\">(</span>mock<span class=\"k\">.</span>getFalseValue<span class=\"k\">(),</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"getFalseValue() should return false\"</span><span class=\"k\">);</span>","    ok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">(</span>mock<span class=\"k\">.</span>getEmptyArrayValue<span class=\"k\">(),</span> <span class=\"k\">[</span> <span class=\"k\">]),</span> <span class=\"s\">\"getEmptyArrayValue() should return [ ]\"</span><span class=\"k\">);</span>","    ok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span>mock<span class=\"k\">.</span>getEmptyObjectValue<span class=\"k\">(),</span> <span class=\"k\">{</span> <span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"getEmptyObjectValue() should return { }\"</span><span class=\"k\">);</span>","\t\t","    ok<span class=\"k\">(</span>mock<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","","\tmock <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t<span class=\"s\">\"returnsTest\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\treturns<span class=\"k\">:</span> <span class=\"s\">\"return\"</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"s\">\"isMethod\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\taccepts<span class=\"k\">:</span> Variable","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t","\tmock<span class=\"k\">.</span>returnsTest<span class=\"k\">()</span>","\tmock<span class=\"k\">.</span>isMethod<span class=\"k\">(</span><span class=\"s\">\"test\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>mock<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>\t\t","\t","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"mock with single &amp; multiple primitive parameter expectation - default type check\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    ","\texpect<span class=\"k\">(</span><span class=\"s\">21</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Test single 'Number' primitive type</span>","    <span class=\"k\">var</span> ninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\tninja","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'swing'</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","\t\t\t","\t<span class=\"c\">// Bad exercise</span>","\t\t\t","\t<span class=\"c\">// Test invalid argument type</span>","\t\t\t","\tninja<span class=\"k\">.</span>swing<span class=\"k\">(</span><span class=\"s\">\"one\"</span><span class=\"k\">);</span>","\t\t\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>\t","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing called with incorrect argument type\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>\t","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors when not passed a paramter of type 'Number'\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","    ","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t\t\t","\t<span class=\"c\">// Good Exercise</span>","\t","\t<span class=\"c\">// Test same argument type - falsy value</span>","\t","\tninja<span class=\"k\">.</span>swing<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called once with number primitive type - falsy value 0\"</span> <span class=\"k\">);</span>","","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test same argument type</span>","\t\t\t","\tninja<span class=\"k\">.</span>swing<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called once with number primitive type, but wrong value\"</span> <span class=\"k\">);</span>","","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test same argument AND value</span>","\t\t\t","\tninja<span class=\"k\">.</span>swing<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called once with number primitive type and exact expected value\"</span> <span class=\"k\">);</span>","\t","\t<span class=\"c\">// Update accepted argument to primitive type for interface declarations</span>","\t","\tninja<span class=\"k\">.</span>accepts<span class=\"k\">(</span>Number<span class=\"k\">);</span>","\t","\tninja<span class=\"k\">.</span>swing<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","\t<span class=\"c\">//ok( ninja.verify(), \"verify() should pass after swing was called once with number primitive type and exact expected value\" );</span>","\t","\t<span class=\"c\">// Test String primitive</span>","\t","\t<span class=\"k\">var</span> samurai <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tsamurai","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'run'</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"s\">'fast'</span><span class=\"k\">);</span>","\t\t\t\t","\t<span class=\"c\">// Bad exercise</span>","\t\t\t","\t<span class=\"c\">// Test invalid argument type</span>","\t\t\t","\tsamurai<span class=\"k\">.</span>run<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       samurai<span class=\"k\">.</span>verify<span class=\"k\">();</span>\t","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when run called with incorrect argument type\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>\t","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","    ","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test same argument type - falsy value</span>","\t","\tsamurai<span class=\"k\">.</span>run<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called once with string primitive type - falsy value ''\"</span> <span class=\"k\">);</span>","\t","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test same argument type</span>","\t\t\t","\tsamurai<span class=\"k\">.</span>run<span class=\"k\">(</span><span class=\"s\">\"slow\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called once with string primitive type but wrong value\"</span> <span class=\"k\">);</span>","","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test same argument AND value</span>","\t\t\t","\tsamurai<span class=\"k\">.</span>run<span class=\"k\">(</span><span class=\"s\">\"fast\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called once with string primitive type and exact expected value\"</span> <span class=\"k\">);</span>","\t","\t<span class=\"c\">// Test Boolean primitive</span>","\t","\t<span class=\"k\">var</span> wizard <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\twizard","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'fireball'</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","\t\t\t","\t<span class=\"c\">// Bad Exercise</span>","\t\t\t","\t<span class=\"c\">// Test invalid argument type</span>","","\twizard<span class=\"k\">.</span>fireball<span class=\"k\">(</span><span class=\"s\">\"true\"</span><span class=\"k\">);</span>","","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       wizard<span class=\"k\">.</span>verify<span class=\"k\">();</span>\t","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when run called with incorrect argument type\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>\t","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","\t","\twizard<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Good Exercise</span>","\t","\t<span class=\"c\">// Test same argument type - falsy value</span>","\t\t\t","\twizard<span class=\"k\">.</span>fireball<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> wizard<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after fireball was called once with boolean primitive type\"</span> <span class=\"k\">);</span>","\t","\twizard<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t\t","\t<span class=\"c\">// Test same argument type and exact same value</span>","\t","\twizard<span class=\"k\">.</span>fireball<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","\t\t\t","\tok<span class=\"k\">(</span> wizard<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after fireball was called once with boolean primitive type and exact expected value\"</span> <span class=\"k\">);</span>","\t","\t<span class=\"c\">// Test multiple parameter value expectations, no return value</span>","\t<span class=\"k\">var</span> jedi <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\tjedi","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'setForceLevel'</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\tparams<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">]</span> <span class=\"c\">// 1st presentation to interface</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","\t\t\tparams<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">9</span><span class=\"k\">]</span> <span class=\"c\">// 2nd presentation to interface</span>","\t\t<span class=\"k\">}</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>required<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","\t\t","\t<span class=\"c\">// Bad Exercises</span>","\t\t","\t<span class=\"c\">// Test no argument type</span>","\t","\tjedi<span class=\"k\">.</span>setForceLevel<span class=\"k\">();</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t   jedi<span class=\"k\">.</span>verify<span class=\"k\">();</span>\t","       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when 'setForceLevel' called with no arguments\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>\t","       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfArgumentsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfArgumentsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","\tjedi<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test invalid argument types</span>","\t","\tjedi<span class=\"k\">.</span>setForceLevel<span class=\"k\">(</span><span class=\"s\">\"one\"</span><span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t   jedi<span class=\"k\">.</span>verify<span class=\"k\">();</span>\t","       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when 'setForceLevel' called with incorrect argument type\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>\t","       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","\tjedi<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Good exercises</span>","\t<span class=\"c\">// Test overloaded method with correct parameter type but wrong value</span>","\tjedi<span class=\"k\">.</span>setForceLevel<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">\"overloaded\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> jedi<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after 'setForceLevel' was called once with Number primitive type but wrong exact expected value\"</span> <span class=\"k\">);</span>","\tjedi<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test method with correct parameter type and exact value ('first presentation')</span>","\t","\tjedi<span class=\"k\">.</span>setForceLevel<span class=\"k\">(</span><span class=\"s\">3</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> jedi<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after 'setForceLevel' was called once with Number primitive type and first exact expected value\"</span> <span class=\"k\">);</span>","\tjedi<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test method with correct parameter type and exact value ('second presentation')</span>","\t","\tjedi<span class=\"k\">.</span>setForceLevel<span class=\"k\">(</span><span class=\"s\">9</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> jedi<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after 'setForceLevel' was called once with Number primitive type and second exact expected value\"</span> <span class=\"k\">);</span>","\tjedi<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"mock with single &amp; multiple primitive parameter expectation - strict value check\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    ","\texpect<span class=\"k\">(</span><span class=\"s\">22</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Test string primitive</span>","    ","    <span class=\"k\">var</span> ninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\tninja","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'swing'</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>strict<span class=\"k\">();</span>","\t\t\t","\t<span class=\"c\">// Test invalid argument type</span>","\t\t\t","\tninja<span class=\"k\">.</span>swing<span class=\"k\">(</span><span class=\"s\">\"one\"</span><span class=\"k\">);</span>","\t\t\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>\t","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing called with incorrect argument type\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>\t","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentValueException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentValueException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","    ","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t\t\t","\t<span class=\"c\">// Test invalid argument value</span>","\t\t\t","\tninja<span class=\"k\">.</span>swing<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>\t","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing called with incorrect argument value\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>\t","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentValueException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentValueException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","\t","\t<span class=\"c\">// Good Exercise</span>","\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t\t\t","\tninja<span class=\"k\">.</span>swing<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","\t\t\t","\tok<span class=\"k\">(</span> ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after swing was called once with number primitive type\"</span> <span class=\"k\">);</span>","\t","\t<span class=\"c\">// Test number primitive</span>","\t","\t<span class=\"k\">var</span> samurai <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tsamurai","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'run'</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"s\">'fast'</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>strict<span class=\"k\">();</span>","\t\t\t","\t<span class=\"c\">// Bad Exercises</span>","\t","\t<span class=\"c\">// Test invalid argument type</span>","\t","\tsamurai<span class=\"k\">.</span>run<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       samurai<span class=\"k\">.</span>verify<span class=\"k\">();</span>\t","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing called with incorrect argument type\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>\t","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentValueException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentValueException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","    ","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test invalid argument value</span>","\t","\tsamurai<span class=\"k\">.</span>run<span class=\"k\">(</span><span class=\"s\">\"slow\"</span><span class=\"k\">)</span>","\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       samurai<span class=\"k\">.</span>verify<span class=\"k\">();</span>\t","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing called with incorrect argument type\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>\t","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentValueException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentValueException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","    ","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Good Exercise</span>","\t\t\t","\tsamurai<span class=\"k\">.</span>run<span class=\"k\">(</span><span class=\"s\">\"fast\"</span><span class=\"k\">);</span>","\t\t\t","\tok<span class=\"k\">(</span> samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after run was called once with string primitive type\"</span> <span class=\"k\">);</span>","\t","\t<span class=\"c\">// Test Boolean primitives</span>","\t","\t<span class=\"k\">var</span> wizard <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\twizard","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'fireball'</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>strict<span class=\"k\">();</span>","","\t<span class=\"c\">// Bad Exercises</span>","","\t<span class=\"c\">// Test invalid argument type</span>","","\twizard<span class=\"k\">.</span>fireball<span class=\"k\">(</span><span class=\"s\">\"true\"</span><span class=\"k\">)</span>","","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       wizard<span class=\"k\">.</span>verify<span class=\"k\">();</span>\t","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing called with incorrect argument type\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>\t","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentValueException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentValueException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","","\twizard<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","\t<span class=\"c\">// Test invalid argument value</span>","","\twizard<span class=\"k\">.</span>fireball<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">)</span>","","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       wizard<span class=\"k\">.</span>verify<span class=\"k\">();</span>\t","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing called with incorrect argument type\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>\t","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentValueException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentValueException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","","\twizard<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Good Exercise</span>","\t\t\t","\twizard<span class=\"k\">.</span>fireball<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","\t\t\t","\tok<span class=\"k\">(</span> wizard<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after fireball was called once with boolean primitive type\"</span> <span class=\"k\">);</span>","\t","\t<span class=\"c\">// Test multiple parameter value expectations, no return value</span>","\t<span class=\"k\">var</span> jedi <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t<span class=\"s\">\"setForceLevel\"</span> <span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tcalls<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span>","\t\t\taccepts<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","\t\t\t\t\tparams<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">3</span><span class=\"k\">]</span> <span class=\"c\">// 1st presentation to interface</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>","\t\t\t\t\tparams<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">9</span><span class=\"k\">]</span> <span class=\"c\">// 2nd presentation to interface</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">],</span>","\t\t\trequired<span class=\"k\">:</span> <span class=\"s\">1</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\t","<span class=\"c\">/*\tProposed API - purty.</span>","<span class=\"c\">\t</span>","<span class=\"c\">\tvar jedi = new Mock({</span>","<span class=\"c\">\t\t\"setForceLevel\" : {</span>","<span class=\"c\">\t\t\t\"calls\": 1,</span>","<span class=\"c\">\t\t\t\"interface\": [</span>","<span class=\"c\">\t\t\t\t{ accepts: [3, Object], returns: true },</span>","<span class=\"c\">\t\t\t\t{ accepts: [9, Object], returns: false}</span>","<span class=\"c\">\t\t\t],</span>","<span class=\"c\">\t\t\trequired: 1</span>","<span class=\"c\">\t\t}</span>","<span class=\"c\">\t}); */</span>","\t\t","\t<span class=\"c\">// Bad Exercises</span>","\t\t","\t<span class=\"c\">// Test no argument type</span>","","\tjedi<span class=\"k\">.</span>setForceLevel<span class=\"k\">();</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t   jedi<span class=\"k\">.</span>verify<span class=\"k\">();</span>\t","       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when 'setForceLevel' called with no arguments\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>\t","       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfArgumentsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfArgumentsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","\tjedi<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test invalid argument types</span>","\t","\tjedi<span class=\"k\">.</span>setForceLevel<span class=\"k\">(</span><span class=\"s\">\"one\"</span><span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t   jedi<span class=\"k\">.</span>verify<span class=\"k\">();</span>\t","       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when 'setForceLevel' called with incorrect argument type\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>\t","       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","\tjedi<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Good exercises</span>","\t<span class=\"c\">// Test overloaded method with correct parameter type but wrong value</span>","\tjedi<span class=\"k\">.</span>setForceLevel<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">\"overloaded\"</span><span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span> jedi<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after 'setForceLevel' was called once with Number primitive type but wrong exact expected value\"</span> <span class=\"k\">);</span>","\tjedi<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test method with correct parameter type and exact value ('first presentation')</span>","\t","\tjedi<span class=\"k\">.</span>setForceLevel<span class=\"k\">(</span><span class=\"s\">3</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> jedi<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after 'setForceLevel' was called once with Number primitive type and first exact expected value\"</span> <span class=\"k\">);</span>","\tjedi<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test method with correct parameter type and exact value ('second presentation')</span>","\t","\tjedi<span class=\"k\">.</span>setForceLevel<span class=\"k\">(</span><span class=\"s\">9</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span> jedi<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after 'setForceLevel' was called once with Number primitive type and second exact expected value\"</span> <span class=\"k\">);</span>","\tjedi<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","","<span class=\"k\">}</span><span class=\"k\">);</span>","","","test<span class=\"k\">(</span><span class=\"s\">\"mock with falsey (null &amp; undefined) argument types - strict value check only [default] (no type check available)\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    ","\texpect<span class=\"k\">(</span><span class=\"s\">25</span><span class=\"k\">);</span>","    ","    <span class=\"k\">var</span> ninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","","\tninja","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'giveUp'</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","\t\t\t","\t<span class=\"c\">// Bad Exercise</span>","\t\t\t","\t<span class=\"c\">// Test invalid argument type</span>","\t\t\t","\tninja<span class=\"k\">.</span>giveUp<span class=\"k\">(</span><span class=\"s\">\"ok\"</span><span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when 'giveUp' called with incorrect argument type: String\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","    ","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test potential false positive - undefined</span>","\t","\tninja<span class=\"k\">.</span>giveUp<span class=\"k\">(</span>undefined<span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when 'givep' called with incorrect argument type: undefined\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","    ","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","\t<span class=\"c\">// Test potential false positive - falsy 0</span>","\t","\tninja<span class=\"k\">.</span>giveUp<span class=\"k\">(</span>undefined<span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when swing called with incorrect argument type: 0\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","    ","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test potential false positive - falsy \"\"</span>","\t","\tninja<span class=\"k\">.</span>giveUp<span class=\"k\">(</span>undefined<span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when 'giveUp' called with incorrect argument type: ''\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","    ","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test potential false positive - false</span>","\t","\tninja<span class=\"k\">.</span>giveUp<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when 'giveUp' called with incorrect argument type: false\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","    ","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t\t\t","\t<span class=\"c\">// Good Exercise</span>","\t\t\t","\tninja<span class=\"k\">.</span>giveUp<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","\t\t\t","\tok<span class=\"k\">(</span> ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after 'giveUp' was called once with null type\"</span> <span class=\"k\">);</span>","\t","\t<span class=\"k\">var</span> samurai <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tsamurai","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'fear'</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span>undefined<span class=\"k\">);</span>","\t\t\t","\t<span class=\"c\">// Bad Exercise</span>","\t","\t<span class=\"c\">// Test invalid argument type</span>","\t\t\t","\tsamurai<span class=\"k\">.</span>fear<span class=\"k\">(</span><span class=\"s\">'everything'</span><span class=\"k\">);</span>","\t\t\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       samurai<span class=\"k\">.</span>verify<span class=\"k\">();</span>","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when 'fear' called with incorrect argument type: String\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","\t","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test potential false positive - null</span>","\t","\tsamurai<span class=\"k\">.</span>fear<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","\t\t\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       samurai<span class=\"k\">.</span>verify<span class=\"k\">();</span>","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when 'fear' called with incorrect argument type: null\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","\t","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test potential false positive - false</span>","\t","\tsamurai<span class=\"k\">.</span>fear<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">);</span>","\t\t\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       samurai<span class=\"k\">.</span>verify<span class=\"k\">();</span>","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when 'fear' called with incorrect argument type: String\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","\t","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Good Exercise</span>","\t","\tsamurai<span class=\"k\">.</span>fear<span class=\"k\">(</span>undefined<span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span> samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after 'fear' was called once with falsey type\"</span> <span class=\"k\">);</span>","\t","\t<span class=\"k\">var</span> wizard <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\twizard","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'teleport'</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">);</span>","\t\t\t","\t<span class=\"c\">// Bad Exercise</span>","\t","\t<span class=\"c\">// Test invalid argument type</span>","\t\t\t","\twizard<span class=\"k\">.</span>teleport<span class=\"k\">(</span><span class=\"s\">'maybe'</span><span class=\"k\">);</span>","\t\t\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       wizard<span class=\"k\">.</span>verify<span class=\"k\">();</span>","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when 'teleport' called with incorrect argument type: String\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","\t","\twizard<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test potential false positive - null</span>","\t","\twizard<span class=\"k\">.</span>teleport<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","\t\t\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       wizard<span class=\"k\">.</span>verify<span class=\"k\">();</span>","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when 'teleport' called with incorrect argument type: null\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","\t","\twizard<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test potential false positive - false</span>","\t","\twizard<span class=\"k\">.</span>teleport<span class=\"k\">(</span>undefined<span class=\"k\">);</span>","\t\t\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t       wizard<span class=\"k\">.</span>verify<span class=\"k\">();</span>","\t       fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception when 'teleport' called with incorrect argument type: undefined\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","\t       equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","\t   <span class=\"k\">}</span>","\t","\twizard<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Good Exercise</span>","\t","\twizard<span class=\"k\">.</span>teleport<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span> wizard<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should pass after 'teleport' was called once with falsey type\"</span> <span class=\"k\">);</span>","","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"mock with composite argument types: object (literal) [enum] - type checking members\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    ","\texpect<span class=\"k\">(</span><span class=\"s\">10</span><span class=\"k\">);</span>","    ","    <span class=\"k\">var</span> ninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","    ","    ninja<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'describe'</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\t name<span class=\"k\">:</span> <span class=\"s\">\"Jackie\"</span><span class=\"k\">,</span>","\t\t\t surname<span class=\"k\">:</span> <span class=\"s\">\"Chan\"</span><span class=\"k\">,</span>","\t\t\t age<span class=\"k\">:</span> <span class=\"s\">46</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t","\t<span class=\"c\">// Bad Exercise</span>","","\t<span class=\"c\">// Test no arguments</span>","    ","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test incomplete arguments</span>","","\tninja<span class=\"k\">.</span>describe<span class=\"k\">(</span><span class=\"s\">'Jet Li'</span><span class=\"k\">);</span>","    ","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span> <span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify()[0] error type should be IncorrectArgumentsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Good Exercise</span>","\t","\t<span class=\"c\">// Test complete arguments, different values</span>","\t","\tninja<span class=\"k\">.</span>describe<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t name<span class=\"k\">:</span> <span class=\"s\">\"Jet\"</span><span class=\"k\">,</span>","\t\t surname<span class=\"k\">:</span> <span class=\"s\">\"Li\"</span><span class=\"k\">,</span>","\t\t age<span class=\"k\">:</span> <span class=\"s\">37</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test exact arguments - ensure no false positive</span>","\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\tninja<span class=\"k\">.</span>describe<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t name<span class=\"k\">:</span> <span class=\"s\">\"Jackie\"</span><span class=\"k\">,</span>","\t\t surname<span class=\"k\">:</span> <span class=\"s\">\"Chan\"</span><span class=\"k\">,</span>","\t\t age<span class=\"k\">:</span> <span class=\"s\">46</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Nested Composites - setup</span>","\t","\t<span class=\"k\">var</span> samurai <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tsamurai","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'describe'</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\t\tname<span class=\"k\">:</span> <span class=\"s\">\"Jet Li\"</span><span class=\"k\">,</span>","\t\t\t\tage<span class=\"k\">:</span> <span class=\"s\">37</span><span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">'marshal arts'</span><span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'karate'</span><span class=\"k\">,</span> <span class=\"s\">'kung-fu'</span><span class=\"k\">,</span> <span class=\"s\">'boxing'</span><span class=\"k\">],</span>","\t\t\t\tweapon<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\t\t\tdamage<span class=\"k\">:</span> <span class=\"s\">'+2'</span><span class=\"k\">,</span>","\t\t\t\t\ttype<span class=\"k\">:</span> <span class=\"s\">'sword'</span>","\t\t\t\t<span class=\"k\">}</span>\t\t\t\t","\t\t\t<span class=\"k\">}</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">\"rank\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span><span class=\"s\">\"General\"</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">\"getDamage\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>returns<span class=\"k\">(-</span><span class=\"s\">30</span><span class=\"k\">);</span>","\t\t\t","\t<span class=\"c\">// Good Exercise</span>","\t","\t<span class=\"c\">// Test correct argument types - wrong values</span>","\t","\tsamurai<span class=\"k\">.</span>describe<span class=\"k\">(</span><span class=\"k\">{</span>","\t\tname<span class=\"k\">:</span> <span class=\"s\">\"Jet Li\"</span><span class=\"k\">,</span>","\t\tage<span class=\"k\">:</span> <span class=\"s\">37</span><span class=\"k\">,</span>","\t\t<span class=\"s\">'marshal arts'</span><span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'karate'</span><span class=\"k\">,</span> <span class=\"s\">'boxing'</span><span class=\"k\">,</span> <span class=\"s\">'kung-fu'</span><span class=\"k\">],</span>","\t\tweapon<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tdamage<span class=\"k\">:</span> <span class=\"s\">'+2'</span><span class=\"k\">,</span>","\t\t\ttype<span class=\"k\">:</span> <span class=\"s\">'sword'</span>","\t\t<span class=\"k\">}</span>\t\t\t\t","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\tsamurai<span class=\"k\">.</span>getDamage<span class=\"k\">();</span>","\t","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">((</span>samurai<span class=\"k\">.</span>rank <span class=\"k\">===</span> <span class=\"s\">\"General\"</span><span class=\"k\">),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test correct argument types and exact values</span>","\t","\tsamurai<span class=\"k\">.</span>describe<span class=\"k\">(</span><span class=\"k\">{</span>","\t\tname<span class=\"k\">:</span> <span class=\"s\">\"Jet Li\"</span><span class=\"k\">,</span>","\t\tage<span class=\"k\">:</span> <span class=\"s\">37</span><span class=\"k\">,</span>","\t\t<span class=\"s\">'marshal arts'</span><span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'karate'</span><span class=\"k\">,</span> <span class=\"s\">'kung-fu'</span><span class=\"k\">,</span> <span class=\"s\">'boxing'</span><span class=\"k\">],</span>","\t\tweapon<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tdamage<span class=\"k\">:</span> <span class=\"s\">'+2'</span><span class=\"k\">,</span>","\t\t\ttype<span class=\"k\">:</span> <span class=\"s\">'sword'</span>","\t\t<span class=\"k\">}</span>\t\t\t\t","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\tsamurai<span class=\"k\">.</span>getDamage<span class=\"k\">();</span>","\t","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">((</span>samurai<span class=\"k\">.</span>rank <span class=\"k\">===</span> <span class=\"s\">\"General\"</span><span class=\"k\">),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\t","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"mock with composite argument types: object (literal) [enum] - strict type checking members\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    ","\texpect<span class=\"k\">(</span><span class=\"s\">11</span><span class=\"k\">);</span>","    ","    <span class=\"k\">var</span> ninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","    ","    ninja<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'describe'</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\t name<span class=\"k\">:</span> <span class=\"s\">\"Jackie\"</span><span class=\"k\">,</span>","\t\t\t surname<span class=\"k\">:</span> <span class=\"s\">\"Chan\"</span><span class=\"k\">,</span>","\t\t\t age<span class=\"k\">:</span> <span class=\"s\">46</span>","\t\t<span class=\"k\">}</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>strict<span class=\"k\">();</span>","\t\t","\t<span class=\"c\">// Bad Exercise</span>","","\t<span class=\"c\">// Test no arguments</span>","    ","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test incomplete arguments</span>","","\tninja<span class=\"k\">.</span>describe<span class=\"k\">(</span><span class=\"s\">'Jet Li'</span><span class=\"k\">);</span>","    ","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span> <span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify()[0] error type should be IncorrectArgumentsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test complete arguments, different values</span>","\t","\tninja<span class=\"k\">.</span>describe<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t name<span class=\"k\">:</span> <span class=\"s\">\"Jet\"</span><span class=\"k\">,</span>","\t\t surname<span class=\"k\">:</span> <span class=\"s\">\"Li\"</span><span class=\"k\">,</span>","\t\t age<span class=\"k\">:</span> <span class=\"s\">37</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span> <span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify()[0] error type should be IncorrectArgumentsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","\t\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test exact arguments - ensure no false positive</span>","\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\tninja<span class=\"k\">.</span>describe<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t name<span class=\"k\">:</span> <span class=\"s\">\"Jackie\"</span><span class=\"k\">,</span>","\t\t surname<span class=\"k\">:</span> <span class=\"s\">\"Chan\"</span><span class=\"k\">,</span>","\t\t age<span class=\"k\">:</span> <span class=\"s\">46</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Nested Composites - setup</span>","\t","\t<span class=\"k\">var</span> samurai <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tsamurai","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'describe'</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\t\tname<span class=\"k\">:</span> <span class=\"s\">\"Jet Li\"</span><span class=\"k\">,</span>","\t\t\t\tage<span class=\"k\">:</span> <span class=\"s\">37</span><span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">'marshal arts'</span><span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'karate'</span><span class=\"k\">,</span> <span class=\"s\">'kung-fu'</span><span class=\"k\">,</span> <span class=\"s\">'boxing'</span><span class=\"k\">],</span>","\t\t\t\tweapon<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\t\t\tdamage<span class=\"k\">:</span> <span class=\"s\">'+2'</span><span class=\"k\">,</span>","\t\t\t\t\ttype<span class=\"k\">:</span> <span class=\"s\">'sword'</span>","\t\t\t\t<span class=\"k\">}</span>\t\t\t\t","\t\t\t<span class=\"k\">}</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>strict<span class=\"k\">()</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">\"rank\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span><span class=\"s\">\"General\"</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">\"getDamage\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>returns<span class=\"k\">(-</span><span class=\"s\">30</span><span class=\"k\">);</span>","\t\t\t","\t<span class=\"c\">// Bad Exercise</span>","\t","\t<span class=\"c\">// Test correct argument types - wrong values</span>","\t","\tsamurai<span class=\"k\">.</span>describe<span class=\"k\">(</span><span class=\"k\">{</span>","\t\tname<span class=\"k\">:</span> <span class=\"s\">\"Jet Li\"</span><span class=\"k\">,</span>","\t\tage<span class=\"k\">:</span> <span class=\"s\">37</span><span class=\"k\">,</span>","\t\t<span class=\"s\">'marshal arts'</span><span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'karate'</span><span class=\"k\">,</span> <span class=\"s\">'boxing'</span><span class=\"k\">,</span> <span class=\"s\">'kung-fu'</span><span class=\"k\">],</span>","\t\tweapon<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tdamage<span class=\"k\">:</span> <span class=\"s\">'+2'</span><span class=\"k\">,</span>","\t\t\ttype<span class=\"k\">:</span> <span class=\"s\">'sword'</span>","\t\t<span class=\"k\">}</span>\t\t\t\t","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\tsamurai<span class=\"k\">.</span>getDamage<span class=\"k\">();</span>","\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        samurai<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span> <span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify()[0] error type should be IncorrectArgumentsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","\t","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test correct argument types and exact values</span>","\t","\tsamurai<span class=\"k\">.</span>describe<span class=\"k\">(</span><span class=\"k\">{</span>","\t\tname<span class=\"k\">:</span> <span class=\"s\">\"Jet Li\"</span><span class=\"k\">,</span>","\t\tage<span class=\"k\">:</span> <span class=\"s\">37</span><span class=\"k\">,</span>","\t\t<span class=\"s\">'marshal arts'</span><span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'karate'</span><span class=\"k\">,</span> <span class=\"s\">'kung-fu'</span><span class=\"k\">,</span> <span class=\"s\">'boxing'</span><span class=\"k\">],</span>","\t\tweapon<span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\tdamage<span class=\"k\">:</span> <span class=\"s\">'+2'</span><span class=\"k\">,</span>","\t\t\ttype<span class=\"k\">:</span> <span class=\"s\">'sword'</span>","\t\t<span class=\"k\">}</span>\t\t\t\t","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\tsamurai<span class=\"k\">.</span>getDamage<span class=\"k\">();</span>","\t","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">((</span>samurai<span class=\"k\">.</span>rank <span class=\"k\">===</span> <span class=\"s\">\"General\"</span><span class=\"k\">),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\t","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"mock with composite argument types: array\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    ","\texpect<span class=\"k\">(</span><span class=\"s\">8</span><span class=\"k\">);</span>","    ","    <span class=\"k\">var</span> ninja <span class=\"k\">=</span> Mock<span class=\"k\">();</span>","    ","    ninja","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'setSkills'</span><span class=\"k\">)</span>","\t\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">([</span><span class=\"s\">'swordplay'</span><span class=\"k\">,</span> <span class=\"s\">'kung-fu'</span><span class=\"k\">,</span> <span class=\"s\">'stealth'</span><span class=\"k\">]);</span>","    ","\t<span class=\"c\">// No arg</span>","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 2 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","\t<span class=\"c\">// Invalid arg</span>","\tninja<span class=\"k\">.</span>setSkills<span class=\"k\">([</span><span class=\"s\">'swordplay'</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">]);</span>","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span> <span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify()[0] error type should be IncorrectArgumentsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","\t<span class=\"c\">// Correct Usage</span>","\t","\tninja<span class=\"k\">.</span>setSkills<span class=\"k\">([</span><span class=\"s\">'swordplay'</span><span class=\"k\">,</span> <span class=\"s\">'kung-fu'</span><span class=\"k\">,</span> <span class=\"s\">'stealth'</span><span class=\"k\">]);</span>","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Nested object Literals within array</span>","\t","\t<span class=\"k\">var</span> jedi <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tjedi","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'setMasters'</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">([</span><span class=\"k\">{</span>","\t\t\t\t<span class=\"s\">'mace windu'</span><span class=\"k\">:</span> <span class=\"s\">'Samual L Jackson'</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>","\t\t\t\t<span class=\"s\">'yoda'</span><span class=\"k\">:</span> <span class=\"s\">'CGI'</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>","\t\t\t\t<span class=\"s\">'Obi-wan Kenobi'</span><span class=\"k\">:</span> <span class=\"s\">'Ewan McGregor'</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">]);</span>","\t\t\t","\t","\t<span class=\"c\">// Invalid arg</span>","\tjedi<span class=\"k\">.</span>setMasters<span class=\"k\">([</span><span class=\"k\">{</span>","\t\t<span class=\"s\">'mace windu'</span><span class=\"k\">:</span> <span class=\"s\">'Samual L Jackson'</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>","\t\t<span class=\"s\">'yoda'</span><span class=\"k\">:</span> <span class=\"s\">'CGI'</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>","\t\t<span class=\"s\">'Qui-Gon Jinn'</span><span class=\"k\">:</span> <span class=\"s\">'Liam Neeson'</span>","\t<span class=\"k\">}</span><span class=\"k\">]);</span>","\t","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        jedi<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span> <span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify()[0] error type should be IncorrectArgumentsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","\tjedi<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","\t<span class=\"c\">// Correct Usage</span>","","\tjedi<span class=\"k\">.</span>setMasters<span class=\"k\">([</span><span class=\"k\">{</span>","\t\t<span class=\"s\">'mace windu'</span><span class=\"k\">:</span> <span class=\"s\">'Samual L Jackson'</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>","\t\t<span class=\"s\">'yoda'</span><span class=\"k\">:</span> <span class=\"s\">'CGI'</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>","\t\t<span class=\"s\">'Obi-wan Kenobi'</span><span class=\"k\">:</span> <span class=\"s\">'Ewan McGregor'</span>","\t<span class=\"k\">}</span><span class=\"k\">]);</span>","\tok<span class=\"k\">(</span>jedi<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\t","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"mock with composite argument types: Date &amp; RegExp\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","\t","\texpect<span class=\"k\">(</span><span class=\"s\">4</span><span class=\"k\">)</span>","\t","\t<span class=\"c\">// Not sure how can compare beyond looking at constructors...</span>","\t","\t<span class=\"k\">var</span> ninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tninja","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">\"chooseTarget\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"s\">\"Jet Li, Bruce Lee, Chuck Norris\"</span><span class=\"k\">,</span> <span class=\"s\">/Bruce Lee/</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>strict<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","\t\t","\tninja<span class=\"k\">.</span>chooseTarget<span class=\"k\">(</span><span class=\"s\">\"Jet Li, Bruce Lee, Chuck Norris\"</span><span class=\"k\">,</span> <span class=\"s\">/Bruce Lee/</span><span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\t","\t<span class=\"k\">var</span> samurai <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\t<span class=\"k\">var</span> date <span class=\"k\">=</span> <span class=\"k\">new</span> Date<span class=\"k\">();</span>","\t","\tsamurai","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">\"timeOfFight\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span>date<span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>strict<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","\t\t","\t\tsamurai<span class=\"k\">.</span>timeOfFight<span class=\"k\">(</span><span class=\"k\">new</span> Date<span class=\"k\">(</span><span class=\"s\">1970</span><span class=\"k\">));</span>","","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        samurai<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span> <span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify()[0] error type should be IncorrectArgumentsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\tsamurai<span class=\"k\">.</span>timeOfFight<span class=\"k\">(</span>date<span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\t\t","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"mock with custom object argument types\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","\t","\t<span class=\"k\">var</span> Sword <span class=\"k\">=</span> <span class=\"k\">function</span> Sword<span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","\t\tShield <span class=\"k\">=</span> <span class=\"k\">function</span> Shield<span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","\t\tkatana <span class=\"k\">=</span> <span class=\"k\">new</span> Sword<span class=\"k\">(),</span>","\t\twooden <span class=\"k\">=</span> <span class=\"k\">new</span> Shield<span class=\"k\">();</span>","    ","\texpect<span class=\"k\">(</span><span class=\"s\">7</span><span class=\"k\">)</span>","\t","\t<span class=\"c\">// Use to check strict argument checking</span>","\t","\t<span class=\"k\">var</span> ninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tninja","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">\"setSword\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span>katana<span class=\"k\">);</span>","\t\t\t","\tninja<span class=\"k\">.</span>setSword<span class=\"k\">(</span>wooden<span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    ninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","\t<span class=\"c\">// Try with null types</span>","\tninja<span class=\"k\">.</span>setSword<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    ninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","\tninja<span class=\"k\">.</span>setSword<span class=\"k\">(</span>undefined<span class=\"k\">);</span>","\t\t\t","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    ninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t\t","\tninja<span class=\"k\">.</span>setSword<span class=\"k\">(</span>katana<span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\t","<span class=\"k\">}</span><span class=\"k\">);</span>","","","test<span class=\"k\">(</span><span class=\"s\">\"mock with pass-through argument types: Selector &amp; Variable\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","\t","\texpect<span class=\"k\">(</span><span class=\"s\">15</span><span class=\"k\">);</span>","\t","\t<span class=\"k\">function</span> Custom <span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t","\t<span class=\"c\">// Allow pass-through argument types (and implicitly values)</span>","\t","\t<span class=\"k\">var</span> ninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tninja","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">\"hitOpponents\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span>Variable<span class=\"k\">);</span>","\t\t\t","\t<span class=\"c\">// Good Exercise</span>","\t","\t<span class=\"c\">// Test primitives</span>","\t","\tninja<span class=\"k\">.</span>hitOpponents<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true with primitive argument type: 1\"</span><span class=\"k\">);</span>","\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\tninja<span class=\"k\">.</span>hitOpponents<span class=\"k\">(</span><span class=\"s\">\"hard\"</span><span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true with primitive argument type: </span><span class=\"t\">\\\"</span><span class=\"s\">hard</span><span class=\"t\">\\\"</span><span class=\"s\">\"</span><span class=\"k\">);</span>","\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\tninja<span class=\"k\">.</span>hitOpponents<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true with primitive argument type: true\"</span><span class=\"k\">);</span>","\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test Composites</span>","\t","\tninja<span class=\"k\">.</span>hitOpponents<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true with composite argument type: Function () {}\"</span><span class=\"k\">);</span>","\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\tninja<span class=\"k\">.</span>hitOpponents<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true with composite argument type: {}\"</span><span class=\"k\">);</span>","\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\tninja<span class=\"k\">.</span>hitOpponents<span class=\"k\">([]);</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true with composite argument type: []\"</span><span class=\"k\">);</span>","\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\tninja<span class=\"k\">.</span>hitOpponents<span class=\"k\">(</span><span class=\"k\">new</span> Date<span class=\"k\">());</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true with composite argument type: new Date ()\"</span><span class=\"k\">);</span>","\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\tninja<span class=\"k\">.</span>hitOpponents<span class=\"k\">(</span><span class=\"k\">new</span> Custom <span class=\"k\">());</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true with composite argument type: new Custom ()\"</span><span class=\"k\">);</span>","\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test falsy values</span>","\t","\tninja<span class=\"k\">.</span>hitOpponents<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true with falsy argument type: null\"</span><span class=\"k\">);</span>","\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\tninja<span class=\"k\">.</span>hitOpponents<span class=\"k\">(</span>undefined<span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true with falsy argument type: undefined\"</span><span class=\"k\">);</span>","\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\tninja<span class=\"k\">.</span>hitOpponents<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true with falsy argument type: false\"</span><span class=\"k\">);</span>","\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\tninja<span class=\"k\">.</span>hitOpponents<span class=\"k\">(</span><span class=\"s\">\"\"</span><span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true with falsy argument type: </span><span class=\"t\">\\\"\\\"</span><span class=\"s\">\"</span><span class=\"k\">);</span>","\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\tninja<span class=\"k\">.</span>hitOpponents<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true with falsy argument type: 0\"</span><span class=\"k\">);</span>","\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t\t\t","\tninja<span class=\"k\">.</span>hitOpponents<span class=\"k\">(</span>Variable<span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true with pass-through object: Variable\"</span><span class=\"k\">);</span>","\t","\t<span class=\"k\">var</span> samurai <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tsamurai","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">\"findArmour\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span>Selector<span class=\"k\">);</span>","\t\t\t","\tsamurai<span class=\"k\">.</span>findArmour<span class=\"k\">(</span>Selector<span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true with pass-through object: Selector\"</span><span class=\"k\">);</span>","\t\t","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"mock with multiple parameters - required total arguments\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","\t","\texpect<span class=\"k\">(</span><span class=\"s\">7</span><span class=\"k\">);</span>","\t","\t<span class=\"k\">function</span> Custom<span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t","\t<span class=\"k\">var</span> ninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tninja","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">\"testMultipleParameters\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">new</span> Date<span class=\"k\">(),</span> <span class=\"s\">/RegExp/</span><span class=\"k\">,</span> Selector<span class=\"k\">,</span> <span class=\"k\">new</span> Custom<span class=\"k\">()</span> <span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>required<span class=\"k\">(</span><span class=\"s\">11</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>overload<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">);</span>"," \t\t\t<span class=\"c\">// Could use same logic for RANGES on call method?</span>","\t\t","\t<span class=\"c\">// Bad Exercise</span>","\t","\t<span class=\"c\">// Test no arguments\t</span>","\t","\tninja<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">();</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfArgumentsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfArgumentsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","\t\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test too few arguments - method underloading\t</span>","\t","\tninja<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span> <span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfArgumentsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfArgumentsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","\t\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test too many arguments - method overloading</span>","\t","\tninja<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">new</span> Date<span class=\"k\">(),</span> <span class=\"s\">/RegExp/</span><span class=\"k\">,</span> Selector<span class=\"k\">,</span> <span class=\"k\">new</span> Custom<span class=\"k\">(),</span> <span class=\"s\">\"string\"</span> <span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfArgumentsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfArgumentsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","\t\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test incorrect arguments - first two switched</span>","\t","\tninja<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">new</span> Date<span class=\"k\">(),</span> <span class=\"s\">/RegExp/</span><span class=\"k\">,</span> Selector<span class=\"k\">,</span> <span class=\"k\">new</span> Custom<span class=\"k\">()</span> <span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 2 errors\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>"," \t<span class=\"k\">}</span>","","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Good Exercise</span>","\t","\tninja<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">new</span> Date<span class=\"k\">(),</span> <span class=\"s\">/RegExp/</span><span class=\"k\">,</span> Selector<span class=\"k\">,</span> <span class=\"k\">new</span> Custom<span class=\"k\">()</span> <span class=\"k\">);</span>","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"w/ JSON: mock with multiple parameters - required total arguments\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","\t","\texpect<span class=\"k\">(</span><span class=\"s\">7</span><span class=\"k\">);</span>","\t","\t<span class=\"k\">function</span> Custom<span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t","\t<span class=\"k\">var</span> ninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t<span class=\"s\">\"testMultipleParameters\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\taccepts<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">new</span> Date<span class=\"k\">(),</span> <span class=\"s\">/RegExp/</span><span class=\"k\">,</span> Selector<span class=\"k\">,</span> <span class=\"k\">new</span> Custom<span class=\"k\">()],</span>","\t\t\tcalls<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span>","\t\t\trequired<span class=\"k\">:</span> <span class=\"s\">11</span><span class=\"k\">,</span>","\t\t\toverload<span class=\"k\">:</span> <span class=\"k\">false</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t","\t<span class=\"c\">// Bad Exercise</span>","\t","\t<span class=\"c\">// Test no arguments\t</span>","\t","\tninja<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">();</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfArgumentsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfArgumentsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","\t\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test too few arguments - method underloading\t</span>","\t","\tninja<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span> <span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfArgumentsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfArgumentsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","\t\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test too many arguments - method overloading</span>","\t","\tninja<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">new</span> Date<span class=\"k\">(),</span> <span class=\"s\">/RegExp/</span><span class=\"k\">,</span> Selector<span class=\"k\">,</span> <span class=\"k\">new</span> Custom<span class=\"k\">(),</span> <span class=\"s\">\"string\"</span> <span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfArgumentsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfArgumentsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","\t\t","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Test incorrect arguments - first two switched</span>","\t","\tninja<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">new</span> Date<span class=\"k\">(),</span> <span class=\"s\">/RegExp/</span><span class=\"k\">,</span> Selector<span class=\"k\">,</span> <span class=\"k\">new</span> Custom<span class=\"k\">()</span> <span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 2 errors\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>"," \t<span class=\"k\">}</span>","","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Good Exercise</span>","\t","\tninja<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">new</span> Date<span class=\"k\">(),</span> <span class=\"s\">/RegExp/</span><span class=\"k\">,</span> Selector<span class=\"k\">,</span> <span class=\"k\">new</span> Custom<span class=\"k\">()</span> <span class=\"k\">);</span>","\tok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","","<span class=\"k\">}</span><span class=\"k\">);</span>","","","test<span class=\"k\">(</span><span class=\"s\">\"mock with multiple parameters - all optional arguments\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","\t","\texpect<span class=\"k\">(</span><span class=\"s\">15</span><span class=\"k\">);</span>","\t","\t<span class=\"k\">function</span> Custom<span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t","\t<span class=\"k\">var</span> samurai <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tsamurai","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">\"testMultipleParameters\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">new</span> Date<span class=\"k\">(),</span> <span class=\"s\">/RegExp/</span><span class=\"k\">,</span> Selector<span class=\"k\">,</span> <span class=\"k\">new</span> Custom<span class=\"k\">()</span> <span class=\"k\">)</span>","\t","\t<span class=\"c\">// Bad Exercises</span>","\t","\t<span class=\"c\">// Single incorrect argument</span>","","\tsamurai<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        samurai<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>"," \t<span class=\"k\">}</span>","\t","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Some arguments - first two switched around to be incorrect</span>","\t","\tsamurai<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        samurai<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 2 errors\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>"," \t<span class=\"k\">}</span>","\t","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// All arguments - last two switched around to be incorrect</span>","\t","\tsamurai<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">new</span> Date<span class=\"k\">(),</span> <span class=\"s\">/RegExp/</span><span class=\"k\">,</span> Selector<span class=\"k\">,</span> <span class=\"k\">new</span> Custom<span class=\"k\">()</span> <span class=\"k\">)</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        samurai<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 2 errors\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>"," \t<span class=\"k\">}</span>\t","","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Too many arguments - method overloading - first two switched to be incorrect - overloaded arguments should be ignored</span>","\t","\tsamurai<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">new</span> Date<span class=\"k\">(),</span> <span class=\"s\">/RegExp/</span><span class=\"k\">,</span> Selector<span class=\"k\">,</span> <span class=\"k\">new</span> Custom<span class=\"k\">(),</span> <span class=\"k\">null</span> <span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        samurai<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 2 errors\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>"," \t<span class=\"k\">}</span>","","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Good Exercises</span>","\t","\t<span class=\"c\">// No Arguments</span>","\tsamurai<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">();</span>","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\t","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Some Arguments</span>","\tsamurai<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\t","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// All Arguments - test false positive</span>","\t","\tsamurai<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">new</span> Date<span class=\"k\">(),</span> <span class=\"s\">/RegExp/</span><span class=\"k\">,</span> Selector<span class=\"k\">,</span> <span class=\"k\">new</span> Custom<span class=\"k\">()</span> <span class=\"k\">);</span>","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\t","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Overloaded method call</span>","\tsamurai<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">new</span> Date<span class=\"k\">(),</span> <span class=\"s\">/RegExp/</span><span class=\"k\">,</span> Selector<span class=\"k\">,</span> <span class=\"k\">new</span> Custom<span class=\"k\">(),</span> <span class=\"k\">null</span> <span class=\"k\">);</span>","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\t","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"w/ JSON: mock with multiple parameters - all optional arguments\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","\t","\texpect<span class=\"k\">(</span><span class=\"s\">15</span><span class=\"k\">);</span>","\t","\t<span class=\"k\">function</span> Custom<span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t","\t<span class=\"k\">var</span> samurai <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t<span class=\"s\">\"testMultipleParameters\"</span><span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\taccepts<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">new</span> Date<span class=\"k\">(),</span> <span class=\"s\">/RegExp/</span><span class=\"k\">,</span> Selector<span class=\"k\">,</span> <span class=\"k\">new</span> Custom<span class=\"k\">()],</span>","\t\t\tcalls<span class=\"k\">:</span> <span class=\"s\">1</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Bad Exercises</span>","\t","\t<span class=\"c\">// Single incorrect argument</span>","","\tsamurai<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        samurai<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>"," \t<span class=\"k\">}</span>","\t","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Some arguments - first two switched around to be incorrect</span>","\t","\tsamurai<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        samurai<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 2 errors\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>"," \t<span class=\"k\">}</span>","\t","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// All arguments - last two switched around to be incorrect</span>","\t","\tsamurai<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">new</span> Date<span class=\"k\">(),</span> <span class=\"s\">/RegExp/</span><span class=\"k\">,</span> Selector<span class=\"k\">,</span> <span class=\"k\">new</span> Custom<span class=\"k\">()</span> <span class=\"k\">)</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        samurai<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 2 errors\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>"," \t<span class=\"k\">}</span>\t","","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Too many arguments - method overloading - first two switched to be incorrect - overloaded arguments should be ignored</span>","\t","\tsamurai<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">new</span> Date<span class=\"k\">(),</span> <span class=\"s\">/RegExp/</span><span class=\"k\">,</span> Selector<span class=\"k\">,</span> <span class=\"k\">new</span> Custom<span class=\"k\">(),</span> <span class=\"k\">null</span> <span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        samurai<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 2 errors\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>"," \t<span class=\"k\">}</span>","","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Good Exercises</span>","\t","\t<span class=\"c\">// No Arguments</span>","\tsamurai<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">();</span>","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\t","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Some Arguments</span>","\tsamurai<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\t","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// All Arguments - test false positive</span>","\t","\tsamurai<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">new</span> Date<span class=\"k\">(),</span> <span class=\"s\">/RegExp/</span><span class=\"k\">,</span> Selector<span class=\"k\">,</span> <span class=\"k\">new</span> Custom<span class=\"k\">()</span> <span class=\"k\">);</span>","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\t","\tsamurai<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Overloaded method call</span>","\tsamurai<span class=\"k\">.</span>testMultipleParameters<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">new</span> Date<span class=\"k\">(),</span> <span class=\"s\">/RegExp/</span><span class=\"k\">,</span> Selector<span class=\"k\">,</span> <span class=\"k\">new</span> Custom<span class=\"k\">(),</span> <span class=\"k\">null</span> <span class=\"k\">);</span>","\tok<span class=\"k\">(</span>samurai<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","\t","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"mock with single / multiple parameters and matched return values\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","","\texpect<span class=\"k\">(</span><span class=\"s\">13</span><span class=\"k\">);</span>","\t","\t<span class=\"k\">var</span> ninja <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tninja","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">\"swing\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span>","\t\t\t\t<span class=\"k\">{</span>params<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"hard\"</span><span class=\"k\">],</span> returns<span class=\"k\">:</span> <span class=\"s\">\"hit\"</span><span class=\"k\">}</span> <span class=\"c\">// presentation</span>","\t\t\t<span class=\"k\">);</span>","\t\t\t","\t<span class=\"c\">// Bad Exercises</span>","\t","\t<span class=\"c\">// Wrong Argument Type</span>","\t","\tninja<span class=\"k\">.</span>swing<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        ninja<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 errors\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentTypeException\"</span><span class=\"k\">);</span>"," \t<span class=\"k\">}</span>","","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","\t<span class=\"c\">// Good Exercises</span>","\t","\t<span class=\"c\">// No argument type - should just return 'global' / default undefined</span>","\t","\tequals<span class=\"k\">(</span> ninja<span class=\"k\">.</span>swing<span class=\"k\">()</span> <span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"s\">\"ninja.swing() should return 'undefined' when called without parameters\"</span><span class=\"k\">);</span>","    ok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Argument of right type but wrong value</span>","\tequals<span class=\"k\">(</span> ninja<span class=\"k\">.</span>swing<span class=\"k\">(</span><span class=\"s\">\"soft\"</span><span class=\"k\">)</span> <span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"s\">\"ninja.swing() should return 'undefined' when called with argument of right type but non-predefined value\"</span><span class=\"k\">);</span>","    ok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Argument of right type and matching value</span>","\tequals<span class=\"k\">(</span> ninja<span class=\"k\">.</span>swing<span class=\"k\">(</span><span class=\"s\">\"hard\"</span><span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"s\">\"hit\"</span><span class=\"k\">,</span> <span class=\"s\">\"ninja.swing() should return 'hit' when called with 'hard'\"</span><span class=\"k\">);</span>","    ok<span class=\"k\">(</span>ninja<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","","\tninja<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// TETSTSTSTSTSTSS!</span>","\t","\t<span class=\"c\">// Juice Tests</span>","\t","\t<span class=\"c\">// mock the file interface\t\t\t</span>","\t<span class=\"k\">var</span> fileMock <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t<span class=\"s\">\"readWhole\"</span> <span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\treturns <span class=\"k\">:</span> <span class=\"s\">'Foo bar baz'</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// mock there being no .tt or .haml template, but there being a .tash template</span>","\t<span class=\"k\">var</span> fs <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">(</span><span class=\"k\">{</span>","\t\tisFile <span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\taccepts<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"k\">{</span>","\t\t\t\tparams<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'templates/index.tt'</span><span class=\"k\">],</span>","\t\t\t\treturns<span class=\"k\">:</span> <span class=\"k\">false</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>","\t\t\t\tparams<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'templates/index.haml'</span><span class=\"k\">],</span>","\t\t\t\treturns<span class=\"k\">:</span> <span class=\"k\">false</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>","\t\t\t\tparams<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'templates/index.tash'</span><span class=\"k\">],</span>","\t\t\t\treturns<span class=\"k\">:</span> <span class=\"k\">true</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">],</span>","\t\t\tcalls<span class=\"k\">:</span> <span class=\"s\">3</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\trawOpen <span class=\"k\">:</span> <span class=\"k\">{</span>","\t\t\taccepts<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">'templates/index.tash'</span><span class=\"k\">],</span>","\t\t\treturns<span class=\"k\">:</span> fileMock<span class=\"k\">,</span>","\t\t\tcalls<span class=\"k\">:</span> <span class=\"s\">1</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\tequals<span class=\"k\">(</span> fs<span class=\"k\">.</span>isFile<span class=\"k\">(</span><span class=\"s\">'templates/index.tt'</span><span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"fs.isFile('templates/index.tt') should return 'false'\"</span><span class=\"k\">);</span>","\tequals<span class=\"k\">(</span> fs<span class=\"k\">.</span>isFile<span class=\"k\">(</span><span class=\"s\">'templates/index.haml'</span><span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"fs.isFile('templates/index.haml') should return 'false'\"</span><span class=\"k\">);</span>","\tequals<span class=\"k\">(</span> fs<span class=\"k\">.</span>isFile<span class=\"k\">(</span><span class=\"s\">'templates/index.tash'</span><span class=\"k\">)</span> <span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"s\">\"fs.isFile('templates/index.tash') should return 'true'\"</span><span class=\"k\">);</span>","\tequals<span class=\"k\">(</span> fs<span class=\"k\">.</span>rawOpen<span class=\"k\">(</span><span class=\"s\">'templates/index.tt'</span><span class=\"k\">).</span>readWhole<span class=\"k\">()</span> <span class=\"k\">,</span> <span class=\"s\">'Foo bar baz'</span> <span class=\"k\">,</span> <span class=\"s\">\"fs.rawOpen('templates/index.tt') should return 'fileMock'\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>fs<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"mock with constructor function parameters - i.e. jQuery\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    ","\texpect<span class=\"k\">(</span><span class=\"s\">8</span><span class=\"k\">);</span>","    ","\t<span class=\"c\">// Mock jQuery</span>","    <span class=\"k\">var</span> $ <span class=\"k\">=</span> <span class=\"k\">new</span> Mock <span class=\"k\">();</span>","\t","\t$<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"s\">\"#id\"</span><span class=\"k\">)</span>","       <span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'html'</span><span class=\"k\">)</span>","            <span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"s\">'&lt;span&gt;blah&lt;/span&gt;'</span><span class=\"k\">);</span>","","\t<span class=\"c\">// Bad Exercise</span>","\t","\t<span class=\"c\">// Test invalid parameter type</span>","\t","    $<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">).</span>html<span class=\"k\">(</span><span class=\"s\">'&lt;span&gt;blah&lt;/span&gt;'</span><span class=\"k\">);</span>","    ","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        $<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>\t","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error: test invalid parameter type\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"InvalidConstructorException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be InvalidConstructorException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    $<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","\t<span class=\"c\">// Test valid parameter type but wrong value</span>","    ","    $<span class=\"k\">(</span><span class=\"s\">\"#customid\"</span><span class=\"k\">).</span>html<span class=\"k\">(</span><span class=\"s\">'&lt;span&gt;blah&lt;/span&gt;'</span><span class=\"k\">);</span>","    ok<span class=\"k\">(</span>$<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","    ","\t<span class=\"c\">// Trigger strict argument checking</span>","\t","\t$ <span class=\"k\">=</span> <span class=\"k\">new</span> Mock <span class=\"k\">();</span>","\t","\t$<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"s\">\"#id\"</span><span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>strict<span class=\"k\">()</span>","    \t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'html'</span><span class=\"k\">)</span>","            <span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"s\">'&lt;span&gt;blah&lt;/span&gt;'</span><span class=\"k\">);</span>","\t","","\t<span class=\"c\">// Test valid parameter type but wrong value - same as before but in strict mode</span>","\t","\t$<span class=\"k\">(</span><span class=\"s\">\"#customid\"</span><span class=\"k\">).</span>html<span class=\"k\">(</span><span class=\"s\">'&lt;span&gt;blah&lt;/span&gt;'</span><span class=\"k\">);</span>","\t<span class=\"k\">try</span> <span class=\"k\">{</span>","        $<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentValueException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentValueException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","","\t$<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","\t<span class=\"c\">// Test valid parameter type and value, but invalid argument type to method</span>","","    $<span class=\"k\">(</span><span class=\"s\">\"#id\"</span><span class=\"k\">).</span>html<span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">);</span>","    ","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        $<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentValueException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","\t","    <span class=\"c\">// Good Exercise</span>","","    $<span class=\"k\">(</span><span class=\"s\">\"#id\"</span><span class=\"k\">).</span>html<span class=\"k\">(</span><span class=\"s\">'&lt;span&gt;blah&lt;/span&gt;'</span><span class=\"k\">);</span>","","\t<span class=\"c\">// Mock the query of the J</span>","\t","\t<span class=\"k\">var</span> jQuery <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tjQuery","\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"s\">\".ninjas\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'each'</span><span class=\"k\">)</span>","\t\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span>Function<span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">3</span><span class=\"k\">)</span>","\t\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'wrap'</span><span class=\"k\">)</span>","\t\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"s\">'&lt;div /&gt;'</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">()</span>","\t\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">'browser'</span><span class=\"k\">)</span>","\t\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\t\t\tie<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\t\t\tmozilla<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\t\t\tsafari<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\t\t\topera<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\t\t\tchrome<span class=\"k\">:</span> <span class=\"k\">true</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Exercise</span>","\t","\tjQuery<span class=\"k\">(</span><span class=\"s\">\".ninjas\"</span><span class=\"k\">).</span>each<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> jQuery<span class=\"k\">.</span>browser<span class=\"k\">.</span>chrome <span class=\"k\">===</span> <span class=\"k\">true</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tjQuery<span class=\"k\">.</span>wrap<span class=\"k\">(</span><span class=\"s\">'&lt;div /&gt;'</span><span class=\"k\">);</span>","\t\t\tjQuery<span class=\"k\">.</span>wrap<span class=\"k\">(</span><span class=\"s\">'&lt;div /&gt;'</span><span class=\"k\">);</span>","\t\t\tjQuery<span class=\"k\">.</span>wrap<span class=\"k\">(</span><span class=\"s\">'&lt;div /&gt;'</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Verify</span>","\t","\tok<span class=\"k\">(</span>jQuery<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true: jQuery is mocked :-)\"</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"chaining\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    ","\texpect<span class=\"k\">(</span><span class=\"s\">14</span><span class=\"k\">);</span>","    <span class=\"k\">var</span> $ <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","    $<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"s\">\".ninja\"</span><span class=\"k\">)</span>","        <span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'run'</span><span class=\"k\">)</span>","            <span class=\"k\">.</span>accepts<span class=\"k\">(</span>Variable<span class=\"k\">)</span>","            <span class=\"k\">.</span>andChain<span class=\"k\">()</span>","        <span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'fight'</span><span class=\"k\">)</span>","            <span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"s\">'hard'</span><span class=\"k\">)</span>","            <span class=\"k\">.</span>andChain<span class=\"k\">();</span>","","    <span class=\"c\">// Invalid constructor param</span>","    ","    $<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        $<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">3</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 3 errors\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"InvalidConstructorException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be InvalidConstructorException\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    $<span class=\"k\">.</span>reset<span class=\"k\">();</span>","    ","    <span class=\"c\">// No constructor param</span>","    $<span class=\"k\">().</span>run<span class=\"k\">(</span><span class=\"s\">'slow'</span><span class=\"k\">).</span>fight<span class=\"k\">(</span><span class=\"s\">'hard'</span><span class=\"k\">).</span>run<span class=\"k\">(</span><span class=\"s\">'again'</span><span class=\"k\">);</span>","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        $<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 2 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"InvalidConstructorException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be InvalidConstructorException\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfArgumentsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfArgumentsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    $<span class=\"k\">.</span>reset<span class=\"k\">();</span>","    ","    <span class=\"c\">// Missed call to fight</span>","    ","    $<span class=\"k\">(</span><span class=\"s\">\".ninja\"</span><span class=\"k\">).</span>run<span class=\"k\">(</span><span class=\"s\">'at a canter'</span><span class=\"k\">);</span>","     ","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        $<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 2 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    $<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","\t<span class=\"c\">// Good Exercises</span>","","\t<span class=\"c\">// Overloaded constructor param with incorrect parameter values</span>","    ","    $<span class=\"k\">(</span><span class=\"s\">'.samauri'</span><span class=\"k\">).</span>run<span class=\"k\">(</span><span class=\"s\">'slow'</span><span class=\"k\">).</span>fight<span class=\"k\">(</span><span class=\"s\">'hard'</span><span class=\"k\">).</span>run<span class=\"k\">(</span><span class=\"s\">'again'</span><span class=\"k\">);</span>","     ","\tok<span class=\"k\">(</span>$<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","    ","    $<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Flag strict argument value checking</span>","\t$<span class=\"k\">.</span>strict<span class=\"k\">();</span>","\t","\t<span class=\"c\">// Bad Exercise - invalid parameter value</span>","\t","\t$<span class=\"k\">(</span><span class=\"s\">'.samauri'</span><span class=\"k\">).</span>run<span class=\"k\">(</span><span class=\"s\">'slow'</span><span class=\"k\">).</span>fight<span class=\"k\">(</span><span class=\"s\">'hard'</span><span class=\"k\">).</span>run<span class=\"k\">(</span><span class=\"s\">'again'</span><span class=\"k\">);</span>","\t","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        $<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span> <span class=\"c\">/* should be 2*/</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 2 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectArgumentValueException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectArgumentValueException\"</span><span class=\"k\">);</span>","        <span class=\"c\">// equals(e[1].type, \"IncorrectArgumentTypeException\", \"verify() error type should be IncorrectArgumentTypeException\");</span>","    <span class=\"k\">}</span>","","\t$<span class=\"k\">.</span>reset<span class=\"k\">();</span>","","    <span class=\"c\">// Constuctor invocation with correct parameter type and exact value</span>","","    $<span class=\"k\">(</span><span class=\"s\">\".ninja\"</span><span class=\"k\">).</span>run<span class=\"k\">(</span><span class=\"s\">'slow'</span><span class=\"k\">).</span>fight<span class=\"k\">(</span><span class=\"s\">'hard'</span><span class=\"k\">).</span>run<span class=\"k\">(</span><span class=\"s\">'again'</span><span class=\"k\">);</span>","","    ok<span class=\"k\">(</span>$<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true\"</span><span class=\"k\">);</span>","","\t<span class=\"c\">// Mock jQuery with chaining</span>","\t","\t<span class=\"k\">var</span> jQuery <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\tjQuery","\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"s\">\".ninjas\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">)</span>","\t\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'each'</span><span class=\"k\">)</span>","\t\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">)</span>","\t\t\t\t<span class=\"k\">.</span>andChain<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">3</span><span class=\"k\">)</span>","\t\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">'wrap'</span><span class=\"k\">)</span>","\t\t\t\t<span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"s\">'&lt;div /&gt;'</span><span class=\"k\">)</span>","\t\t\t\t<span class=\"k\">.</span>andChain<span class=\"k\">()</span>","\t\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">()</span>","\t\t\t\t<span class=\"k\">.</span>property<span class=\"k\">(</span><span class=\"s\">'browser'</span><span class=\"k\">)</span>","\t\t\t\t<span class=\"k\">.</span>withValue<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\t\t\tie<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\t\t\tmozilla<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\t\t\tsafari<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\t\t\topera<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\t\t\tchrome<span class=\"k\">:</span> <span class=\"k\">true</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Exercise</span>","\t","\tjQuery<span class=\"k\">(</span><span class=\"s\">\".ninjas\"</span><span class=\"k\">).</span>each<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> jQuery<span class=\"k\">.</span>browser<span class=\"k\">.</span>chrome <span class=\"k\">===</span> <span class=\"k\">true</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tjQuery<span class=\"k\">.</span>wrap<span class=\"k\">(</span><span class=\"s\">'&lt;div /&gt;'</span><span class=\"k\">).</span>wrap<span class=\"k\">(</span><span class=\"s\">'&lt;div /&gt;'</span><span class=\"k\">).</span>wrap<span class=\"k\">(</span><span class=\"s\">'&lt;div /&gt;'</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">).</span>each<span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">//do stuff..</span>","\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Verify</span>","\t","\tok<span class=\"k\">(</span>jQuery<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true: jQuery is mocked with chaining\"</span><span class=\"k\">);</span>","","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"callbacks\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    ","\texpect<span class=\"k\">(</span><span class=\"s\">3</span><span class=\"k\">);</span>","    ","\t<span class=\"k\">var</span> $ <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","    ","    <span class=\"c\">// Invalid callback</span>","    ","    $<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">).</span>method<span class=\"k\">(</span><span class=\"s\">'get'</span><span class=\"k\">)</span>","        <span class=\"k\">.</span>accepts<span class=\"k\">(</span><span class=\"s\">'some/url'</span><span class=\"k\">,</span> Function<span class=\"k\">)</span>","\t\t<span class=\"k\">.</span>required<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">)</span>","        <span class=\"k\">.</span>callFunctionWith<span class=\"k\">(</span><span class=\"s\">'data response'</span><span class=\"k\">);</span>","","    <span class=\"k\">var</span> called <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","    $<span class=\"k\">.</span>get<span class=\"k\">(</span><span class=\"s\">'some/url'</span><span class=\"k\">);</span>","","    <span class=\"k\">try</span> <span class=\"k\">{</span>","        $<span class=\"k\">.</span>verify<span class=\"k\">();</span>","        fail<span class=\"k\">(</span><span class=\"s\">\"verify() should throw exception\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">.</span>length<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">\"verify() should return an array of 1 error\"</span><span class=\"k\">);</span>","        equals<span class=\"k\">(</span>e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type<span class=\"k\">,</span> <span class=\"s\">\"IncorrectNumberOfArgumentsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"verify() error type should be IncorrectNumberOfArgumentsException\"</span><span class=\"k\">);</span>","    <span class=\"k\">}</span>","    ","    $<span class=\"k\">.</span>reset<span class=\"k\">();</span>","    ","    <span class=\"c\">// Correct Usage</span>","","    <span class=\"k\">var</span> called <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>    ","","    $<span class=\"k\">.</span>get<span class=\"k\">(</span><span class=\"s\">'some/url'</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">(</span>data<span class=\"k\">)</span> <span class=\"k\">{</span> called <span class=\"k\">=</span> <span class=\"k\">true</span> <span class=\"k\">}</span><span class=\"k\">);</span>","    ","\tequals<span class=\"k\">(</span>called<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"s\">\"called should be set to true\"</span><span class=\"k\">);</span>","","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"QMock version 0.1 Constructor and mockedMember object API backward compatibility\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","","\texpect<span class=\"k\">(</span><span class=\"s\">2</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Setup - Test support for expectsArguments on mock Constructors</span>","\t<span class=\"k\">var</span> $ <span class=\"k\">=</span> <span class=\"k\">new</span> Mock <span class=\"k\">();</span>","\t$<span class=\"k\">.</span>expectsArguments<span class=\"k\">(</span><span class=\"s\">\"className\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Good Exercise</span>","\t$<span class=\"k\">(</span><span class=\"s\">'.myClassName'</span><span class=\"k\">);</span>","\t","\tok<span class=\"k\">(</span>$<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true: mock supports 'expectsArguments' on mock constructors\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Setup - Test support for withArguments method on mocked methods</span>","\t","\t<span class=\"k\">var</span> mock <span class=\"k\">=</span> <span class=\"k\">new</span> Mock <span class=\"k\">();</span>","\tmock","\t\t<span class=\"k\">.</span>expects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">\"swing\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withArguments<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>andChain<span class=\"k\">()</span>","\t\t<span class=\"k\">.</span>andExpects<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>method<span class=\"k\">(</span><span class=\"s\">\"run\"</span><span class=\"k\">)</span>","\t\t\t<span class=\"k\">.</span>withArguments<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">);</span>","\t\t\t\t\t\t","\t<span class=\"c\">// Good exercise</span>","\tmock<span class=\"k\">.</span>swing<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">).</span>run<span class=\"k\">(</span><span class=\"s\">\"string\"</span><span class=\"k\">);</span>","\t<span class=\"c\">// Verify</span>","\tok<span class=\"k\">(</span>mock<span class=\"k\">.</span>verify<span class=\"k\">(),</span> <span class=\"s\">\"verify() should be true: mock supports 'withArguments' setup method on mocked members\"</span><span class=\"k\">);</span>","\t\t\t\t","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"private Mock._assertArray method\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t","\texpect<span class=\"k\">(</span><span class=\"s\">54</span><span class=\"k\">);</span>","\t","\t<span class=\"k\">var</span> mock <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\t<span class=\"k\">function</span> Custom<span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t","\t<span class=\"c\">// Bad Arguments</span>","\t","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> <span class=\"s\">2</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be false\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Check element type - simple</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"s\">0</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be true (matching numbers 0)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"s\">10</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"s\">10</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be true (matching numbers)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"s\">10</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be true (non-matching numbers)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"s\">\"\"</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"s\">\"\"</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be true (falsy matching empty strings)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"s\">\"string\"</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"s\">\"string\"</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be true (matching strings)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"s\">\"\"</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"s\">\"different string\"</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be true ([</span><span class=\"t\">\\\"\\\"</span><span class=\"s\">], [</span><span class=\"t\">\\\"</span><span class=\"s\">different string</span><span class=\"t\">\\\"</span><span class=\"s\">])\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">false</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">false</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be true (matching false Booleans)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">true</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">false</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be true (matching true Booleans)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">false</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">true</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be true (mismatched Booleans)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">true</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">true</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be true (mismatched Booleans)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([[]],</span> <span class=\"k\">[[]]),</span> <span class=\"s\">\"Mock._assertArray should be true (empty array)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">{}</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">{}</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be true (empty object)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">{</span>test<span class=\"k\">:</span> <span class=\"s\">\"string\"</span><span class=\"k\">}</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">{</span>test<span class=\"k\">:</span> <span class=\"s\">\"string\"</span><span class=\"k\">}</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be true (object)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">{</span>test<span class=\"k\">:</span> <span class=\"s\">\"string\"</span><span class=\"k\">}</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">{</span>test<span class=\"k\">:</span> <span class=\"s\">\"different string\"</span><span class=\"k\">}</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be true (object)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([[</span><span class=\"s\">\"nested\"</span><span class=\"k\">]],</span> <span class=\"k\">[[</span><span class=\"s\">\"nested\"</span><span class=\"k\">]]),</span> <span class=\"s\">\"Mock._assertArray should be true (nested arrays)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be true (function)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">null</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">null</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be true (null)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span>undefined<span class=\"k\">],</span> <span class=\"k\">[</span>undefined<span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be true (undefined)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"s\">/re/</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"s\">/re/</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be true (RegExp)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">new</span> Date<span class=\"k\">()],</span> <span class=\"k\">[</span><span class=\"k\">new</span> Date<span class=\"k\">()]),</span> <span class=\"s\">\"Mock._assertArray should be true (Date)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">new</span> Date<span class=\"k\">()],</span> <span class=\"k\">[</span><span class=\"k\">new</span> Date<span class=\"k\">(</span><span class=\"s\">1970</span><span class=\"k\">)]),</span> <span class=\"s\">\"Mock._assertArray should be false: [new Date()], [new Date(1970)]\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">new</span> Custom<span class=\"k\">()],</span> <span class=\"k\">[</span><span class=\"k\">new</span> Custom<span class=\"k\">()]),</span> <span class=\"s\">\"Mock._assertArray should be true (Custom object)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"s\">0</span><span class=\"k\">,</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"s\">/re/</span><span class=\"k\">,</span> <span class=\"k\">new</span> Date<span class=\"k\">()],</span> <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">,</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"s\">/re/</span><span class=\"k\">,</span> <span class=\"k\">new</span> Date<span class=\"k\">()]),</span> <span class=\"s\">\"Mock._assertArray should be true (All types)\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Falsy </span>","","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"s\">10</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"s\">\"\"</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be false: [10], [</span><span class=\"t\">\\\"\\\"</span><span class=\"s\">]\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"s\">\"\"</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"s\">10</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be false: [</span><span class=\"t\">\\\"\\\"</span><span class=\"s\">], [10]\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">{</span>test<span class=\"k\">:</span> <span class=\"s\">\"one\"</span><span class=\"k\">}</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">{</span>test<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">}</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be false: [{test: </span><span class=\"t\">\\\"</span><span class=\"s\">one</span><span class=\"t\">\\\"</span><span class=\"s\">}], [{test: 1}]\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">],</span> <span class=\"k\">[]),</span> <span class=\"s\">\"Mock._assertArray should be false: [function() {}], []\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">null</span><span class=\"k\">],</span> <span class=\"k\">[</span>undefined<span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be false: [null], [undefined]\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span>undefined<span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"s\">\"string\"</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be false: [undefined], [</span><span class=\"t\">\\\"</span><span class=\"s\">string</span><span class=\"t\">\\\"</span><span class=\"s\">]\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"s\">/re/</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"s\">9</span><span class=\"k\">]),</span> <span class=\"s\">\"Mock._assertArray should be false: [/re/], [9]\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">new</span> Custom<span class=\"k\">()],</span> <span class=\"k\">[</span><span class=\"k\">new</span> Number<span class=\"k\">()]),</span> <span class=\"s\">\"Mock._assertArray should be false: [new Custom()], [new Number()]\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Nested</span>","\t","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([[[[</span><span class=\"s\">\"test\"</span><span class=\"k\">]]]],</span> <span class=\"k\">[[[[</span><span class=\"s\">\"test\"</span><span class=\"k\">]]]]),</span> <span class=\"s\">\"Mock._assertArray should be true (nested array to 4 levels)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"s\">\"one\"</span><span class=\"k\">,</span> <span class=\"k\">[</span><span class=\"s\">\"two\"</span><span class=\"k\">,</span> <span class=\"k\">[</span><span class=\"s\">\"three\"</span><span class=\"k\">,</span> <span class=\"k\">[</span><span class=\"s\">\"four\"</span><span class=\"k\">]]]],</span> <span class=\"k\">[</span><span class=\"s\">\"one\"</span><span class=\"k\">,</span> <span class=\"k\">[</span><span class=\"s\">\"two\"</span><span class=\"k\">,</span> <span class=\"k\">[</span><span class=\"s\">\"three\"</span><span class=\"k\">,</span> <span class=\"k\">[</span><span class=\"s\">\"four\"</span><span class=\"k\">]]]]),</span> <span class=\"s\">\"Mock._assertArray should be true (nested array to 4 levels)\"</span><span class=\"k\">);</span>\t","\t","\t<span class=\"c\">// Test strict value checking</span>","","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"s\">0</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be true (matching numbers 0)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"s\">10</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be false (non-matching numbers)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"s\">\"\"</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"s\">\"\"</span><span class=\"k\">],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be true (falsy matching empty strings)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"s\">\"\"</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"s\">\"different string\"</span><span class=\"k\">],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be false ([</span><span class=\"t\">\\\"\\\"</span><span class=\"s\">], [</span><span class=\"t\">\\\"</span><span class=\"s\">different string</span><span class=\"t\">\\\"</span><span class=\"s\">])\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">false</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">false</span><span class=\"k\">],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be true (matching false Booleans)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">true</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">false</span><span class=\"k\">],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be false (mismatched Booleans)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">false</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">true</span><span class=\"k\">],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be true (mismatched Booleans)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">true</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">true</span><span class=\"k\">],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be true (mismatched Booleans)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([[]],</span> <span class=\"k\">[[]],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be true (empty array)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">{}</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">{}</span><span class=\"k\">],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be true (empty object)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">{</span>test<span class=\"k\">:</span> <span class=\"s\">\"string\"</span><span class=\"k\">}</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">{</span>test<span class=\"k\">:</span> <span class=\"s\">\"string\"</span><span class=\"k\">}</span><span class=\"k\">],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be true (object)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">{</span>test<span class=\"k\">:</span> <span class=\"s\">\"string\"</span><span class=\"k\">}</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">{</span>test<span class=\"k\">:</span> <span class=\"s\">\"different string\"</span><span class=\"k\">}</span><span class=\"k\">],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be false (object)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([[</span><span class=\"s\">\"nested\"</span><span class=\"k\">]],</span> <span class=\"k\">[[</span><span class=\"s\">\"nested\"</span><span class=\"k\">]],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be true (nested arrays)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be true (function)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">null</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"k\">null</span><span class=\"k\">],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be true (null)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span>undefined<span class=\"k\">],</span> <span class=\"k\">[</span>undefined<span class=\"k\">],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be true (undefined)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"s\">/re/</span><span class=\"k\">],</span> <span class=\"k\">[</span><span class=\"s\">/re/</span><span class=\"k\">],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be true (RegExp)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">new</span> Date<span class=\"k\">()],</span> <span class=\"k\">[</span><span class=\"k\">new</span> Custom<span class=\"k\">()],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be false (Date)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"k\">new</span> Custom<span class=\"k\">()],</span> <span class=\"k\">[</span><span class=\"k\">new</span> Date<span class=\"k\">()],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be true (Custom object)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">([</span><span class=\"s\">0</span><span class=\"k\">,</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"s\">/re/</span><span class=\"k\">,</span> <span class=\"k\">new</span> Date<span class=\"k\">()],</span> <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">,</span><span class=\"s\">\"string\"</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">[],</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> undefined<span class=\"k\">,</span> <span class=\"s\">/re/</span><span class=\"k\">,</span> <span class=\"k\">new</span> Date<span class=\"k\">()],</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertArray should be true (All types)\"</span><span class=\"k\">);</span>","\t","<span class=\"k\">}</span><span class=\"k\">);</span>","","test<span class=\"k\">(</span><span class=\"s\">\"private Mock._assertObject method\"</span><span class=\"k\">,</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t","\texpect<span class=\"k\">(</span><span class=\"s\">46</span><span class=\"k\">)</span>","\t","\t<span class=\"k\">var</span> mock <span class=\"k\">=</span> <span class=\"k\">new</span> Mock<span class=\"k\">();</span>","\t","\t<span class=\"k\">function</span> Custom<span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t","\t<span class=\"c\">// Check bad arguments</span>","\t","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span>undefined<span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Check element type - simple</span>","\t","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Number<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Number<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (number)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Number<span class=\"k\">:</span> <span class=\"s\">10</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Number<span class=\"k\">:</span> <span class=\"s\">10</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (number)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>String<span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>String<span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (empty string)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>String<span class=\"k\">:</span> <span class=\"s\">\"string\"</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>String<span class=\"k\">:</span> <span class=\"s\">\"string\"</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (string)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Boolean<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Boolean<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (false Boolean)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Boolean<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Boolean<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (true Boolean)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Array<span class=\"k\">:</span> <span class=\"k\">[]</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Array<span class=\"k\">:</span> <span class=\"k\">[]</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (empty array)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Object<span class=\"k\">:</span> <span class=\"k\">{}}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Object<span class=\"k\">:</span> <span class=\"k\">{}}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (empty object)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Object<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"one\"</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>Object<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"one\"</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (object)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Object<span class=\"k\">:</span> <span class=\"k\">{</span>test<span class=\"k\">:</span> <span class=\"s\">\"one\"</span><span class=\"k\">}}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Object<span class=\"k\">:</span> <span class=\"k\">{</span>test<span class=\"k\">:</span> <span class=\"s\">\"one\"</span><span class=\"k\">}}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (nested arrays)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Function<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Function<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (function)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span><span class=\"s\">\"null\"</span><span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">\"null\"</span><span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (null)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span><span class=\"s\">\"undefined\"</span><span class=\"k\">:</span> undefined<span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">\"undefined\"</span><span class=\"k\">:</span> undefined<span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (undefined)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>RegExp<span class=\"k\">:</span> <span class=\"s\">/re/</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>RegExp<span class=\"k\">:</span> <span class=\"s\">/re/</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (RegExp)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Date<span class=\"k\">:</span> <span class=\"k\">new</span> Date<span class=\"k\">()</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>Date<span class=\"k\">:</span> <span class=\"k\">new</span> Date<span class=\"k\">()</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (Date)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Date<span class=\"k\">:</span> <span class=\"k\">new</span> Date<span class=\"k\">()</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>Date<span class=\"k\">:</span> <span class=\"k\">new</span> Date<span class=\"k\">(</span><span class=\"s\">1970</span><span class=\"k\">)</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Custom<span class=\"k\">:</span> <span class=\"k\">new</span> Custom<span class=\"k\">()</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>Custom<span class=\"k\">:</span> <span class=\"k\">new</span> Custom<span class=\"k\">()</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (Custom object)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Number<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>String<span class=\"k\">:</span> <span class=\"s\">\"string\"</span><span class=\"k\">,</span>Boolean<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>Array<span class=\"k\">:</span> <span class=\"k\">[],</span>Object<span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">,</span>Function<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span><span class=\"s\">\"null\"</span><span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span><span class=\"s\">\"undefined\"</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span>RegExp<span class=\"k\">:</span> <span class=\"s\">/re/</span><span class=\"k\">,</span>Date<span class=\"k\">:</span> <span class=\"k\">new</span> Date<span class=\"k\">()</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Number<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>String<span class=\"k\">:</span> <span class=\"s\">\"string\"</span><span class=\"k\">,</span>Boolean<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>Array<span class=\"k\">:</span> <span class=\"k\">[],</span>Object<span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">,</span>Function<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span><span class=\"s\">\"null\"</span><span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span><span class=\"s\">\"undefined\"</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span>RegExp<span class=\"k\">:</span> <span class=\"s\">/re/</span><span class=\"k\">,</span>Date<span class=\"k\">:</span> <span class=\"k\">new</span> Date<span class=\"k\">()</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (Many native types)\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Falsy </span>","","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Number<span class=\"k\">:</span> <span class=\"s\">10</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Number<span class=\"k\">:</span> <span class=\"s\">\"string\"</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>String<span class=\"k\">:</span> <span class=\"s\">\"string\"</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>String<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Array<span class=\"k\">:</span> <span class=\"k\">[]</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Array<span class=\"k\">:</span> <span class=\"k\">{}}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Object<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"one\"</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>Object<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Function<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Function<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span><span class=\"s\">\"null\"</span><span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">\"null\"</span><span class=\"k\">:</span> undefined<span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span><span class=\"s\">\"undefined\"</span><span class=\"k\">:</span> undefined<span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">\"undefined\"</span><span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>RegExp<span class=\"k\">:</span> <span class=\"s\">/re/</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>RegExp<span class=\"k\">:</span> <span class=\"s\">\"/re/\"</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Custom<span class=\"k\">:</span> <span class=\"k\">new</span> Custom<span class=\"k\">()</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>Custom<span class=\"k\">:</span> <span class=\"k\">new</span> Date<span class=\"k\">()</span><span class=\"k\">}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false (Custom object)\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Nested</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span><span class=\"s\">\"one\"</span><span class=\"k\">:</span> <span class=\"k\">{</span><span class=\"s\">\"two\"</span><span class=\"k\">:</span> <span class=\"k\">{</span><span class=\"s\">\"three\"</span><span class=\"k\">:</span> <span class=\"k\">{</span><span class=\"s\">\"four\"</span><span class=\"k\">:</span> <span class=\"s\">\"value\"</span><span class=\"k\">}}}}</span><span class=\"k\">,</span> <span class=\"k\">{</span><span class=\"s\">\"one\"</span><span class=\"k\">:</span> <span class=\"k\">{</span><span class=\"s\">\"two\"</span><span class=\"k\">:</span> <span class=\"k\">{</span><span class=\"s\">\"three\"</span><span class=\"k\">:</span> <span class=\"k\">{</span><span class=\"s\">\"four\"</span><span class=\"k\">:</span> <span class=\"s\">\"value\"</span><span class=\"k\">}}}}</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (nested object literals to 4 levels)\"</span><span class=\"k\">);</span>","\t","\t<span class=\"c\">// Test strict value checking</span>","\t","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>String<span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>String<span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (empty string)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>String<span class=\"k\">:</span> <span class=\"s\">\"string\"</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>String<span class=\"k\">:</span> <span class=\"s\">\"different string\"</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false (empty string)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Boolean<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Boolean<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (false Boolean)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Boolean<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Boolean<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (false Boolean)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Boolean<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Boolean<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false (false Boolean)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Number<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Number<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (number)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Number<span class=\"k\">:</span> <span class=\"s\">10</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Number<span class=\"k\">:</span> <span class=\"s\">10</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be true (number)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Number<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Number<span class=\"k\">:</span> <span class=\"s\">2</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false (true Boolean)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Array<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Array<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">2</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false (empty array)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Object<span class=\"k\">:</span> <span class=\"k\">{</span>test<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">}}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Object<span class=\"k\">:</span> <span class=\"k\">{</span>test<span class=\"k\">:</span> <span class=\"s\">2</span><span class=\"k\">}}</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false (empty object)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Object<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"one\"</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>Object<span class=\"k\">:</span> <span class=\"k\">[</span><span class=\"s\">\"two\"</span><span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false (object)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span><span class=\"s\">\"null\"</span><span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">\"null\"</span><span class=\"k\">:</span> undefined<span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false (null)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span><span class=\"s\">\"undefined\"</span><span class=\"k\">:</span> undefined<span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span><span class=\"s\">\"undefined\"</span><span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false (undefined)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>RegExp<span class=\"k\">:</span> <span class=\"s\">/re/</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>RegExp<span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false (RegExp)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Date<span class=\"k\">:</span> <span class=\"k\">new</span> Date<span class=\"k\">()</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>Date<span class=\"k\">:</span> <span class=\"k\">new</span> Custom<span class=\"k\">()</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false (Date)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Custom<span class=\"k\">:</span> <span class=\"k\">new</span> Custom<span class=\"k\">()</span><span class=\"k\">}</span><span class=\"k\">,</span><span class=\"k\">{</span>Custom<span class=\"k\">:</span> <span class=\"k\">new</span> Date<span class=\"k\">()</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false (Custom object)\"</span><span class=\"k\">);</span>","\tok<span class=\"k\">(!</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span><span class=\"k\">{</span>Number<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>String<span class=\"k\">:</span> <span class=\"s\">\"string\"</span><span class=\"k\">,</span>Boolean<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>Array<span class=\"k\">:</span> <span class=\"k\">[],</span>Object<span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">,</span>Function<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span><span class=\"s\">\"null\"</span><span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span><span class=\"s\">\"undefined\"</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span>RegExp<span class=\"k\">:</span> <span class=\"s\">/re/</span><span class=\"k\">,</span>Date<span class=\"k\">:</span> <span class=\"k\">new</span> Date<span class=\"k\">()</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">{</span>Number<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span>String<span class=\"k\">:</span> <span class=\"s\">\"string\"</span><span class=\"k\">,</span>Boolean<span class=\"k\">:</span> <span class=\"k\">true</span><span class=\"k\">,</span>Array<span class=\"k\">:</span> <span class=\"k\">[],</span>Object<span class=\"k\">:</span> <span class=\"k\">{}</span><span class=\"k\">,</span>Function<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span><span class=\"s\">\"null\"</span><span class=\"k\">:</span> <span class=\"k\">null</span><span class=\"k\">,</span><span class=\"s\">\"undefined\"</span><span class=\"k\">:</span> undefined<span class=\"k\">,</span>RegExp<span class=\"k\">:</span> <span class=\"s\">/re/</span><span class=\"k\">,</span>Date<span class=\"k\">:</span> <span class=\"k\">new</span> Date<span class=\"k\">()</span><span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">),</span> <span class=\"s\">\"Mock._assertObject should be false (Many native types)\"</span><span class=\"k\">);</span>","\t","\t","<span class=\"k\">}</span><span class=\"k\">);</span>"];
