/* automatically generated by JSCoverage - do not edit */
if (! top._$jscoverage) {
  top._$jscoverage = {};
}
var _$jscoverage = top._$jscoverage;
if (! _$jscoverage['qunit_assertions.js']) {
  _$jscoverage['qunit_assertions.js'] = [];
  _$jscoverage['qunit_assertions.js'][1] = 0;
  _$jscoverage['qunit_assertions.js'][3] = 0;
  _$jscoverage['qunit_assertions.js'][6] = 0;
  _$jscoverage['qunit_assertions.js'][9] = 0;
  _$jscoverage['qunit_assertions.js'][12] = 0;
  _$jscoverage['qunit_assertions.js'][15] = 0;
  _$jscoverage['qunit_assertions.js'][18] = 0;
  _$jscoverage['qunit_assertions.js'][24] = 0;
  _$jscoverage['qunit_assertions.js'][25] = 0;
}
_$jscoverage['qunit_assertions.js'][1]++;
(function qUnitExtensions(_scope) {
  _$jscoverage['qunit_assertions.js'][3]++;
  var extensions = {assert: (function assert(a, msg) {
  _$jscoverage['qunit_assertions.js'][6]++;
  ok(a, msg);
}), assertEquals: (function assertEquals(actual, expected, message) {
  _$jscoverage['qunit_assertions.js'][9]++;
  equals(actual, expected, message);
}), assertArray: (function assertArray(actual, expected, message) {
  _$jscoverage['qunit_assertions.js'][12]++;
  ok(Mock._assertArray(expected, actual), message);
}), assertObject: (function assertObject(actual, expected, message) {
  _$jscoverage['qunit_assertions.js'][15]++;
  ok(Mock._assertObject(expected, actual), message);
}), fail: (function fail(msg) {
  _$jscoverage['qunit_assertions.js'][18]++;
  ok(false, msg);
})};
  _$jscoverage['qunit_assertions.js'][24]++;
  for (var method in extensions) {
    _$jscoverage['qunit_assertions.js'][25]++;
    _scope[method] = extensions[method];
}
})(window);
_$jscoverage['qunit_assertions.js'].source = ["<span class=\"k\">(</span><span class=\"k\">function</span> qUnitExtensions <span class=\"k\">(</span>_scope<span class=\"k\">)</span> <span class=\"k\">{</span>","","    <span class=\"k\">var</span> extensions <span class=\"k\">=</span> <span class=\"k\">{</span>","","        assert<span class=\"k\">:</span> <span class=\"k\">function</span> assert<span class=\"k\">(</span>a<span class=\"k\">,</span> msg<span class=\"k\">)</span> <span class=\"k\">{</span>","            ok<span class=\"k\">(</span>a<span class=\"k\">,</span> msg<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        assertEquals<span class=\"k\">:</span> <span class=\"k\">function</span> assertEquals<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","            equals<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message<span class=\"k\">);</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","\t\tassertArray<span class=\"k\">:</span> <span class=\"k\">function</span> assertArray<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertArray<span class=\"k\">(</span>expected<span class=\"k\">,</span> actual<span class=\"k\">),</span> message<span class=\"k\">)</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\tassertObject<span class=\"k\">:</span> <span class=\"k\">function</span> assertObject<span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tok<span class=\"k\">(</span>Mock<span class=\"k\">.</span>_assertObject<span class=\"k\">(</span>expected<span class=\"k\">,</span> actual<span class=\"k\">),</span> message<span class=\"k\">)</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>\t\t","        fail<span class=\"k\">:</span> <span class=\"k\">function</span> fail<span class=\"k\">(</span>msg<span class=\"k\">)</span> <span class=\"k\">{</span>","            ok<span class=\"k\">(</span><span class=\"k\">false</span><span class=\"k\">,</span> msg<span class=\"k\">);</span>","        <span class=\"k\">}</span>","","    <span class=\"k\">}</span><span class=\"k\">;</span>","","\t<span class=\"c\">// Register Public API</span>","\t<span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> method <span class=\"k\">in</span> extensions<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t_scope<span class=\"k\">[</span>method<span class=\"k\">]</span> <span class=\"k\">=</span> extensions<span class=\"k\">[</span>method<span class=\"k\">]</span>","\t<span class=\"k\">}</span>","        ","<span class=\"k\">}</span><span class=\"k\">)(</span>window<span class=\"k\">);</span>"];
