/* automatically generated by JSCoverage - do not edit */
if (! top._$jscoverage) {
  top._$jscoverage = {};
}
var _$jscoverage = top._$jscoverage;
if (! _$jscoverage['qunit.js']) {
  _$jscoverage['qunit.js'] = [];
  _$jscoverage['qunit.js'][11] = 0;
  _$jscoverage['qunit.js'][13] = 0;
  _$jscoverage['qunit.js'][17] = 0;
  _$jscoverage['qunit.js'][28] = 0;
  _$jscoverage['qunit.js'][32] = 0;
  _$jscoverage['qunit.js'][33] = 0;
  _$jscoverage['qunit.js'][36] = 0;
  _$jscoverage['qunit.js'][37] = 0;
  _$jscoverage['qunit.js'][40] = 0;
  _$jscoverage['qunit.js'][41] = 0;
  _$jscoverage['qunit.js'][47] = 0;
  _$jscoverage['qunit.js'][49] = 0;
  _$jscoverage['qunit.js'][50] = 0;
  _$jscoverage['qunit.js'][51] = 0;
  _$jscoverage['qunit.js'][54] = 0;
  _$jscoverage['qunit.js'][55] = 0;
  _$jscoverage['qunit.js'][56] = 0;
  _$jscoverage['qunit.js'][58] = 0;
  _$jscoverage['qunit.js'][63] = 0;
  _$jscoverage['qunit.js'][64] = 0;
  _$jscoverage['qunit.js'][65] = 0;
  _$jscoverage['qunit.js'][68] = 0;
  _$jscoverage['qunit.js'][72] = 0;
  _$jscoverage['qunit.js'][74] = 0;
  _$jscoverage['qunit.js'][75] = 0;
  _$jscoverage['qunit.js'][76] = 0;
  _$jscoverage['qunit.js'][79] = 0;
  _$jscoverage['qunit.js'][80] = 0;
  _$jscoverage['qunit.js'][81] = 0;
  _$jscoverage['qunit.js'][84] = 0;
  _$jscoverage['qunit.js'][85] = 0;
  _$jscoverage['qunit.js'][88] = 0;
  _$jscoverage['qunit.js'][89] = 0;
  _$jscoverage['qunit.js'][92] = 0;
  _$jscoverage['qunit.js'][93] = 0;
  _$jscoverage['qunit.js'][95] = 0;
  _$jscoverage['qunit.js'][99] = 0;
  _$jscoverage['qunit.js'][100] = 0;
  _$jscoverage['qunit.js'][104] = 0;
  _$jscoverage['qunit.js'][106] = 0;
  _$jscoverage['qunit.js'][107] = 0;
  _$jscoverage['qunit.js'][109] = 0;
  _$jscoverage['qunit.js'][110] = 0;
  _$jscoverage['qunit.js'][111] = 0;
  _$jscoverage['qunit.js'][114] = 0;
  _$jscoverage['qunit.js'][116] = 0;
  _$jscoverage['qunit.js'][119] = 0;
  _$jscoverage['qunit.js'][120] = 0;
  _$jscoverage['qunit.js'][123] = 0;
  _$jscoverage['qunit.js'][124] = 0;
  _$jscoverage['qunit.js'][126] = 0;
  _$jscoverage['qunit.js'][127] = 0;
  _$jscoverage['qunit.js'][129] = 0;
  _$jscoverage['qunit.js'][132] = 0;
  _$jscoverage['qunit.js'][133] = 0;
  _$jscoverage['qunit.js'][138] = 0;
  _$jscoverage['qunit.js'][139] = 0;
  _$jscoverage['qunit.js'][140] = 0;
  _$jscoverage['qunit.js'][141] = 0;
  _$jscoverage['qunit.js'][143] = 0;
  _$jscoverage['qunit.js'][146] = 0;
  _$jscoverage['qunit.js'][147] = 0;
  _$jscoverage['qunit.js'][149] = 0;
  _$jscoverage['qunit.js'][152] = 0;
  _$jscoverage['qunit.js'][153] = 0;
  _$jscoverage['qunit.js'][156] = 0;
  _$jscoverage['qunit.js'][159] = 0;
  _$jscoverage['qunit.js'][160] = 0;
  _$jscoverage['qunit.js'][162] = 0;
  _$jscoverage['qunit.js'][163] = 0;
  _$jscoverage['qunit.js'][164] = 0;
  _$jscoverage['qunit.js'][166] = 0;
  _$jscoverage['qunit.js'][167] = 0;
  _$jscoverage['qunit.js'][169] = 0;
  _$jscoverage['qunit.js'][170] = 0;
  _$jscoverage['qunit.js'][171] = 0;
  _$jscoverage['qunit.js'][172] = 0;
  _$jscoverage['qunit.js'][174] = 0;
  _$jscoverage['qunit.js'][175] = 0;
  _$jscoverage['qunit.js'][177] = 0;
  _$jscoverage['qunit.js'][178] = 0;
  _$jscoverage['qunit.js'][179] = 0;
  _$jscoverage['qunit.js'][183] = 0;
  _$jscoverage['qunit.js'][184] = 0;
  _$jscoverage['qunit.js'][186] = 0;
  _$jscoverage['qunit.js'][187] = 0;
  _$jscoverage['qunit.js'][188] = 0;
  _$jscoverage['qunit.js'][191] = 0;
  _$jscoverage['qunit.js'][192] = 0;
  _$jscoverage['qunit.js'][193] = 0;
  _$jscoverage['qunit.js'][194] = 0;
  _$jscoverage['qunit.js'][196] = 0;
  _$jscoverage['qunit.js'][197] = 0;
  _$jscoverage['qunit.js'][198] = 0;
  _$jscoverage['qunit.js'][201] = 0;
  _$jscoverage['qunit.js'][203] = 0;
  _$jscoverage['qunit.js'][204] = 0;
  _$jscoverage['qunit.js'][209] = 0;
  _$jscoverage['qunit.js'][210] = 0;
  _$jscoverage['qunit.js'][211] = 0;
  _$jscoverage['qunit.js'][212] = 0;
  _$jscoverage['qunit.js'][213] = 0;
  _$jscoverage['qunit.js'][215] = 0;
  _$jscoverage['qunit.js'][216] = 0;
  _$jscoverage['qunit.js'][217] = 0;
  _$jscoverage['qunit.js'][218] = 0;
  _$jscoverage['qunit.js'][219] = 0;
  _$jscoverage['qunit.js'][220] = 0;
  _$jscoverage['qunit.js'][225] = 0;
  _$jscoverage['qunit.js'][226] = 0;
  _$jscoverage['qunit.js'][227] = 0;
  _$jscoverage['qunit.js'][228] = 0;
  _$jscoverage['qunit.js'][229] = 0;
  _$jscoverage['qunit.js'][234] = 0;
  _$jscoverage['qunit.js'][236] = 0;
  _$jscoverage['qunit.js'][237] = 0;
  _$jscoverage['qunit.js'][241] = 0;
  _$jscoverage['qunit.js'][242] = 0;
  _$jscoverage['qunit.js'][243] = 0;
  _$jscoverage['qunit.js'][244] = 0;
  _$jscoverage['qunit.js'][246] = 0;
  _$jscoverage['qunit.js'][256] = 0;
  _$jscoverage['qunit.js'][264] = 0;
  _$jscoverage['qunit.js'][266] = 0;
  _$jscoverage['qunit.js'][285] = 0;
  _$jscoverage['qunit.js'][289] = 0;
  _$jscoverage['qunit.js'][294] = 0;
  _$jscoverage['qunit.js'][295] = 0;
  _$jscoverage['qunit.js'][296] = 0;
  _$jscoverage['qunit.js'][297] = 0;
  _$jscoverage['qunit.js'][300] = 0;
  _$jscoverage['qunit.js'][301] = 0;
  _$jscoverage['qunit.js'][304] = 0;
  _$jscoverage['qunit.js'][305] = 0;
  _$jscoverage['qunit.js'][310] = 0;
  _$jscoverage['qunit.js'][312] = 0;
  _$jscoverage['qunit.js'][313] = 0;
  _$jscoverage['qunit.js'][314] = 0;
  _$jscoverage['qunit.js'][315] = 0;
  _$jscoverage['qunit.js'][324] = 0;
  _$jscoverage['qunit.js'][325] = 0;
  _$jscoverage['qunit.js'][326] = 0;
  _$jscoverage['qunit.js'][327] = 0;
  _$jscoverage['qunit.js'][340] = 0;
  _$jscoverage['qunit.js'][341] = 0;
  _$jscoverage['qunit.js'][342] = 0;
  _$jscoverage['qunit.js'][344] = 0;
  _$jscoverage['qunit.js'][346] = 0;
  _$jscoverage['qunit.js'][347] = 0;
  _$jscoverage['qunit.js'][353] = 0;
  _$jscoverage['qunit.js'][366] = 0;
  _$jscoverage['qunit.js'][375] = 0;
  _$jscoverage['qunit.js'][376] = 0;
  _$jscoverage['qunit.js'][379] = 0;
  _$jscoverage['qunit.js'][380] = 0;
  _$jscoverage['qunit.js'][381] = 0;
  _$jscoverage['qunit.js'][382] = 0;
  _$jscoverage['qunit.js'][383] = 0;
  _$jscoverage['qunit.js'][384] = 0;
  _$jscoverage['qunit.js'][385] = 0;
  _$jscoverage['qunit.js'][386] = 0;
  _$jscoverage['qunit.js'][387] = 0;
  _$jscoverage['qunit.js'][392] = 0;
  _$jscoverage['qunit.js'][395] = 0;
  _$jscoverage['qunit.js'][400] = 0;
  _$jscoverage['qunit.js'][401] = 0;
  _$jscoverage['qunit.js'][402] = 0;
  _$jscoverage['qunit.js'][404] = 0;
  _$jscoverage['qunit.js'][405] = 0;
  _$jscoverage['qunit.js'][408] = 0;
  _$jscoverage['qunit.js'][409] = 0;
  _$jscoverage['qunit.js'][412] = 0;
  _$jscoverage['qunit.js'][414] = 0;
  _$jscoverage['qunit.js'][415] = 0;
  _$jscoverage['qunit.js'][416] = 0;
  _$jscoverage['qunit.js'][418] = 0;
  _$jscoverage['qunit.js'][420] = 0;
  _$jscoverage['qunit.js'][421] = 0;
  _$jscoverage['qunit.js'][422] = 0;
  _$jscoverage['qunit.js'][425] = 0;
  _$jscoverage['qunit.js'][426] = 0;
  _$jscoverage['qunit.js'][427] = 0;
  _$jscoverage['qunit.js'][451] = 0;
  _$jscoverage['qunit.js'][452] = 0;
  _$jscoverage['qunit.js'][453] = 0;
  _$jscoverage['qunit.js'][454] = 0;
  _$jscoverage['qunit.js'][455] = 0;
  _$jscoverage['qunit.js'][456] = 0;
  _$jscoverage['qunit.js'][457] = 0;
  _$jscoverage['qunit.js'][458] = 0;
  _$jscoverage['qunit.js'][459] = 0;
  _$jscoverage['qunit.js'][463] = 0;
  _$jscoverage['qunit.js'][465] = 0;
  _$jscoverage['qunit.js'][466] = 0;
  _$jscoverage['qunit.js'][467] = 0;
  _$jscoverage['qunit.js'][468] = 0;
  _$jscoverage['qunit.js'][470] = 0;
  _$jscoverage['qunit.js'][471] = 0;
  _$jscoverage['qunit.js'][472] = 0;
  _$jscoverage['qunit.js'][473] = 0;
  _$jscoverage['qunit.js'][474] = 0;
  _$jscoverage['qunit.js'][475] = 0;
  _$jscoverage['qunit.js'][476] = 0;
  _$jscoverage['qunit.js'][477] = 0;
  _$jscoverage['qunit.js'][478] = 0;
  _$jscoverage['qunit.js'][482] = 0;
  _$jscoverage['qunit.js'][484] = 0;
  _$jscoverage['qunit.js'][485] = 0;
  _$jscoverage['qunit.js'][486] = 0;
  _$jscoverage['qunit.js'][487] = 0;
  _$jscoverage['qunit.js'][490] = 0;
  _$jscoverage['qunit.js'][491] = 0;
  _$jscoverage['qunit.js'][492] = 0;
  _$jscoverage['qunit.js'][495] = 0;
  _$jscoverage['qunit.js'][496] = 0;
  _$jscoverage['qunit.js'][499] = 0;
  _$jscoverage['qunit.js'][502] = 0;
  _$jscoverage['qunit.js'][503] = 0;
  _$jscoverage['qunit.js'][504] = 0;
  _$jscoverage['qunit.js'][505] = 0;
  _$jscoverage['qunit.js'][508] = 0;
  _$jscoverage['qunit.js'][509] = 0;
  _$jscoverage['qunit.js'][510] = 0;
  _$jscoverage['qunit.js'][511] = 0;
  _$jscoverage['qunit.js'][513] = 0;
  _$jscoverage['qunit.js'][517] = 0;
  _$jscoverage['qunit.js'][520] = 0;
  _$jscoverage['qunit.js'][523] = 0;
  _$jscoverage['qunit.js'][524] = 0;
  _$jscoverage['qunit.js'][527] = 0;
  _$jscoverage['qunit.js'][533] = 0;
  _$jscoverage['qunit.js'][534] = 0;
  _$jscoverage['qunit.js'][537] = 0;
  _$jscoverage['qunit.js'][538] = 0;
  _$jscoverage['qunit.js'][540] = 0;
  _$jscoverage['qunit.js'][541] = 0;
  _$jscoverage['qunit.js'][542] = 0;
  _$jscoverage['qunit.js'][543] = 0;
  _$jscoverage['qunit.js'][544] = 0;
  _$jscoverage['qunit.js'][547] = 0;
  _$jscoverage['qunit.js'][550] = 0;
  _$jscoverage['qunit.js'][553] = 0;
  _$jscoverage['qunit.js'][554] = 0;
  _$jscoverage['qunit.js'][557] = 0;
  _$jscoverage['qunit.js'][558] = 0;
  _$jscoverage['qunit.js'][561] = 0;
  _$jscoverage['qunit.js'][562] = 0;
  _$jscoverage['qunit.js'][565] = 0;
  _$jscoverage['qunit.js'][566] = 0;
  _$jscoverage['qunit.js'][569] = 0;
  _$jscoverage['qunit.js'][570] = 0;
  _$jscoverage['qunit.js'][573] = 0;
  _$jscoverage['qunit.js'][574] = 0;
  _$jscoverage['qunit.js'][578] = 0;
  _$jscoverage['qunit.js'][581] = 0;
  _$jscoverage['qunit.js'][582] = 0;
  _$jscoverage['qunit.js'][583] = 0;
  _$jscoverage['qunit.js'][586] = 0;
  _$jscoverage['qunit.js'][587] = 0;
  _$jscoverage['qunit.js'][589] = 0;
  _$jscoverage['qunit.js'][590] = 0;
  _$jscoverage['qunit.js'][594] = 0;
  _$jscoverage['qunit.js'][595] = 0;
  _$jscoverage['qunit.js'][596] = 0;
  _$jscoverage['qunit.js'][600] = 0;
  _$jscoverage['qunit.js'][601] = 0;
  _$jscoverage['qunit.js'][603] = 0;
  _$jscoverage['qunit.js'][604] = 0;
  _$jscoverage['qunit.js'][605] = 0;
  _$jscoverage['qunit.js'][610] = 0;
  _$jscoverage['qunit.js'][611] = 0;
  _$jscoverage['qunit.js'][612] = 0;
  _$jscoverage['qunit.js'][614] = 0;
  _$jscoverage['qunit.js'][615] = 0;
  _$jscoverage['qunit.js'][616] = 0;
  _$jscoverage['qunit.js'][617] = 0;
  _$jscoverage['qunit.js'][620] = 0;
  _$jscoverage['qunit.js'][621] = 0;
  _$jscoverage['qunit.js'][622] = 0;
  _$jscoverage['qunit.js'][623] = 0;
  _$jscoverage['qunit.js'][628] = 0;
  _$jscoverage['qunit.js'][629] = 0;
  _$jscoverage['qunit.js'][630] = 0;
  _$jscoverage['qunit.js'][631] = 0;
  _$jscoverage['qunit.js'][632] = 0;
  _$jscoverage['qunit.js'][633] = 0;
  _$jscoverage['qunit.js'][634] = 0;
  _$jscoverage['qunit.js'][635] = 0;
  _$jscoverage['qunit.js'][639] = 0;
  _$jscoverage['qunit.js'][642] = 0;
  _$jscoverage['qunit.js'][643] = 0;
  _$jscoverage['qunit.js'][644] = 0;
  _$jscoverage['qunit.js'][645] = 0;
  _$jscoverage['qunit.js'][646] = 0;
  _$jscoverage['qunit.js'][648] = 0;
  _$jscoverage['qunit.js'][649] = 0;
  _$jscoverage['qunit.js'][653] = 0;
  _$jscoverage['qunit.js'][654] = 0;
  _$jscoverage['qunit.js'][655] = 0;
  _$jscoverage['qunit.js'][658] = 0;
  _$jscoverage['qunit.js'][661] = 0;
  _$jscoverage['qunit.js'][662] = 0;
  _$jscoverage['qunit.js'][663] = 0;
  _$jscoverage['qunit.js'][664] = 0;
  _$jscoverage['qunit.js'][665] = 0;
  _$jscoverage['qunit.js'][667] = 0;
  _$jscoverage['qunit.js'][671] = 0;
  _$jscoverage['qunit.js'][672] = 0;
  _$jscoverage['qunit.js'][680] = 0;
  _$jscoverage['qunit.js'][682] = 0;
  _$jscoverage['qunit.js'][683] = 0;
  _$jscoverage['qunit.js'][687] = 0;
  _$jscoverage['qunit.js'][688] = 0;
  _$jscoverage['qunit.js'][689] = 0;
  _$jscoverage['qunit.js'][691] = 0;
  _$jscoverage['qunit.js'][692] = 0;
  _$jscoverage['qunit.js'][694] = 0;
  _$jscoverage['qunit.js'][696] = 0;
  _$jscoverage['qunit.js'][697] = 0;
  _$jscoverage['qunit.js'][699] = 0;
  _$jscoverage['qunit.js'][702] = 0;
  _$jscoverage['qunit.js'][703] = 0;
  _$jscoverage['qunit.js'][706] = 0;
  _$jscoverage['qunit.js'][707] = 0;
  _$jscoverage['qunit.js'][710] = 0;
  _$jscoverage['qunit.js'][711] = 0;
  _$jscoverage['qunit.js'][714] = 0;
  _$jscoverage['qunit.js'][715] = 0;
  _$jscoverage['qunit.js'][721] = 0;
  _$jscoverage['qunit.js'][722] = 0;
  _$jscoverage['qunit.js'][724] = 0;
  _$jscoverage['qunit.js'][725] = 0;
  _$jscoverage['qunit.js'][727] = 0;
  _$jscoverage['qunit.js'][728] = 0;
  _$jscoverage['qunit.js'][730] = 0;
  _$jscoverage['qunit.js'][735] = 0;
  _$jscoverage['qunit.js'][736] = 0;
  _$jscoverage['qunit.js'][737] = 0;
  _$jscoverage['qunit.js'][738] = 0;
  _$jscoverage['qunit.js'][739] = 0;
  _$jscoverage['qunit.js'][741] = 0;
  _$jscoverage['qunit.js'][746] = 0;
  _$jscoverage['qunit.js'][749] = 0;
  _$jscoverage['qunit.js'][750] = 0;
  _$jscoverage['qunit.js'][754] = 0;
  _$jscoverage['qunit.js'][756] = 0;
  _$jscoverage['qunit.js'][760] = 0;
  _$jscoverage['qunit.js'][768] = 0;
  _$jscoverage['qunit.js'][772] = 0;
  _$jscoverage['qunit.js'][776] = 0;
  _$jscoverage['qunit.js'][787] = 0;
  _$jscoverage['qunit.js'][788] = 0;
  _$jscoverage['qunit.js'][793] = 0;
  _$jscoverage['qunit.js'][794] = 0;
  _$jscoverage['qunit.js'][797] = 0;
  _$jscoverage['qunit.js'][798] = 0;
  _$jscoverage['qunit.js'][801] = 0;
  _$jscoverage['qunit.js'][802] = 0;
  _$jscoverage['qunit.js'][803] = 0;
  _$jscoverage['qunit.js'][805] = 0;
  _$jscoverage['qunit.js'][806] = 0;
  _$jscoverage['qunit.js'][807] = 0;
  _$jscoverage['qunit.js'][810] = 0;
  _$jscoverage['qunit.js'][814] = 0;
  _$jscoverage['qunit.js'][815] = 0;
  _$jscoverage['qunit.js'][816] = 0;
  _$jscoverage['qunit.js'][819] = 0;
  _$jscoverage['qunit.js'][820] = 0;
  _$jscoverage['qunit.js'][824] = 0;
  _$jscoverage['qunit.js'][826] = 0;
  _$jscoverage['qunit.js'][828] = 0;
  _$jscoverage['qunit.js'][830] = 0;
  _$jscoverage['qunit.js'][831] = 0;
  _$jscoverage['qunit.js'][835] = 0;
  _$jscoverage['qunit.js'][837] = 0;
  _$jscoverage['qunit.js'][838] = 0;
  _$jscoverage['qunit.js'][842] = 0;
  _$jscoverage['qunit.js'][847] = 0;
  _$jscoverage['qunit.js'][848] = 0;
  _$jscoverage['qunit.js'][849] = 0;
  _$jscoverage['qunit.js'][850] = 0;
  _$jscoverage['qunit.js'][853] = 0;
  _$jscoverage['qunit.js'][854] = 0;
  _$jscoverage['qunit.js'][855] = 0;
  _$jscoverage['qunit.js'][856] = 0;
  _$jscoverage['qunit.js'][857] = 0;
  _$jscoverage['qunit.js'][859] = 0;
  _$jscoverage['qunit.js'][866] = 0;
  _$jscoverage['qunit.js'][880] = 0;
  _$jscoverage['qunit.js'][881] = 0;
  _$jscoverage['qunit.js'][882] = 0;
  _$jscoverage['qunit.js'][883] = 0;
  _$jscoverage['qunit.js'][884] = 0;
  _$jscoverage['qunit.js'][885] = 0;
  _$jscoverage['qunit.js'][886] = 0;
  _$jscoverage['qunit.js'][887] = 0;
  _$jscoverage['qunit.js'][888] = 0;
  _$jscoverage['qunit.js'][891] = 0;
  _$jscoverage['qunit.js'][892] = 0;
  _$jscoverage['qunit.js'][893] = 0;
  _$jscoverage['qunit.js'][894] = 0;
  _$jscoverage['qunit.js'][895] = 0;
  _$jscoverage['qunit.js'][896] = 0;
  _$jscoverage['qunit.js'][897] = 0;
  _$jscoverage['qunit.js'][898] = 0;
  _$jscoverage['qunit.js'][899] = 0;
  _$jscoverage['qunit.js'][900] = 0;
  _$jscoverage['qunit.js'][901] = 0;
  _$jscoverage['qunit.js'][902] = 0;
  _$jscoverage['qunit.js'][903] = 0;
  _$jscoverage['qunit.js'][904] = 0;
  _$jscoverage['qunit.js'][906] = 0;
  _$jscoverage['qunit.js'][908] = 0;
  _$jscoverage['qunit.js'][910] = 0;
  _$jscoverage['qunit.js'][911] = 0;
  _$jscoverage['qunit.js'][913] = 0;
  _$jscoverage['qunit.js'][918] = 0;
  _$jscoverage['qunit.js'][919] = 0;
  _$jscoverage['qunit.js'][920] = 0;
  _$jscoverage['qunit.js'][921] = 0;
  _$jscoverage['qunit.js'][922] = 0;
  _$jscoverage['qunit.js'][923] = 0;
  _$jscoverage['qunit.js'][924] = 0;
  _$jscoverage['qunit.js'][925] = 0;
  _$jscoverage['qunit.js'][926] = 0;
  _$jscoverage['qunit.js'][927] = 0;
  _$jscoverage['qunit.js'][928] = 0;
  _$jscoverage['qunit.js'][929] = 0;
  _$jscoverage['qunit.js'][930] = 0;
  _$jscoverage['qunit.js'][931] = 0;
  _$jscoverage['qunit.js'][932] = 0;
  _$jscoverage['qunit.js'][933] = 0;
  _$jscoverage['qunit.js'][934] = 0;
  _$jscoverage['qunit.js'][935] = 0;
  _$jscoverage['qunit.js'][936] = 0;
  _$jscoverage['qunit.js'][937] = 0;
  _$jscoverage['qunit.js'][938] = 0;
  _$jscoverage['qunit.js'][940] = 0;
  _$jscoverage['qunit.js'][942] = 0;
  _$jscoverage['qunit.js'][945] = 0;
  _$jscoverage['qunit.js'][948] = 0;
  _$jscoverage['qunit.js'][949] = 0;
  _$jscoverage['qunit.js'][950] = 0;
  _$jscoverage['qunit.js'][951] = 0;
  _$jscoverage['qunit.js'][952] = 0;
  _$jscoverage['qunit.js'][953] = 0;
  _$jscoverage['qunit.js'][956] = 0;
  _$jscoverage['qunit.js'][959] = 0;
  _$jscoverage['qunit.js'][962] = 0;
  _$jscoverage['qunit.js'][979] = 0;
  _$jscoverage['qunit.js'][981] = 0;
  _$jscoverage['qunit.js'][982] = 0;
  _$jscoverage['qunit.js'][983] = 0;
  _$jscoverage['qunit.js'][985] = 0;
  _$jscoverage['qunit.js'][986] = 0;
  _$jscoverage['qunit.js'][992] = 0;
  _$jscoverage['qunit.js'][993] = 0;
  _$jscoverage['qunit.js'][994] = 0;
  _$jscoverage['qunit.js'][995] = 0;
  _$jscoverage['qunit.js'][996] = 0;
  _$jscoverage['qunit.js'][997] = 0;
  _$jscoverage['qunit.js'][1000] = 0;
  _$jscoverage['qunit.js'][1003] = 0;
  _$jscoverage['qunit.js'][1006] = 0;
  _$jscoverage['qunit.js'][1007] = 0;
  _$jscoverage['qunit.js'][1008] = 0;
  _$jscoverage['qunit.js'][1009] = 0;
  _$jscoverage['qunit.js'][1011] = 0;
  _$jscoverage['qunit.js'][1014] = 0;
  _$jscoverage['qunit.js'][1015] = 0;
  _$jscoverage['qunit.js'][1017] = 0;
  _$jscoverage['qunit.js'][1018] = 0;
  _$jscoverage['qunit.js'][1019] = 0;
  _$jscoverage['qunit.js'][1020] = 0;
  _$jscoverage['qunit.js'][1041] = 0;
}
_$jscoverage['qunit.js'][11]++;
(function (window) {
  _$jscoverage['qunit.js'][13]++;
  var QUnit = {init: (function () {
  _$jscoverage['qunit.js'][17]++;
  config = {stats: {all: 0, bad: 0}, moduleStats: {all: 0, bad: 0}, started: + new Date(), blocking: false, autorun: false, assertions: [], filters: [], queue: []};
  _$jscoverage['qunit.js'][28]++;
  var tests = id("qunit-tests"), banner = id("qunit-banner"), result = id("qunit-testresult");
  _$jscoverage['qunit.js'][32]++;
  if (tests) {
    _$jscoverage['qunit.js'][33]++;
    tests.innerHTML = "";
  }
  _$jscoverage['qunit.js'][36]++;
  if (banner) {
    _$jscoverage['qunit.js'][37]++;
    banner.className = "";
  }
  _$jscoverage['qunit.js'][40]++;
  if (result) {
    _$jscoverage['qunit.js'][41]++;
    result.parentNode.removeChild(result);
  }
}), module: (function (name, testEnvironment) {
  _$jscoverage['qunit.js'][47]++;
  config.currentModule = name;
  _$jscoverage['qunit.js'][49]++;
  synchronize((function () {
  _$jscoverage['qunit.js'][50]++;
  if (config.currentModule) {
    _$jscoverage['qunit.js'][51]++;
    QUnit.moduleDone(config.currentModule, config.moduleStats.bad, config.moduleStats.all);
  }
  _$jscoverage['qunit.js'][54]++;
  config.currentModule = name;
  _$jscoverage['qunit.js'][55]++;
  config.moduleTestEnvironment = testEnvironment;
  _$jscoverage['qunit.js'][56]++;
  config.moduleStats = {all: 0, bad: 0};
  _$jscoverage['qunit.js'][58]++;
  QUnit.moduleStart(name, testEnvironment);
}));
}), asyncTest: (function (testName, expected, callback) {
  _$jscoverage['qunit.js'][63]++;
  if (arguments.length === 2) {
    _$jscoverage['qunit.js'][64]++;
    callback = expected;
    _$jscoverage['qunit.js'][65]++;
    expected = 0;
  }
  _$jscoverage['qunit.js'][68]++;
  QUnit.test(testName, expected, callback, true);
}), test: (function (testName, expected, callback, async) {
  _$jscoverage['qunit.js'][72]++;
  var name = testName, testEnvironment, testEnvironmentArg;
  _$jscoverage['qunit.js'][74]++;
  if (arguments.length === 2) {
    _$jscoverage['qunit.js'][75]++;
    callback = expected;
    _$jscoverage['qunit.js'][76]++;
    expected = null;
  }
  _$jscoverage['qunit.js'][79]++;
  if (expected && typeof expected === "object") {
    _$jscoverage['qunit.js'][80]++;
    testEnvironmentArg = expected;
    _$jscoverage['qunit.js'][81]++;
    expected = null;
  }
  _$jscoverage['qunit.js'][84]++;
  if (config.currentModule) {
    _$jscoverage['qunit.js'][85]++;
    name = config.currentModule + " module: " + name;
  }
  _$jscoverage['qunit.js'][88]++;
  if (! validTest(name)) {
    _$jscoverage['qunit.js'][89]++;
    return;
  }
  _$jscoverage['qunit.js'][92]++;
  synchronize((function () {
  _$jscoverage['qunit.js'][93]++;
  QUnit.testStart(testName);
  _$jscoverage['qunit.js'][95]++;
  testEnvironment = extend({setup: (function () {
}), teardown: (function () {
})}, config.moduleTestEnvironment);
  _$jscoverage['qunit.js'][99]++;
  if (testEnvironmentArg) {
    _$jscoverage['qunit.js'][100]++;
    extend(testEnvironment, testEnvironmentArg);
  }
  _$jscoverage['qunit.js'][104]++;
  QUnit.current_testEnvironment = testEnvironment;
  _$jscoverage['qunit.js'][106]++;
  config.assertions = [];
  _$jscoverage['qunit.js'][107]++;
  config.expected = expected;
  _$jscoverage['qunit.js'][109]++;
  try {
    _$jscoverage['qunit.js'][110]++;
    if (! config.pollution) {
      _$jscoverage['qunit.js'][111]++;
      saveGlobal();
    }
    _$jscoverage['qunit.js'][114]++;
    testEnvironment.setup.call(testEnvironment);
  }
  catch (e) {
    _$jscoverage['qunit.js'][116]++;
    QUnit.ok(false, "Setup failed on " + name + ": " + e.message);
  }
  _$jscoverage['qunit.js'][119]++;
  if (async) {
    _$jscoverage['qunit.js'][120]++;
    QUnit.stop();
  }
  _$jscoverage['qunit.js'][123]++;
  try {
    _$jscoverage['qunit.js'][124]++;
    callback.call(testEnvironment);
  }
  catch (e) {
    _$jscoverage['qunit.js'][126]++;
    fail("Test " + name + " died, exception and test follows", e, callback);
    _$jscoverage['qunit.js'][127]++;
    QUnit.ok(false, "Died on test #" + (config.assertions.length + 1) + ": " + e.message);
    _$jscoverage['qunit.js'][129]++;
    saveGlobal();
    _$jscoverage['qunit.js'][132]++;
    if (config.blocking) {
      _$jscoverage['qunit.js'][133]++;
      start();
    }
  }
}));
  _$jscoverage['qunit.js'][138]++;
  synchronize((function () {
  _$jscoverage['qunit.js'][139]++;
  try {
    _$jscoverage['qunit.js'][140]++;
    checkPollution();
    _$jscoverage['qunit.js'][141]++;
    testEnvironment.teardown.call(testEnvironment);
  }
  catch (e) {
    _$jscoverage['qunit.js'][143]++;
    QUnit.ok(false, "Teardown failed on " + name + ": " + e.message);
  }
  _$jscoverage['qunit.js'][146]++;
  try {
    _$jscoverage['qunit.js'][147]++;
    QUnit.reset();
  }
  catch (e) {
    _$jscoverage['qunit.js'][149]++;
    fail("reset() failed, following Test " + name + ", exception and reset fn follows", e, reset);
  }
  _$jscoverage['qunit.js'][152]++;
  if (config.expected && config.expected != config.assertions.length) {
    _$jscoverage['qunit.js'][153]++;
    QUnit.ok(false, "Expected " + config.expected + " assertions, but " + config.assertions.length + " were run");
  }
  _$jscoverage['qunit.js'][156]++;
  var good = 0, bad = 0, tests = id("qunit-tests");
  _$jscoverage['qunit.js'][159]++;
  config.stats.all += config.assertions.length;
  _$jscoverage['qunit.js'][160]++;
  config.moduleStats.all += config.assertions.length;
  _$jscoverage['qunit.js'][162]++;
  if (tests) {
    _$jscoverage['qunit.js'][163]++;
    var ol = document.createElement("ol");
    _$jscoverage['qunit.js'][164]++;
    ol.style.display = "none";
    _$jscoverage['qunit.js'][166]++;
    for (var i = 0; i < config.assertions.length; i++) {
      _$jscoverage['qunit.js'][167]++;
      var assertion = config.assertions[i];
      _$jscoverage['qunit.js'][169]++;
      var li = document.createElement("li");
      _$jscoverage['qunit.js'][170]++;
      li.className = assertion.result? "pass": "fail";
      _$jscoverage['qunit.js'][171]++;
      li.innerHTML = assertion.message || "(no message)";
      _$jscoverage['qunit.js'][172]++;
      ol.appendChild(li);
      _$jscoverage['qunit.js'][174]++;
      if (assertion.result) {
        _$jscoverage['qunit.js'][175]++;
        good++;
      }
      else {
        _$jscoverage['qunit.js'][177]++;
        bad++;
        _$jscoverage['qunit.js'][178]++;
        config.stats.bad++;
        _$jscoverage['qunit.js'][179]++;
        config.moduleStats.bad++;
      }
}
    _$jscoverage['qunit.js'][183]++;
    var b = document.createElement("strong");
    _$jscoverage['qunit.js'][184]++;
    b.innerHTML = name + " <b style='color:black;'>(<b class='fail'>" + bad + "</b>, <b class='pass'>" + good + "</b>, " + config.assertions.length + ")</b>";
    _$jscoverage['qunit.js'][186]++;
    addEvent(b, "click", (function () {
  _$jscoverage['qunit.js'][187]++;
  var next = b.nextSibling, display = next.style.display;
  _$jscoverage['qunit.js'][188]++;
  next.style.display = display === "none"? "block": "none";
}));
    _$jscoverage['qunit.js'][191]++;
    addEvent(b, "dblclick", (function (e) {
  _$jscoverage['qunit.js'][192]++;
  var target = e && e.target? e.target: window.event.srcElement;
  _$jscoverage['qunit.js'][193]++;
  if (target.nodeName.toLowerCase() === "strong") {
    _$jscoverage['qunit.js'][194]++;
    var text = "", node = target.firstChild;
    _$jscoverage['qunit.js'][196]++;
    while (node.nodeType === 3) {
      _$jscoverage['qunit.js'][197]++;
      text += node.nodeValue;
      _$jscoverage['qunit.js'][198]++;
      node = node.nextSibling;
}
    _$jscoverage['qunit.js'][201]++;
    text = text.replace(/(^\s*|\s*$)/g, "");
    _$jscoverage['qunit.js'][203]++;
    if (window.location) {
      _$jscoverage['qunit.js'][204]++;
      window.location.href = window.location.href.match(/^(.+?)(\?.*)?$/)[1] + "?" + encodeURIComponent(text);
    }
  }
}));
    _$jscoverage['qunit.js'][209]++;
    var li = document.createElement("li");
    _$jscoverage['qunit.js'][210]++;
    li.className = bad? "fail": "pass";
    _$jscoverage['qunit.js'][211]++;
    li.appendChild(b);
    _$jscoverage['qunit.js'][212]++;
    li.appendChild(ol);
    _$jscoverage['qunit.js'][213]++;
    tests.appendChild(li);
    _$jscoverage['qunit.js'][215]++;
    if (bad) {
      _$jscoverage['qunit.js'][216]++;
      var toolbar = id("qunit-testrunner-toolbar");
      _$jscoverage['qunit.js'][217]++;
      if (toolbar) {
        _$jscoverage['qunit.js'][218]++;
        toolbar.style.display = "block";
        _$jscoverage['qunit.js'][219]++;
        id("qunit-filter-pass").disabled = null;
        _$jscoverage['qunit.js'][220]++;
        id("qunit-filter-missing").disabled = null;
      }
    }
  }
  else {
    _$jscoverage['qunit.js'][225]++;
    for (var i = 0; i < config.assertions.length; i++) {
      _$jscoverage['qunit.js'][226]++;
      if (! config.assertions[i].result) {
        _$jscoverage['qunit.js'][227]++;
        bad++;
        _$jscoverage['qunit.js'][228]++;
        config.stats.bad++;
        _$jscoverage['qunit.js'][229]++;
        config.moduleStats.bad++;
      }
}
  }
  _$jscoverage['qunit.js'][234]++;
  QUnit.testDone(testName, bad, config.assertions.length);
  _$jscoverage['qunit.js'][236]++;
  if (! window.setTimeout && ! config.queue.length) {
    _$jscoverage['qunit.js'][237]++;
    done();
  }
}));
  _$jscoverage['qunit.js'][241]++;
  if (window.setTimeout && ! config.doneTimer) {
    _$jscoverage['qunit.js'][242]++;
    config.doneTimer = window.setTimeout((function () {
  _$jscoverage['qunit.js'][243]++;
  if (! config.queue.length) {
    _$jscoverage['qunit.js'][244]++;
    done();
  }
  else {
    _$jscoverage['qunit.js'][246]++;
    synchronize(done);
  }
}), 13);
  }
}), expect: (function (asserts) {
  _$jscoverage['qunit.js'][256]++;
  config.expected = asserts;
}), ok: (function (a, msg) {
  _$jscoverage['qunit.js'][264]++;
  QUnit.log(a, msg);
  _$jscoverage['qunit.js'][266]++;
  config.assertions.push({result: ! ! a, message: msg});
}), equals: (function (actual, expected, message) {
  _$jscoverage['qunit.js'][285]++;
  push(expected == actual, actual, expected, message);
}), same: (function (a, b, message) {
  _$jscoverage['qunit.js'][289]++;
  push(QUnit.equiv(a, b), a, b, message);
}), start: (function () {
  _$jscoverage['qunit.js'][294]++;
  if (window.setTimeout) {
    _$jscoverage['qunit.js'][295]++;
    window.setTimeout((function () {
  _$jscoverage['qunit.js'][296]++;
  if (config.timeout) {
    _$jscoverage['qunit.js'][297]++;
    clearTimeout(config.timeout);
  }
  _$jscoverage['qunit.js'][300]++;
  config.blocking = false;
  _$jscoverage['qunit.js'][301]++;
  process();
}), 13);
  }
  else {
    _$jscoverage['qunit.js'][304]++;
    config.blocking = false;
    _$jscoverage['qunit.js'][305]++;
    process();
  }
}), stop: (function (timeout) {
  _$jscoverage['qunit.js'][310]++;
  config.blocking = true;
  _$jscoverage['qunit.js'][312]++;
  if (timeout && window.setTimeout) {
    _$jscoverage['qunit.js'][313]++;
    config.timeout = window.setTimeout((function () {
  _$jscoverage['qunit.js'][314]++;
  QUnit.ok(false, "Test timed out");
  _$jscoverage['qunit.js'][315]++;
  QUnit.start();
}), timeout);
  }
}), reset: (function () {
  _$jscoverage['qunit.js'][324]++;
  if (window.jQuery) {
    _$jscoverage['qunit.js'][325]++;
    jQuery("#main").html(config.fixture);
    _$jscoverage['qunit.js'][326]++;
    jQuery.event.global = {};
    _$jscoverage['qunit.js'][327]++;
    jQuery.ajaxSettings = extend({}, config.ajaxSettings);
  }
}), triggerEvent: (function (elem, type, event) {
  _$jscoverage['qunit.js'][340]++;
  if (document.createEvent) {
    _$jscoverage['qunit.js'][341]++;
    event = document.createEvent("MouseEvents");
    _$jscoverage['qunit.js'][342]++;
    event.initMouseEvent(type, true, true, elem.ownerDocument.defaultView, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
    _$jscoverage['qunit.js'][344]++;
    elem.dispatchEvent(event);
  }
  else {
    _$jscoverage['qunit.js'][346]++;
    if (elem.fireEvent) {
      _$jscoverage['qunit.js'][347]++;
      elem.fireEvent("on" + type);
    }
  }
}), is: (function (type, obj) {
  _$jscoverage['qunit.js'][353]++;
  return Object.prototype.toString.call(obj) === "[object " + type + "]";
}), done: (function (failures, total) {
}), log: (function (result, message) {
}), testStart: (function (name) {
}), testDone: (function (name, failures, total) {
}), moduleStart: (function (name, testEnvironment) {
}), moduleDone: (function (name, failures, total) {
})};
  _$jscoverage['qunit.js'][366]++;
  var config = {queue: [], blocking: true};
  _$jscoverage['qunit.js'][375]++;
  (function () {
  _$jscoverage['qunit.js'][376]++;
  var location = window.location || {search: "", protocol: "file:"}, GETParams = location.search.slice(1).split("&");
  _$jscoverage['qunit.js'][379]++;
  for (var i = 0; i < GETParams.length; i++) {
    _$jscoverage['qunit.js'][380]++;
    GETParams[i] = decodeURIComponent(GETParams[i]);
    _$jscoverage['qunit.js'][381]++;
    if (GETParams[i] === "noglobals") {
      _$jscoverage['qunit.js'][382]++;
      GETParams.splice(i, 1);
      _$jscoverage['qunit.js'][383]++;
      i--;
      _$jscoverage['qunit.js'][384]++;
      config.noglobals = true;
    }
    else {
      _$jscoverage['qunit.js'][385]++;
      if (GETParams[i].search("=") > -1) {
        _$jscoverage['qunit.js'][386]++;
        GETParams.splice(i, 1);
        _$jscoverage['qunit.js'][387]++;
        i--;
      }
    }
}
  _$jscoverage['qunit.js'][392]++;
  config.filters = GETParams;
  _$jscoverage['qunit.js'][395]++;
  QUnit.isLocal = ! ! (location.protocol === "file:");
})();
  _$jscoverage['qunit.js'][400]++;
  if (typeof exports === "undefined" || typeof require === "undefined") {
    _$jscoverage['qunit.js'][401]++;
    extend(window, QUnit);
    _$jscoverage['qunit.js'][402]++;
    window.QUnit = QUnit;
  }
  else {
    _$jscoverage['qunit.js'][404]++;
    extend(exports, QUnit);
    _$jscoverage['qunit.js'][405]++;
    exports.QUnit = QUnit;
  }
  _$jscoverage['qunit.js'][408]++;
  if (typeof document === "undefined" || document.readyState === "complete") {
    _$jscoverage['qunit.js'][409]++;
    config.autorun = true;
  }
  _$jscoverage['qunit.js'][412]++;
  addEvent(window, "load", (function () {
  _$jscoverage['qunit.js'][414]++;
  var oldconfig = extend({}, config);
  _$jscoverage['qunit.js'][415]++;
  QUnit.init();
  _$jscoverage['qunit.js'][416]++;
  extend(config, oldconfig);
  _$jscoverage['qunit.js'][418]++;
  config.blocking = false;
  _$jscoverage['qunit.js'][420]++;
  var userAgent = id("qunit-userAgent");
  _$jscoverage['qunit.js'][421]++;
  if (userAgent) {
    _$jscoverage['qunit.js'][422]++;
    userAgent.innerHTML = navigator.userAgent;
  }
  _$jscoverage['qunit.js'][425]++;
  var toolbar = id("qunit-testrunner-toolbar");
  _$jscoverage['qunit.js'][426]++;
  if (toolbar) {
    _$jscoverage['qunit.js'][427]++;
    toolbar.style.display = "none";
    _$jscoverage['qunit.js'][451]++;
    var filter = document.createElement("input");
    _$jscoverage['qunit.js'][452]++;
    filter.type = "checkbox";
    _$jscoverage['qunit.js'][453]++;
    filter.id = "qunit-filter-pass";
    _$jscoverage['qunit.js'][454]++;
    filter.disabled = true;
    _$jscoverage['qunit.js'][455]++;
    addEvent(filter, "click", (function () {
  _$jscoverage['qunit.js'][456]++;
  var li = document.getElementsByTagName("li");
  _$jscoverage['qunit.js'][457]++;
  for (var i = 0; i < li.length; i++) {
    _$jscoverage['qunit.js'][458]++;
    if (li[i].className.indexOf("pass") > -1) {
      _$jscoverage['qunit.js'][459]++;
      li[i].style.display = filter.checked? "none": "";
    }
}
}));
    _$jscoverage['qunit.js'][463]++;
    toolbar.appendChild(filter);
    _$jscoverage['qunit.js'][465]++;
    var label = document.createElement("label");
    _$jscoverage['qunit.js'][466]++;
    label.setAttribute("for", "qunit-filter-pass");
    _$jscoverage['qunit.js'][467]++;
    label.innerHTML = "Hide passed tests";
    _$jscoverage['qunit.js'][468]++;
    toolbar.appendChild(label);
    _$jscoverage['qunit.js'][470]++;
    var missing = document.createElement("input");
    _$jscoverage['qunit.js'][471]++;
    missing.type = "checkbox";
    _$jscoverage['qunit.js'][472]++;
    missing.id = "qunit-filter-missing";
    _$jscoverage['qunit.js'][473]++;
    missing.disabled = true;
    _$jscoverage['qunit.js'][474]++;
    addEvent(missing, "click", (function () {
  _$jscoverage['qunit.js'][475]++;
  var li = document.getElementsByTagName("li");
  _$jscoverage['qunit.js'][476]++;
  for (var i = 0; i < li.length; i++) {
    _$jscoverage['qunit.js'][477]++;
    if (li[i].className.indexOf("fail") > -1 && li[i].innerHTML.indexOf("missing test - untested code is broken code") > -1) {
      _$jscoverage['qunit.js'][478]++;
      li[i].parentNode.parentNode.style.display = missing.checked? "none": "block";
    }
}
}));
    _$jscoverage['qunit.js'][482]++;
    toolbar.appendChild(missing);
    _$jscoverage['qunit.js'][484]++;
    label = document.createElement("label");
    _$jscoverage['qunit.js'][485]++;
    label.setAttribute("for", "qunit-filter-missing");
    _$jscoverage['qunit.js'][486]++;
    label.innerHTML = "Hide missing tests (untested code is broken code)";
    _$jscoverage['qunit.js'][487]++;
    toolbar.appendChild(label);
  }
  _$jscoverage['qunit.js'][490]++;
  var main = id("main");
  _$jscoverage['qunit.js'][491]++;
  if (main) {
    _$jscoverage['qunit.js'][492]++;
    config.fixture = main.innerHTML;
  }
  _$jscoverage['qunit.js'][495]++;
  if (window.jQuery) {
    _$jscoverage['qunit.js'][496]++;
    config.ajaxSettings = window.jQuery.ajaxSettings;
  }
  _$jscoverage['qunit.js'][499]++;
  QUnit.start();
}));
  _$jscoverage['qunit.js'][502]++;
  function done() {
    _$jscoverage['qunit.js'][503]++;
    if (config.doneTimer && window.clearTimeout) {
      _$jscoverage['qunit.js'][504]++;
      window.clearTimeout(config.doneTimer);
      _$jscoverage['qunit.js'][505]++;
      config.doneTimer = null;
    }
    _$jscoverage['qunit.js'][508]++;
    if (config.queue.length) {
      _$jscoverage['qunit.js'][509]++;
      config.doneTimer = window.setTimeout((function () {
  _$jscoverage['qunit.js'][510]++;
  if (! config.queue.length) {
    _$jscoverage['qunit.js'][511]++;
    done();
  }
  else {
    _$jscoverage['qunit.js'][513]++;
    synchronize(done);
  }
}), 13);
      _$jscoverage['qunit.js'][517]++;
      return;
    }
    _$jscoverage['qunit.js'][520]++;
    config.autorun = true;
    _$jscoverage['qunit.js'][523]++;
    if (config.currentModule) {
      _$jscoverage['qunit.js'][524]++;
      QUnit.moduleDone(config.currentModule, config.moduleStats.bad, config.moduleStats.all);
    }
    _$jscoverage['qunit.js'][527]++;
    var banner = id("qunit-banner"), tests = id("qunit-tests"), html = ["Tests completed in ", + new Date() - config.started, " milliseconds.<br/>", "<span class=\"passed\">", config.stats.all - config.stats.bad, "</span> tests of <span class=\"total\">", config.stats.all, "</span> passed, <span class=\"failed\">", config.stats.bad, "</span> failed."].join("");
    _$jscoverage['qunit.js'][533]++;
    if (banner) {
      _$jscoverage['qunit.js'][534]++;
      banner.className = (config.stats.bad? "qunit-fail": "qunit-pass");
    }
    _$jscoverage['qunit.js'][537]++;
    if (tests) {
      _$jscoverage['qunit.js'][538]++;
      var result = id("qunit-testresult");
      _$jscoverage['qunit.js'][540]++;
      if (! result) {
        _$jscoverage['qunit.js'][541]++;
        result = document.createElement("p");
        _$jscoverage['qunit.js'][542]++;
        result.id = "qunit-testresult";
        _$jscoverage['qunit.js'][543]++;
        result.className = "result";
        _$jscoverage['qunit.js'][544]++;
        tests.parentNode.insertBefore(result, tests.nextSibling);
      }
      _$jscoverage['qunit.js'][547]++;
      result.innerHTML = html;
    }
    _$jscoverage['qunit.js'][550]++;
    QUnit.done(config.stats.bad, config.stats.all);
}
  _$jscoverage['qunit.js'][553]++;
  function validTest(name) {
    _$jscoverage['qunit.js'][554]++;
    var i = config.filters.length, run = false;
    _$jscoverage['qunit.js'][557]++;
    if (! i) {
      _$jscoverage['qunit.js'][558]++;
      return true;
    }
    _$jscoverage['qunit.js'][561]++;
    while (i--) {
      _$jscoverage['qunit.js'][562]++;
      var filter = config.filters[i], not = filter.charAt(0) == "!";
      _$jscoverage['qunit.js'][565]++;
      if (not) {
        _$jscoverage['qunit.js'][566]++;
        filter = filter.slice(1);
      }
      _$jscoverage['qunit.js'][569]++;
      if (name.indexOf(filter) !== -1) {
        _$jscoverage['qunit.js'][570]++;
        return ! not;
      }
      _$jscoverage['qunit.js'][573]++;
      if (not) {
        _$jscoverage['qunit.js'][574]++;
        run = true;
      }
}
    _$jscoverage['qunit.js'][578]++;
    return run;
}
  _$jscoverage['qunit.js'][581]++;
  function push(result, actual, expected, message) {
    _$jscoverage['qunit.js'][582]++;
    message = message || (result? "okay": "failed");
    _$jscoverage['qunit.js'][583]++;
    QUnit.ok(result, result? message + ": " + expected: message + ", expected: " + QUnit.jsDump.parse(expected) + " result: " + QUnit.jsDump.parse(actual));
}
  _$jscoverage['qunit.js'][586]++;
  function synchronize(callback) {
    _$jscoverage['qunit.js'][587]++;
    config.queue.push(callback);
    _$jscoverage['qunit.js'][589]++;
    if (config.autorun && ! config.blocking) {
      _$jscoverage['qunit.js'][590]++;
      process();
    }
}
  _$jscoverage['qunit.js'][594]++;
  function process() {
    _$jscoverage['qunit.js'][595]++;
    while (config.queue.length && ! config.blocking) {
      _$jscoverage['qunit.js'][596]++;
      config.queue.shift()();
}
}
  _$jscoverage['qunit.js'][600]++;
  function saveGlobal() {
    _$jscoverage['qunit.js'][601]++;
    config.pollution = [];
    _$jscoverage['qunit.js'][603]++;
    if (config.noglobals) {
      _$jscoverage['qunit.js'][604]++;
      for (var key in window) {
        _$jscoverage['qunit.js'][605]++;
        config.pollution.push(key);
}
    }
}
  _$jscoverage['qunit.js'][610]++;
  function checkPollution(name) {
    _$jscoverage['qunit.js'][611]++;
    var old = config.pollution;
    _$jscoverage['qunit.js'][612]++;
    saveGlobal();
    _$jscoverage['qunit.js'][614]++;
    var newGlobals = diff(old, config.pollution);
    _$jscoverage['qunit.js'][615]++;
    if (newGlobals.length > 0) {
      _$jscoverage['qunit.js'][616]++;
      ok(false, "Introduced global variable(s): " + newGlobals.join(", "));
      _$jscoverage['qunit.js'][617]++;
      config.expected++;
    }
    _$jscoverage['qunit.js'][620]++;
    var deletedGlobals = diff(config.pollution, old);
    _$jscoverage['qunit.js'][621]++;
    if (deletedGlobals.length > 0) {
      _$jscoverage['qunit.js'][622]++;
      ok(false, "Deleted global variable(s): " + deletedGlobals.join(", "));
      _$jscoverage['qunit.js'][623]++;
      config.expected++;
    }
}
  _$jscoverage['qunit.js'][628]++;
  function diff(a, b) {
    _$jscoverage['qunit.js'][629]++;
    var result = a.slice();
    _$jscoverage['qunit.js'][630]++;
    for (var i = 0; i < result.length; i++) {
      _$jscoverage['qunit.js'][631]++;
      for (var j = 0; j < b.length; j++) {
        _$jscoverage['qunit.js'][632]++;
        if (result[i] === b[j]) {
          _$jscoverage['qunit.js'][633]++;
          result.splice(i, 1);
          _$jscoverage['qunit.js'][634]++;
          i--;
          _$jscoverage['qunit.js'][635]++;
          break;
        }
}
}
    _$jscoverage['qunit.js'][639]++;
    return result;
}
  _$jscoverage['qunit.js'][642]++;
  function fail(message, exception, callback) {
    _$jscoverage['qunit.js'][643]++;
    if (typeof console !== "undefined" && console.error && console.warn) {
      _$jscoverage['qunit.js'][644]++;
      console.error(message);
      _$jscoverage['qunit.js'][645]++;
      console.error(exception);
      _$jscoverage['qunit.js'][646]++;
      console.warn(callback.toString());
    }
    else {
      _$jscoverage['qunit.js'][648]++;
      if (window.opera && opera.postError) {
        _$jscoverage['qunit.js'][649]++;
        opera.postError(message, exception, callback.toString);
      }
    }
}
  _$jscoverage['qunit.js'][653]++;
  function extend(a, b) {
    _$jscoverage['qunit.js'][654]++;
    for (var prop in b) {
      _$jscoverage['qunit.js'][655]++;
      a[prop] = b[prop];
}
    _$jscoverage['qunit.js'][658]++;
    return a;
}
  _$jscoverage['qunit.js'][661]++;
  function addEvent(elem, type, fn) {
    _$jscoverage['qunit.js'][662]++;
    if (elem.addEventListener) {
      _$jscoverage['qunit.js'][663]++;
      elem.addEventListener(type, fn, false);
    }
    else {
      _$jscoverage['qunit.js'][664]++;
      if (elem.attachEvent) {
        _$jscoverage['qunit.js'][665]++;
        elem.attachEvent("on" + type, fn);
      }
      else {
        _$jscoverage['qunit.js'][667]++;
        fn();
      }
    }
}
  _$jscoverage['qunit.js'][671]++;
  function id(name) {
    _$jscoverage['qunit.js'][672]++;
    return ! ! (typeof document !== "undefined" && document && document.getElementById) && document.getElementById(name);
}
  _$jscoverage['qunit.js'][680]++;
  QUnit.equiv = (function () {
  _$jscoverage['qunit.js'][682]++;
  var innerEquiv;
  _$jscoverage['qunit.js'][683]++;
  var callers = [];
  _$jscoverage['qunit.js'][687]++;
  function hoozit(o) {
    _$jscoverage['qunit.js'][688]++;
    if (QUnit.is("String", o)) {
      _$jscoverage['qunit.js'][689]++;
      return "string";
    }
    else {
      _$jscoverage['qunit.js'][691]++;
      if (QUnit.is("Boolean", o)) {
        _$jscoverage['qunit.js'][692]++;
        return "boolean";
      }
      else {
        _$jscoverage['qunit.js'][694]++;
        if (QUnit.is("Number", o)) {
          _$jscoverage['qunit.js'][696]++;
          if (isNaN(o)) {
            _$jscoverage['qunit.js'][697]++;
            return "nan";
          }
          else {
            _$jscoverage['qunit.js'][699]++;
            return "number";
          }
        }
        else {
          _$jscoverage['qunit.js'][702]++;
          if (typeof o === "undefined") {
            _$jscoverage['qunit.js'][703]++;
            return "undefined";
          }
          else {
            _$jscoverage['qunit.js'][706]++;
            if (o === null) {
              _$jscoverage['qunit.js'][707]++;
              return "null";
            }
            else {
              _$jscoverage['qunit.js'][710]++;
              if (QUnit.is("Array", o)) {
                _$jscoverage['qunit.js'][711]++;
                return "array";
              }
              else {
                _$jscoverage['qunit.js'][714]++;
                if (QUnit.is("Date", o)) {
                  _$jscoverage['qunit.js'][715]++;
                  return "date";
                }
                else {
                  _$jscoverage['qunit.js'][721]++;
                  if (QUnit.is("RegExp", o)) {
                    _$jscoverage['qunit.js'][722]++;
                    return "regexp";
                  }
                  else {
                    _$jscoverage['qunit.js'][724]++;
                    if (typeof o === "object") {
                      _$jscoverage['qunit.js'][725]++;
                      return "object";
                    }
                    else {
                      _$jscoverage['qunit.js'][727]++;
                      if (QUnit.is("Function", o)) {
                        _$jscoverage['qunit.js'][728]++;
                        return "function";
                      }
                      else {
                        _$jscoverage['qunit.js'][730]++;
                        return undefined;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
}
  _$jscoverage['qunit.js'][735]++;
  function bindCallbacks(o, callbacks, args) {
    _$jscoverage['qunit.js'][736]++;
    var prop = hoozit(o);
    _$jscoverage['qunit.js'][737]++;
    if (prop) {
      _$jscoverage['qunit.js'][738]++;
      if (hoozit(callbacks[prop]) === "function") {
        _$jscoverage['qunit.js'][739]++;
        return callbacks[prop].apply(callbacks, args);
      }
      else {
        _$jscoverage['qunit.js'][741]++;
        return callbacks[prop];
      }
    }
}
  _$jscoverage['qunit.js'][746]++;
  var callbacks = (function () {
  _$jscoverage['qunit.js'][749]++;
  function useStrictEquality(b, a) {
    _$jscoverage['qunit.js'][750]++;
    if (b instanceof a.constructor || a instanceof b.constructor) {
      _$jscoverage['qunit.js'][754]++;
      return a == b;
    }
    else {
      _$jscoverage['qunit.js'][756]++;
      return a === b;
    }
}
  _$jscoverage['qunit.js'][760]++;
  return ({"string": useStrictEquality, "boolean": useStrictEquality, "number": useStrictEquality, "null": useStrictEquality, "undefined": useStrictEquality, "nan": (function (b) {
  _$jscoverage['qunit.js'][768]++;
  return isNaN(b);
}), "date": (function (b, a) {
  _$jscoverage['qunit.js'][772]++;
  return hoozit(b) === "date" && a.valueOf() === b.valueOf();
}), "regexp": (function (b, a) {
  _$jscoverage['qunit.js'][776]++;
  return hoozit(b) === "regexp" && a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline;
}), "function": (function () {
  _$jscoverage['qunit.js'][787]++;
  var caller = callers[callers.length - 1];
  _$jscoverage['qunit.js'][788]++;
  return caller !== Object && typeof caller !== "undefined";
}), "array": (function (b, a) {
  _$jscoverage['qunit.js'][793]++;
  var i;
  _$jscoverage['qunit.js'][794]++;
  var len;
  _$jscoverage['qunit.js'][797]++;
  if (! (hoozit(b) === "array")) {
    _$jscoverage['qunit.js'][798]++;
    return false;
  }
  _$jscoverage['qunit.js'][801]++;
  len = a.length;
  _$jscoverage['qunit.js'][802]++;
  if (len !== b.length) {
    _$jscoverage['qunit.js'][803]++;
    return false;
  }
  _$jscoverage['qunit.js'][805]++;
  for (i = 0; i < len; i++) {
    _$jscoverage['qunit.js'][806]++;
    if (! innerEquiv(a[i], b[i])) {
      _$jscoverage['qunit.js'][807]++;
      return false;
    }
}
  _$jscoverage['qunit.js'][810]++;
  return true;
}), "object": (function (b, a) {
  _$jscoverage['qunit.js'][814]++;
  var i;
  _$jscoverage['qunit.js'][815]++;
  var eq = true;
  _$jscoverage['qunit.js'][816]++;
  var aProperties = [], bProperties = [];
  _$jscoverage['qunit.js'][819]++;
  if (a.constructor !== b.constructor) {
    _$jscoverage['qunit.js'][820]++;
    return false;
  }
  _$jscoverage['qunit.js'][824]++;
  callers.push(a.constructor);
  _$jscoverage['qunit.js'][826]++;
  for (i in a) {
    _$jscoverage['qunit.js'][828]++;
    aProperties.push(i);
    _$jscoverage['qunit.js'][830]++;
    if (! innerEquiv(a[i], b[i])) {
      _$jscoverage['qunit.js'][831]++;
      eq = false;
    }
}
  _$jscoverage['qunit.js'][835]++;
  callers.pop();
  _$jscoverage['qunit.js'][837]++;
  for (i in b) {
    _$jscoverage['qunit.js'][838]++;
    bProperties.push(i);
}
  _$jscoverage['qunit.js'][842]++;
  return eq && innerEquiv(aProperties.sort(), bProperties.sort());
})});
})();
  _$jscoverage['qunit.js'][847]++;
  innerEquiv = (function () {
  _$jscoverage['qunit.js'][848]++;
  var args = Array.prototype.slice.apply(arguments);
  _$jscoverage['qunit.js'][849]++;
  if (args.length < 2) {
    _$jscoverage['qunit.js'][850]++;
    return true;
  }
  _$jscoverage['qunit.js'][853]++;
  return (function (a, b) {
  _$jscoverage['qunit.js'][854]++;
  if (a === b) {
    _$jscoverage['qunit.js'][855]++;
    return true;
  }
  else {
    _$jscoverage['qunit.js'][856]++;
    if (a === null || b === null || typeof a === "undefined" || typeof b === "undefined" || hoozit(a) !== hoozit(b)) {
      _$jscoverage['qunit.js'][857]++;
      return false;
    }
    else {
      _$jscoverage['qunit.js'][859]++;
      return bindCallbacks(a, callbacks, [b, a]);
    }
  }
})(args[0], args[1]) && arguments.callee.apply(this, args.splice(1, args.length - 1));
});
  _$jscoverage['qunit.js'][866]++;
  return innerEquiv;
})();
  _$jscoverage['qunit.js'][880]++;
  QUnit.jsDump = (function () {
  _$jscoverage['qunit.js'][881]++;
  function quote(str) {
    _$jscoverage['qunit.js'][882]++;
    return "\"" + str.toString().replace(/"/g, "\\\"") + "\"";
}
  _$jscoverage['qunit.js'][883]++;
  ;
  _$jscoverage['qunit.js'][884]++;
  function literal(o) {
    _$jscoverage['qunit.js'][885]++;
    return o + "";
}
  _$jscoverage['qunit.js'][886]++;
  ;
  _$jscoverage['qunit.js'][887]++;
  function join(pre, arr, post) {
    _$jscoverage['qunit.js'][888]++;
    var s = jsDump.separator(), base = jsDump.indent(), inner = jsDump.indent(1);
    _$jscoverage['qunit.js'][891]++;
    if (arr.join) {
      _$jscoverage['qunit.js'][892]++;
      arr = arr.join("," + s + inner);
    }
    _$jscoverage['qunit.js'][893]++;
    if (! arr) {
      _$jscoverage['qunit.js'][894]++;
      return pre + post;
    }
    _$jscoverage['qunit.js'][895]++;
    return [pre, inner + arr, base + post].join(s);
}
  _$jscoverage['qunit.js'][896]++;
  ;
  _$jscoverage['qunit.js'][897]++;
  function array(arr) {
    _$jscoverage['qunit.js'][898]++;
    var i = arr.length, ret = Array(i);
    _$jscoverage['qunit.js'][899]++;
    this.up();
    _$jscoverage['qunit.js'][900]++;
    while (i--) {
      _$jscoverage['qunit.js'][901]++;
      ret[i] = this.parse(arr[i]);
}
    _$jscoverage['qunit.js'][902]++;
    this.down();
    _$jscoverage['qunit.js'][903]++;
    return join("[", ret, "]");
}
  _$jscoverage['qunit.js'][904]++;
  ;
  _$jscoverage['qunit.js'][906]++;
  var reName = /^function (\w+)/;
  _$jscoverage['qunit.js'][908]++;
  var jsDump = {parse: (function (obj, type) {
  _$jscoverage['qunit.js'][910]++;
  var parser = this.parsers[type || this.typeOf(obj)];
  _$jscoverage['qunit.js'][911]++;
  type = typeof parser;
  _$jscoverage['qunit.js'][913]++;
  return type == "function"? parser.call(this, obj): type == "string"? parser: this.parsers.error;
}), typeOf: (function (obj) {
  _$jscoverage['qunit.js'][918]++;
  var type;
  _$jscoverage['qunit.js'][919]++;
  if (obj === null) {
    _$jscoverage['qunit.js'][920]++;
    type = "null";
  }
  else {
    _$jscoverage['qunit.js'][921]++;
    if (typeof obj === "undefined") {
      _$jscoverage['qunit.js'][922]++;
      type = "undefined";
    }
    else {
      _$jscoverage['qunit.js'][923]++;
      if (QUnit.is("RegExp", obj)) {
        _$jscoverage['qunit.js'][924]++;
        type = "regexp";
      }
      else {
        _$jscoverage['qunit.js'][925]++;
        if (QUnit.is("Date", obj)) {
          _$jscoverage['qunit.js'][926]++;
          type = "date";
        }
        else {
          _$jscoverage['qunit.js'][927]++;
          if (QUnit.is("Function", obj)) {
            _$jscoverage['qunit.js'][928]++;
            type = "function";
          }
          else {
            _$jscoverage['qunit.js'][929]++;
            if (QUnit.is("Array", obj)) {
              _$jscoverage['qunit.js'][930]++;
              type = "array";
            }
            else {
              _$jscoverage['qunit.js'][931]++;
              if (QUnit.is("Window", obj) || QUnit.is("global", obj)) {
                _$jscoverage['qunit.js'][932]++;
                type = "window";
              }
              else {
                _$jscoverage['qunit.js'][933]++;
                if (QUnit.is("HTMLDocument", obj)) {
                  _$jscoverage['qunit.js'][934]++;
                  type = "document";
                }
                else {
                  _$jscoverage['qunit.js'][935]++;
                  if (QUnit.is("HTMLCollection", obj) || QUnit.is("NodeList", obj)) {
                    _$jscoverage['qunit.js'][936]++;
                    type = "nodelist";
                  }
                  else {
                    _$jscoverage['qunit.js'][937]++;
                    if (/^\[object HTML/.test(Object.prototype.toString.call(obj))) {
                      _$jscoverage['qunit.js'][938]++;
                      type = "node";
                    }
                    else {
                      _$jscoverage['qunit.js'][940]++;
                      type = typeof obj;
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  _$jscoverage['qunit.js'][942]++;
  return type;
}), separator: (function () {
  _$jscoverage['qunit.js'][945]++;
  return this.multiline? this.HTML? "<br />": "\n": this.HTML? "&nbsp;": " ";
}), indent: (function (extra) {
  _$jscoverage['qunit.js'][948]++;
  if (! this.multiline) {
    _$jscoverage['qunit.js'][949]++;
    return "";
  }
  _$jscoverage['qunit.js'][950]++;
  var chr = this.indentChar;
  _$jscoverage['qunit.js'][951]++;
  if (this.HTML) {
    _$jscoverage['qunit.js'][952]++;
    chr = chr.replace(/\t/g, "   ").replace(/ /g, "&nbsp;");
  }
  _$jscoverage['qunit.js'][953]++;
  return Array(this._depth_ + (extra || 0)).join(chr);
}), up: (function (a) {
  _$jscoverage['qunit.js'][956]++;
  this._depth_ += a || 1;
}), down: (function (a) {
  _$jscoverage['qunit.js'][959]++;
  this._depth_ -= a || 1;
}), setParser: (function (name, parser) {
  _$jscoverage['qunit.js'][962]++;
  this.parsers[name] = parser;
}), quote: quote, literal: literal, join: join, _depth_: 1, parsers: {window: "[Window]", document: "[Document]", error: "[ERROR]", unknown: "[Unknown]", "null": "null", undefined: "undefined", "function": (function (fn) {
  _$jscoverage['qunit.js'][979]++;
  var ret = "function", name = "name" in fn? fn.name: (reName.exec(fn) || [])[1];
  _$jscoverage['qunit.js'][981]++;
  if (name) {
    _$jscoverage['qunit.js'][982]++;
    ret += " " + name;
  }
  _$jscoverage['qunit.js'][983]++;
  ret += "(";
  _$jscoverage['qunit.js'][985]++;
  ret = [ret, this.parse(fn, "functionArgs"), "){"].join("");
  _$jscoverage['qunit.js'][986]++;
  return join(ret, this.parse(fn, "functionCode"), "}");
}), array: array, nodelist: array, arguments: array, object: (function (map) {
  _$jscoverage['qunit.js'][992]++;
  var ret = [];
  _$jscoverage['qunit.js'][993]++;
  this.up();
  _$jscoverage['qunit.js'][994]++;
  for (var key in map) {
    _$jscoverage['qunit.js'][995]++;
    ret.push(this.parse(key, "key") + ": " + this.parse(map[key]));
}
  _$jscoverage['qunit.js'][996]++;
  this.down();
  _$jscoverage['qunit.js'][997]++;
  return join("{", ret, "}");
}), node: (function (node) {
  _$jscoverage['qunit.js'][1000]++;
  var open = this.HTML? "&lt;": "<", close = this.HTML? "&gt;": ">";
  _$jscoverage['qunit.js'][1003]++;
  var tag = node.nodeName.toLowerCase(), ret = open + tag;
  _$jscoverage['qunit.js'][1006]++;
  for (var a in this.DOMAttrs) {
    _$jscoverage['qunit.js'][1007]++;
    var val = node[this.DOMAttrs[a]];
    _$jscoverage['qunit.js'][1008]++;
    if (val) {
      _$jscoverage['qunit.js'][1009]++;
      ret += " " + a + "=" + this.parse(val, "attribute");
    }
}
  _$jscoverage['qunit.js'][1011]++;
  return ret + close + open + "/" + tag + close;
}), functionArgs: (function (fn) {
  _$jscoverage['qunit.js'][1014]++;
  var l = fn.length;
  _$jscoverage['qunit.js'][1015]++;
  if (! l) {
    _$jscoverage['qunit.js'][1015]++;
    return "";
  }
  _$jscoverage['qunit.js'][1017]++;
  var args = Array(l);
  _$jscoverage['qunit.js'][1018]++;
  while (l--) {
    _$jscoverage['qunit.js'][1019]++;
    args[l] = String.fromCharCode(97 + l);
}
  _$jscoverage['qunit.js'][1020]++;
  return " " + args.join(", ") + " ";
}), key: quote, functionCode: "[code]", attribute: quote, string: quote, date: quote, regexp: literal, number: literal, "boolean": literal}, DOMAttrs: {id: "id", name: "name", "class": "className"}, HTML: true, indentChar: "   ", multiline: true};
  _$jscoverage['qunit.js'][1041]++;
  return jsDump;
})();
})(this);
_$jscoverage['qunit.js'].source = ["<span class=\"c\">/*</span>","<span class=\"c\"> * QUnit - A JavaScript Unit Testing Framework</span>","<span class=\"c\"> * </span>","<span class=\"c\"> * http://docs.jquery.com/QUnit</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * Copyright (c) 2009 John Resig, J&#195;&#182;rn Zaefferer</span>","<span class=\"c\"> * Dual licensed under the MIT (MIT-LICENSE.txt)</span>","<span class=\"c\"> * and GPL (GPL-LICENSE.txt) licenses.</span>","<span class=\"c\"> */</span>","","<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">(</span>window<span class=\"k\">)</span> <span class=\"k\">{</span>","","<span class=\"k\">var</span> QUnit <span class=\"k\">=</span> <span class=\"k\">{</span>","","\t<span class=\"c\">// Initialize the configuration options</span>","\tinit<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\tconfig <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\t\tstats<span class=\"k\">:</span> <span class=\"k\">{</span> all<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span> bad<span class=\"k\">:</span> <span class=\"s\">0</span> <span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tmoduleStats<span class=\"k\">:</span> <span class=\"k\">{</span> all<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span> bad<span class=\"k\">:</span> <span class=\"s\">0</span> <span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tstarted<span class=\"k\">:</span> <span class=\"k\">+</span><span class=\"k\">new</span> Date<span class=\"k\">,</span>","\t\t\tblocking<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\tautorun<span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">,</span>","\t\t\tassertions<span class=\"k\">:</span> <span class=\"k\">[],</span>","\t\t\tfilters<span class=\"k\">:</span> <span class=\"k\">[],</span>","\t\t\tqueue<span class=\"k\">:</span> <span class=\"k\">[]</span>","\t\t<span class=\"k\">}</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">var</span> tests <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-tests\"</span><span class=\"k\">),</span>","\t\t\tbanner <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-banner\"</span><span class=\"k\">),</span>","\t\t\tresult <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-testresult\"</span><span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> tests <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\ttests<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> banner <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tbanner<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> result <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tresult<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>removeChild<span class=\"k\">(</span> result <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t","\t<span class=\"c\">// call on start of module test to prepend name to all tests</span>","\tmodule<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span> testEnvironment<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>currentModule <span class=\"k\">=</span> name<span class=\"k\">;</span>","","\t\tsynchronize<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>currentModule <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tQUnit<span class=\"k\">.</span>moduleDone<span class=\"k\">(</span> config<span class=\"k\">.</span>currentModule<span class=\"k\">,</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>bad<span class=\"k\">,</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>all <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\tconfig<span class=\"k\">.</span>currentModule <span class=\"k\">=</span> name<span class=\"k\">;</span>","\t\t\tconfig<span class=\"k\">.</span>moduleTestEnvironment <span class=\"k\">=</span> testEnvironment<span class=\"k\">;</span>","\t\t\tconfig<span class=\"k\">.</span>moduleStats <span class=\"k\">=</span> <span class=\"k\">{</span> all<span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span> bad<span class=\"k\">:</span> <span class=\"s\">0</span> <span class=\"k\">}</span><span class=\"k\">;</span>","","\t\t\tQUnit<span class=\"k\">.</span>moduleStart<span class=\"k\">(</span> name<span class=\"k\">,</span> testEnvironment <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\tasyncTest<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>testName<span class=\"k\">,</span> expected<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> arguments<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">2</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tcallback <span class=\"k\">=</span> expected<span class=\"k\">;</span>","\t\t\texpected <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\tQUnit<span class=\"k\">.</span>test<span class=\"k\">(</span>testName<span class=\"k\">,</span> expected<span class=\"k\">,</span> callback<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t","\ttest<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>testName<span class=\"k\">,</span> expected<span class=\"k\">,</span> callback<span class=\"k\">,</span> async<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> name <span class=\"k\">=</span> testName<span class=\"k\">,</span> testEnvironment<span class=\"k\">,</span> testEnvironmentArg<span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> arguments<span class=\"k\">.</span>length <span class=\"k\">===</span> <span class=\"s\">2</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tcallback <span class=\"k\">=</span> expected<span class=\"k\">;</span>","\t\t\texpected <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t\t<span class=\"c\">// is 2nd argument a testEnvironment?</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> expected <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> expected <span class=\"k\">===</span> <span class=\"s\">'object'</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\ttestEnvironmentArg <span class=\"k\">=</span>  expected<span class=\"k\">;</span>","\t\t\texpected <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>currentModule <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tname <span class=\"k\">=</span> config<span class=\"k\">.</span>currentModule <span class=\"k\">+</span> <span class=\"s\">\" module: \"</span> <span class=\"k\">+</span> name<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>validTest<span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\tsynchronize<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\tQUnit<span class=\"k\">.</span>testStart<span class=\"k\">(</span> testName <span class=\"k\">);</span>","","\t\t\ttestEnvironment <span class=\"k\">=</span> extend<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\t\tsetup<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","\t\t\t\tteardown<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{}</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span> config<span class=\"k\">.</span>moduleTestEnvironment<span class=\"k\">);</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span>testEnvironmentArg<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\textend<span class=\"k\">(</span>testEnvironment<span class=\"k\">,</span>testEnvironmentArg<span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"c\">// allow utility functions to access the current test environment</span>","\t\t\tQUnit<span class=\"k\">.</span>current_testEnvironment <span class=\"k\">=</span> testEnvironment<span class=\"k\">;</span>","\t\t\t","\t\t\tconfig<span class=\"k\">.</span>assertions <span class=\"k\">=</span> <span class=\"k\">[];</span>","\t\t\tconfig<span class=\"k\">.</span>expected <span class=\"k\">=</span> expected<span class=\"k\">;</span>","","\t\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>pollution <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tsaveGlobal<span class=\"k\">();</span>","\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\ttestEnvironment<span class=\"k\">.</span>setup<span class=\"k\">.</span>call<span class=\"k\">(</span>testEnvironment<span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tQUnit<span class=\"k\">.</span>ok<span class=\"k\">(</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"Setup failed on \"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> e<span class=\"k\">.</span>message <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> async <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tQUnit<span class=\"k\">.</span>stop<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\t\tcallback<span class=\"k\">.</span>call<span class=\"k\">(</span>testEnvironment<span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tfail<span class=\"k\">(</span><span class=\"s\">\"Test \"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\" died, exception and test follows\"</span><span class=\"k\">,</span> e<span class=\"k\">,</span> callback<span class=\"k\">);</span>","\t\t\t\tQUnit<span class=\"k\">.</span>ok<span class=\"k\">(</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"Died on test #\"</span> <span class=\"k\">+</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">+</span> <span class=\"s\">1</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> e<span class=\"k\">.</span>message <span class=\"k\">);</span>","\t\t\t\t<span class=\"c\">// else next test will carry the responsibility</span>","\t\t\t\tsaveGlobal<span class=\"k\">();</span>","","\t\t\t\t<span class=\"c\">// Restart the tests if they're blocking</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>blocking <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tstart<span class=\"k\">();</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\tsynchronize<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\t\tcheckPollution<span class=\"k\">();</span>","\t\t\t\ttestEnvironment<span class=\"k\">.</span>teardown<span class=\"k\">.</span>call<span class=\"k\">(</span>testEnvironment<span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tQUnit<span class=\"k\">.</span>ok<span class=\"k\">(</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"Teardown failed on \"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> e<span class=\"k\">.</span>message <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"k\">try</span> <span class=\"k\">{</span>","\t\t\t\tQUnit<span class=\"k\">.</span>reset<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">catch</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tfail<span class=\"k\">(</span><span class=\"s\">\"reset() failed, following Test \"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\", exception and reset fn follows\"</span><span class=\"k\">,</span> e<span class=\"k\">,</span> reset<span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>expected <span class=\"k\">&amp;&amp;</span> config<span class=\"k\">.</span>expected <span class=\"k\">!=</span> config<span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tQUnit<span class=\"k\">.</span>ok<span class=\"k\">(</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"Expected \"</span> <span class=\"k\">+</span> config<span class=\"k\">.</span>expected <span class=\"k\">+</span> <span class=\"s\">\" assertions, but \"</span> <span class=\"k\">+</span> config<span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">+</span> <span class=\"s\">\" were run\"</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"k\">var</span> good <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> bad <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span>","\t\t\t\ttests <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-tests\"</span><span class=\"k\">);</span>","","\t\t\tconfig<span class=\"k\">.</span>stats<span class=\"k\">.</span>all <span class=\"k\">+=</span> config<span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">;</span>","\t\t\tconfig<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>all <span class=\"k\">+=</span> config<span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">;</span>","","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> tests <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">var</span> ol  <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"ol\"</span><span class=\"k\">);</span>","\t\t\t\tol<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> <span class=\"s\">\"none\"</span><span class=\"k\">;</span>","","\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> config<span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> assertion <span class=\"k\">=</span> config<span class=\"k\">.</span>assertions<span class=\"k\">[</span>i<span class=\"k\">];</span>","","\t\t\t\t\t<span class=\"k\">var</span> li <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"li\"</span><span class=\"k\">);</span>","\t\t\t\t\tli<span class=\"k\">.</span>className <span class=\"k\">=</span> assertion<span class=\"k\">.</span>result <span class=\"k\">?</span> <span class=\"s\">\"pass\"</span> <span class=\"k\">:</span> <span class=\"s\">\"fail\"</span><span class=\"k\">;</span>","\t\t\t\t\tli<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> assertion<span class=\"k\">.</span>message <span class=\"k\">||</span> <span class=\"s\">\"(no message)\"</span><span class=\"k\">;</span>","\t\t\t\t\tol<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> li <span class=\"k\">);</span>","","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> assertion<span class=\"k\">.</span>result <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tgood<span class=\"k\">++;</span>","\t\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\t\tbad<span class=\"k\">++;</span>","\t\t\t\t\t\tconfig<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">++;</span>","\t\t\t\t\t\tconfig<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>bad<span class=\"k\">++;</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\t<span class=\"k\">var</span> b <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"strong\"</span><span class=\"k\">);</span>","\t\t\t\tb<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> name <span class=\"k\">+</span> <span class=\"s\">\" &lt;b style='color:black;'&gt;(&lt;b class='fail'&gt;\"</span> <span class=\"k\">+</span> bad <span class=\"k\">+</span> <span class=\"s\">\"&lt;/b&gt;, &lt;b class='pass'&gt;\"</span> <span class=\"k\">+</span> good <span class=\"k\">+</span> <span class=\"s\">\"&lt;/b&gt;, \"</span> <span class=\"k\">+</span> config<span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">+</span> <span class=\"s\">\")&lt;/b&gt;\"</span><span class=\"k\">;</span>","\t\t\t\t","\t\t\t\taddEvent<span class=\"k\">(</span>b<span class=\"k\">,</span> <span class=\"s\">\"click\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> next <span class=\"k\">=</span> b<span class=\"k\">.</span>nextSibling<span class=\"k\">,</span> display <span class=\"k\">=</span> next<span class=\"k\">.</span>style<span class=\"k\">.</span>display<span class=\"k\">;</span>","\t\t\t\t\tnext<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> display <span class=\"k\">===</span> <span class=\"s\">\"none\"</span> <span class=\"k\">?</span> <span class=\"s\">\"block\"</span> <span class=\"k\">:</span> <span class=\"s\">\"none\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\t\t\t","\t\t\t\taddEvent<span class=\"k\">(</span>b<span class=\"k\">,</span> <span class=\"s\">\"dblclick\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> target <span class=\"k\">=</span> e <span class=\"k\">&amp;&amp;</span> e<span class=\"k\">.</span>target <span class=\"k\">?</span> e<span class=\"k\">.</span>target <span class=\"k\">:</span> window<span class=\"k\">.</span>event<span class=\"k\">.</span>srcElement<span class=\"k\">;</span>","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> target<span class=\"k\">.</span>nodeName<span class=\"k\">.</span>toLowerCase<span class=\"k\">()</span> <span class=\"k\">===</span> <span class=\"s\">\"strong\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t<span class=\"k\">var</span> text <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> node <span class=\"k\">=</span> target<span class=\"k\">.</span>firstChild<span class=\"k\">;</span>","","\t\t\t\t\t\t<span class=\"k\">while</span> <span class=\"k\">(</span> node<span class=\"k\">.</span>nodeType <span class=\"k\">===</span> <span class=\"s\">3</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\ttext <span class=\"k\">+=</span> node<span class=\"k\">.</span>nodeValue<span class=\"k\">;</span>","\t\t\t\t\t\t\tnode <span class=\"k\">=</span> node<span class=\"k\">.</span>nextSibling<span class=\"k\">;</span>","\t\t\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\t\t\ttext <span class=\"k\">=</span> text<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/(^\\s*|\\s*$)/g</span><span class=\"k\">,</span> <span class=\"s\">\"\"</span><span class=\"k\">);</span>","","\t\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> window<span class=\"k\">.</span>location <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\t\twindow<span class=\"k\">.</span>location<span class=\"k\">.</span>href <span class=\"k\">=</span> window<span class=\"k\">.</span>location<span class=\"k\">.</span>href<span class=\"k\">.</span>match<span class=\"k\">(</span><span class=\"s\">/^(.+?)(\\?.*)?$/</span><span class=\"k\">)[</span><span class=\"s\">1</span><span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">\"?\"</span> <span class=\"k\">+</span> encodeURIComponent<span class=\"k\">(</span>text<span class=\"k\">);</span>","\t\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\t\t\t<span class=\"k\">var</span> li <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"li\"</span><span class=\"k\">);</span>","\t\t\t\tli<span class=\"k\">.</span>className <span class=\"k\">=</span> bad <span class=\"k\">?</span> <span class=\"s\">\"fail\"</span> <span class=\"k\">:</span> <span class=\"s\">\"pass\"</span><span class=\"k\">;</span>","\t\t\t\tli<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> b <span class=\"k\">);</span>","\t\t\t\tli<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> ol <span class=\"k\">);</span>","\t\t\t\ttests<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> li <span class=\"k\">);</span>","","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> bad <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> toolbar <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-testrunner-toolbar\"</span><span class=\"k\">);</span>","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> toolbar <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\ttoolbar<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> <span class=\"s\">\"block\"</span><span class=\"k\">;</span>","\t\t\t\t\t\tid<span class=\"k\">(</span><span class=\"s\">\"qunit-filter-pass\"</span><span class=\"k\">).</span>disabled <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t\t\t\t\t\tid<span class=\"k\">(</span><span class=\"s\">\"qunit-filter-missing\"</span><span class=\"k\">).</span>disabled <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">}</span>","","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> config<span class=\"k\">.</span>assertions<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>assertions<span class=\"k\">[</span>i<span class=\"k\">].</span>result <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t\tbad<span class=\"k\">++;</span>","\t\t\t\t\t\tconfig<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">++;</span>","\t\t\t\t\t\tconfig<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>bad<span class=\"k\">++;</span>","\t\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","","\t\t\tQUnit<span class=\"k\">.</span>testDone<span class=\"k\">(</span> testName<span class=\"k\">,</span> bad<span class=\"k\">,</span> config<span class=\"k\">.</span>assertions<span class=\"k\">.</span>length <span class=\"k\">);</span>","","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>window<span class=\"k\">.</span>setTimeout <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>queue<span class=\"k\">.</span>length <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tdone<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> window<span class=\"k\">.</span>setTimeout <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>doneTimer <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tconfig<span class=\"k\">.</span>doneTimer <span class=\"k\">=</span> window<span class=\"k\">.</span>setTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>queue<span class=\"k\">.</span>length <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tdone<span class=\"k\">();</span>","\t\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\t\tsynchronize<span class=\"k\">(</span> done <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"s\">13</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * Specify the number of expected assertions to gurantee that failed test (no assertions are run at all) don't slip through.</span>","<span class=\"c\">\t */</span>","\texpect<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>asserts<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>expected <span class=\"k\">=</span> asserts<span class=\"k\">;</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * Asserts true.</span>","<span class=\"c\">\t * @example ok( \"asdfasdf\".length &gt; 5, \"There must be at least 5 chars\" );</span>","<span class=\"c\">\t */</span>","\tok<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>a<span class=\"k\">,</span> msg<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>log<span class=\"k\">(</span>a<span class=\"k\">,</span> msg<span class=\"k\">);</span>","","\t\tconfig<span class=\"k\">.</span>assertions<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">{</span>","\t\t\tresult<span class=\"k\">:</span> <span class=\"k\">!!</span>a<span class=\"k\">,</span>","\t\t\tmessage<span class=\"k\">:</span> msg","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * Checks that the first two arguments are equal, with an optional message.</span>","<span class=\"c\">\t * Prints out both actual and expected values.</span>","<span class=\"c\">\t *</span>","<span class=\"c\">\t * Prefered to ok( actual == expected, message )</span>","<span class=\"c\">\t *</span>","<span class=\"c\">\t * @example equals( format(\"Received {0} bytes.\", 2), \"Received 2 bytes.\" );</span>","<span class=\"c\">\t *</span>","<span class=\"c\">\t * @param Object actual</span>","<span class=\"c\">\t * @param Object expected</span>","<span class=\"c\">\t * @param String message (optional)</span>","<span class=\"c\">\t */</span>","\tequals<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tpush<span class=\"k\">(</span>expected <span class=\"k\">==</span> actual<span class=\"k\">,</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message<span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t","\tsame<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tpush<span class=\"k\">(</span>QUnit<span class=\"k\">.</span>equiv<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">),</span> a<span class=\"k\">,</span> b<span class=\"k\">,</span> message<span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t","\tstart<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"c\">// A slight delay, to avoid any current callbacks</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> window<span class=\"k\">.</span>setTimeout <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\twindow<span class=\"k\">.</span>setTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>timeout <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tclearTimeout<span class=\"k\">(</span>config<span class=\"k\">.</span>timeout<span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","","\t\t\t\tconfig<span class=\"k\">.</span>blocking <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\t\tprocess<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"s\">13</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\tconfig<span class=\"k\">.</span>blocking <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","\t\t\tprocess<span class=\"k\">();</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t","\tstop<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>timeout<span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>blocking <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> timeout <span class=\"k\">&amp;&amp;</span> window<span class=\"k\">.</span>setTimeout <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tconfig<span class=\"k\">.</span>timeout <span class=\"k\">=</span> window<span class=\"k\">.</span>setTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t\tQUnit<span class=\"k\">.</span>ok<span class=\"k\">(</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"Test timed out\"</span> <span class=\"k\">);</span>","\t\t\t\tQUnit<span class=\"k\">.</span>start<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span> timeout<span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * Resets the test setup. Useful for tests that modify the DOM.</span>","<span class=\"c\">\t */</span>","\treset<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> window<span class=\"k\">.</span>jQuery <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tjQuery<span class=\"k\">(</span><span class=\"s\">\"#main\"</span><span class=\"k\">).</span>html<span class=\"k\">(</span> config<span class=\"k\">.</span>fixture <span class=\"k\">);</span>","\t\t\tjQuery<span class=\"k\">.</span>event<span class=\"k\">.</span>global <span class=\"k\">=</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","\t\t\tjQuery<span class=\"k\">.</span>ajaxSettings <span class=\"k\">=</span> extend<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> config<span class=\"k\">.</span>ajaxSettings<span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t","\t<span class=\"c\">/**</span>","<span class=\"c\">\t * Trigger an event on an element.</span>","<span class=\"c\">\t *</span>","<span class=\"c\">\t * @example triggerEvent( document.body, \"click\" );</span>","<span class=\"c\">\t *</span>","<span class=\"c\">\t * @param DOMElement elem</span>","<span class=\"c\">\t * @param String type</span>","<span class=\"c\">\t */</span>","\ttriggerEvent<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> elem<span class=\"k\">,</span> type<span class=\"k\">,</span> event <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> document<span class=\"k\">.</span>createEvent <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tevent <span class=\"k\">=</span> document<span class=\"k\">.</span>createEvent<span class=\"k\">(</span><span class=\"s\">\"MouseEvents\"</span><span class=\"k\">);</span>","\t\t\tevent<span class=\"k\">.</span>initMouseEvent<span class=\"k\">(</span>type<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> elem<span class=\"k\">.</span>ownerDocument<span class=\"k\">.</span>defaultView<span class=\"k\">,</span>","\t\t\t\t<span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">);</span>","\t\t\telem<span class=\"k\">.</span>dispatchEvent<span class=\"k\">(</span> event <span class=\"k\">);</span>","","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> elem<span class=\"k\">.</span>fireEvent <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\telem<span class=\"k\">.</span>fireEvent<span class=\"k\">(</span><span class=\"s\">\"on\"</span><span class=\"k\">+</span>type<span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t","\t<span class=\"c\">// Safe object type checking</span>","\tis<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span> type<span class=\"k\">,</span> obj <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>toString<span class=\"k\">.</span>call<span class=\"k\">(</span> obj <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"[object \"</span><span class=\"k\">+</span> type <span class=\"k\">+</span><span class=\"s\">\"]\"</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t","\t<span class=\"c\">// Logging callbacks</span>","\tdone<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>failures<span class=\"k\">,</span> total<span class=\"k\">)</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","\tlog<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>result<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","\ttestStart<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","\ttestDone<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span> failures<span class=\"k\">,</span> total<span class=\"k\">)</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","\tmoduleStart<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span> testEnvironment<span class=\"k\">)</span> <span class=\"k\">{}</span><span class=\"k\">,</span>","\tmoduleDone<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">(</span>name<span class=\"k\">,</span> failures<span class=\"k\">,</span> total<span class=\"k\">)</span> <span class=\"k\">{}</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">// Maintain internal state</span>","<span class=\"k\">var</span> config <span class=\"k\">=</span> <span class=\"k\">{</span>","\t<span class=\"c\">// The queue of tests to run</span>","\tqueue<span class=\"k\">:</span> <span class=\"k\">[],</span>","","\t<span class=\"c\">// block until document ready</span>","\tblocking<span class=\"k\">:</span> <span class=\"k\">true</span>","<span class=\"k\">}</span><span class=\"k\">;</span>","","<span class=\"c\">// Load paramaters</span>","<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> location <span class=\"k\">=</span> window<span class=\"k\">.</span>location <span class=\"k\">||</span> <span class=\"k\">{</span> search<span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">,</span> protocol<span class=\"k\">:</span> <span class=\"s\">\"file:\"</span> <span class=\"k\">}</span><span class=\"k\">,</span>","\t\tGETParams <span class=\"k\">=</span> location<span class=\"k\">.</span>search<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">).</span>split<span class=\"k\">(</span><span class=\"s\">'&amp;'</span><span class=\"k\">);</span>","","\t<span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> GETParams<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tGETParams<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> decodeURIComponent<span class=\"k\">(</span> GETParams<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">);</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> GETParams<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">===</span> <span class=\"s\">\"noglobals\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tGETParams<span class=\"k\">.</span>splice<span class=\"k\">(</span> i<span class=\"k\">,</span> <span class=\"s\">1</span> <span class=\"k\">);</span>","\t\t\ti<span class=\"k\">--;</span>","\t\t\tconfig<span class=\"k\">.</span>noglobals <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> GETParams<span class=\"k\">[</span>i<span class=\"k\">].</span>search<span class=\"k\">(</span><span class=\"s\">'='</span><span class=\"k\">)</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tGETParams<span class=\"k\">.</span>splice<span class=\"k\">(</span> i<span class=\"k\">,</span> <span class=\"s\">1</span> <span class=\"k\">);</span>","\t\t\ti<span class=\"k\">--;</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","\t","\t<span class=\"c\">// restrict modules/tests by get parameters</span>","\tconfig<span class=\"k\">.</span>filters <span class=\"k\">=</span> GETParams<span class=\"k\">;</span>","\t","\t<span class=\"c\">// Figure out if we're running the tests from a server or not</span>","\tQUnit<span class=\"k\">.</span>isLocal <span class=\"k\">=</span> <span class=\"k\">!!(</span>location<span class=\"k\">.</span>protocol <span class=\"k\">===</span> <span class=\"s\">'file:'</span><span class=\"k\">);</span>","<span class=\"k\">}</span><span class=\"k\">)();</span>","","<span class=\"c\">// Expose the API as global variables, unless an 'exports'</span>","<span class=\"c\">// object exists, in that case we assume we're in CommonJS</span>","<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> exports <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">||</span> <span class=\"k\">typeof</span> require <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\textend<span class=\"k\">(</span>window<span class=\"k\">,</span> QUnit<span class=\"k\">);</span>","\twindow<span class=\"k\">.</span>QUnit <span class=\"k\">=</span> QUnit<span class=\"k\">;</span>","<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\textend<span class=\"k\">(</span>exports<span class=\"k\">,</span> QUnit<span class=\"k\">);</span>","\texports<span class=\"k\">.</span>QUnit <span class=\"k\">=</span> QUnit<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> document <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">||</span> document<span class=\"k\">.</span>readyState <span class=\"k\">===</span> <span class=\"s\">\"complete\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\tconfig<span class=\"k\">.</span>autorun <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","<span class=\"k\">}</span>","","addEvent<span class=\"k\">(</span>window<span class=\"k\">,</span> <span class=\"s\">\"load\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"c\">// Initialize the config, saving the execution queue</span>","\t<span class=\"k\">var</span> oldconfig <span class=\"k\">=</span> extend<span class=\"k\">(</span><span class=\"k\">{}</span><span class=\"k\">,</span> config<span class=\"k\">);</span>","\tQUnit<span class=\"k\">.</span>init<span class=\"k\">();</span>","\textend<span class=\"k\">(</span>config<span class=\"k\">,</span> oldconfig<span class=\"k\">);</span>","","\tconfig<span class=\"k\">.</span>blocking <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","\t<span class=\"k\">var</span> userAgent <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-userAgent\"</span><span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> userAgent <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tuserAgent<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> navigator<span class=\"k\">.</span>userAgent<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","\t","\t<span class=\"k\">var</span> toolbar <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-testrunner-toolbar\"</span><span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> toolbar <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\ttoolbar<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> <span class=\"s\">\"none\"</span><span class=\"k\">;</span>","","\t\t<span class=\"c\">//BEGIN ETM -</span>","\t\t<span class=\"c\">/*</span>","<span class=\"c\">\t\tvar autoRun = document.createElement(\"input\");</span>","<span class=\"c\">\t\tautoRun.type = \"checkbox\";</span>","<span class=\"c\">\t\tautoRun.id = \"qunit-auto-run\";</span>","<span class=\"c\">\t\tautoRun.disabled = true;</span>","<span class=\"c\">\t\taddEvent( autoRun, \"click\", function() {</span>","<span class=\"c\">\t\t\tif (autoRun.checked) {</span>","<span class=\"c\">\t\t\t</span>","<span class=\"c\">\t\t\t} else {</span>","<span class=\"c\">\t\t\t\t</span>","<span class=\"c\">\t\t\t}</span>","<span class=\"c\">\t\t});</span>","<span class=\"c\">\t\ttoolbar.appendChild( autoRun );</span>","","<span class=\"c\">\t\tvar autoRunLabel = document.createElement(\"label\");</span>","<span class=\"c\">\t\tautoRunLabel.setAttribute(\"for\", \"qunit-auto-run\");</span>","<span class=\"c\">\t\tautoRunLabel.innerHTML = \"Auto Run Tests\";</span>","<span class=\"c\">\t\ttoolbar.appendChild( autoRunLabel );</span>","<span class=\"c\">\t\t*/</span>","\t\t<span class=\"c\">//END ETM - </span>","\t\t","\t\t<span class=\"k\">var</span> filter <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"input\"</span><span class=\"k\">);</span>","\t\tfilter<span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">\"checkbox\"</span><span class=\"k\">;</span>","\t\tfilter<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-filter-pass\"</span><span class=\"k\">;</span>","\t\tfilter<span class=\"k\">.</span>disabled <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\taddEvent<span class=\"k\">(</span> filter<span class=\"k\">,</span> <span class=\"s\">\"click\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">var</span> li <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"li\"</span><span class=\"k\">);</span>","\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> li<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> li<span class=\"k\">[</span>i<span class=\"k\">].</span>className<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"pass\"</span><span class=\"k\">)</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tli<span class=\"k\">[</span>i<span class=\"k\">].</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> filter<span class=\"k\">.</span>checked <span class=\"k\">?</span> <span class=\"s\">\"none\"</span> <span class=\"k\">:</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\ttoolbar<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> filter <span class=\"k\">);</span>","","\t\t<span class=\"k\">var</span> label <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"label\"</span><span class=\"k\">);</span>","\t\tlabel<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">\"for\"</span><span class=\"k\">,</span> <span class=\"s\">\"qunit-filter-pass\"</span><span class=\"k\">);</span>","\t\tlabel<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"Hide passed tests\"</span><span class=\"k\">;</span>","\t\ttoolbar<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> label <span class=\"k\">);</span>","","\t\t<span class=\"k\">var</span> missing <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"input\"</span><span class=\"k\">);</span>","\t\tmissing<span class=\"k\">.</span>type <span class=\"k\">=</span> <span class=\"s\">\"checkbox\"</span><span class=\"k\">;</span>","\t\tmissing<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-filter-missing\"</span><span class=\"k\">;</span>","\t\tmissing<span class=\"k\">.</span>disabled <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\taddEvent<span class=\"k\">(</span> missing<span class=\"k\">,</span> <span class=\"s\">\"click\"</span><span class=\"k\">,</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">var</span> li <span class=\"k\">=</span> document<span class=\"k\">.</span>getElementsByTagName<span class=\"k\">(</span><span class=\"s\">\"li\"</span><span class=\"k\">);</span>","\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> li<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> li<span class=\"k\">[</span>i<span class=\"k\">].</span>className<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">\"fail\"</span><span class=\"k\">)</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">&amp;&amp;</span> li<span class=\"k\">[</span>i<span class=\"k\">].</span>innerHTML<span class=\"k\">.</span>indexOf<span class=\"k\">(</span><span class=\"s\">'missing test - untested code is broken code'</span><span class=\"k\">)</span> <span class=\"k\">&gt;</span> <span class=\"k\">-</span> <span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\tli<span class=\"k\">[</span>i<span class=\"k\">].</span>parentNode<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>style<span class=\"k\">.</span>display <span class=\"k\">=</span> missing<span class=\"k\">.</span>checked <span class=\"k\">?</span> <span class=\"s\">\"none\"</span> <span class=\"k\">:</span> <span class=\"s\">\"block\"</span><span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">);</span>","\t\ttoolbar<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> missing <span class=\"k\">);</span>","","\t\tlabel <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"label\"</span><span class=\"k\">);</span>","\t\tlabel<span class=\"k\">.</span>setAttribute<span class=\"k\">(</span><span class=\"s\">\"for\"</span><span class=\"k\">,</span> <span class=\"s\">\"qunit-filter-missing\"</span><span class=\"k\">);</span>","\t\tlabel<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> <span class=\"s\">\"Hide missing tests (untested code is broken code)\"</span><span class=\"k\">;</span>","\t\ttoolbar<span class=\"k\">.</span>appendChild<span class=\"k\">(</span> label <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">var</span> main <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">'main'</span><span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> main <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>fixture <span class=\"k\">=</span> main<span class=\"k\">.</span>innerHTML<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> window<span class=\"k\">.</span>jQuery <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>ajaxSettings <span class=\"k\">=</span> window<span class=\"k\">.</span>jQuery<span class=\"k\">.</span>ajaxSettings<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\tQUnit<span class=\"k\">.</span>start<span class=\"k\">();</span>","<span class=\"k\">}</span><span class=\"k\">);</span>","","<span class=\"k\">function</span> done<span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>doneTimer <span class=\"k\">&amp;&amp;</span> window<span class=\"k\">.</span>clearTimeout <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\twindow<span class=\"k\">.</span>clearTimeout<span class=\"k\">(</span> config<span class=\"k\">.</span>doneTimer <span class=\"k\">);</span>","\t\tconfig<span class=\"k\">.</span>doneTimer <span class=\"k\">=</span> <span class=\"k\">null</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>queue<span class=\"k\">.</span>length <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>doneTimer <span class=\"k\">=</span> window<span class=\"k\">.</span>setTimeout<span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span><span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>queue<span class=\"k\">.</span>length <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tdone<span class=\"k\">();</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\tsynchronize<span class=\"k\">(</span> done <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span> <span class=\"s\">13</span><span class=\"k\">);</span>","","\t\t<span class=\"k\">return</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\tconfig<span class=\"k\">.</span>autorun <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","\t<span class=\"c\">// Log the last module results</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>currentModule <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tQUnit<span class=\"k\">.</span>moduleDone<span class=\"k\">(</span> config<span class=\"k\">.</span>currentModule<span class=\"k\">,</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>bad<span class=\"k\">,</span> config<span class=\"k\">.</span>moduleStats<span class=\"k\">.</span>all <span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">var</span> banner <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-banner\"</span><span class=\"k\">),</span>","\t\ttests <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-tests\"</span><span class=\"k\">),</span>","\t\thtml <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"s\">'Tests completed in '</span><span class=\"k\">,</span>","\t\t<span class=\"k\">+</span><span class=\"k\">new</span> Date <span class=\"k\">-</span> config<span class=\"k\">.</span>started<span class=\"k\">,</span> <span class=\"s\">' milliseconds.&lt;br/&gt;'</span><span class=\"k\">,</span>","\t\t<span class=\"s\">'&lt;span class=\"passed\"&gt;'</span><span class=\"k\">,</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>all <span class=\"k\">-</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">,</span> <span class=\"s\">'&lt;/span&gt; tests of &lt;span class=\"total\"&gt;'</span><span class=\"k\">,</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>all<span class=\"k\">,</span> <span class=\"s\">'&lt;/span&gt; passed, &lt;span class=\"failed\"&gt;'</span><span class=\"k\">,</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">,</span><span class=\"s\">'&lt;/span&gt; failed.'</span><span class=\"k\">].</span>join<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">);</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> banner <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tbanner<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"k\">(</span>config<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad <span class=\"k\">?</span> <span class=\"s\">\"qunit-fail\"</span> <span class=\"k\">:</span> <span class=\"s\">\"qunit-pass\"</span><span class=\"k\">);</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> tests <span class=\"k\">)</span> <span class=\"k\">{</span>\t","\t\t<span class=\"k\">var</span> result <span class=\"k\">=</span> id<span class=\"k\">(</span><span class=\"s\">\"qunit-testresult\"</span><span class=\"k\">);</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>result <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tresult <span class=\"k\">=</span> document<span class=\"k\">.</span>createElement<span class=\"k\">(</span><span class=\"s\">\"p\"</span><span class=\"k\">);</span>","\t\t\tresult<span class=\"k\">.</span>id <span class=\"k\">=</span> <span class=\"s\">\"qunit-testresult\"</span><span class=\"k\">;</span>","\t\t\tresult<span class=\"k\">.</span>className <span class=\"k\">=</span> <span class=\"s\">\"result\"</span><span class=\"k\">;</span>","\t\t\ttests<span class=\"k\">.</span>parentNode<span class=\"k\">.</span>insertBefore<span class=\"k\">(</span> result<span class=\"k\">,</span> tests<span class=\"k\">.</span>nextSibling <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\tresult<span class=\"k\">.</span>innerHTML <span class=\"k\">=</span> html<span class=\"k\">;</span>","\t<span class=\"k\">}</span>","","\tQUnit<span class=\"k\">.</span>done<span class=\"k\">(</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>bad<span class=\"k\">,</span> config<span class=\"k\">.</span>stats<span class=\"k\">.</span>all <span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> validTest<span class=\"k\">(</span> name <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> i <span class=\"k\">=</span> config<span class=\"k\">.</span>filters<span class=\"k\">.</span>length<span class=\"k\">,</span>","\t\trun <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>i <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span>","\t","\t<span class=\"k\">while</span> <span class=\"k\">(</span> i<span class=\"k\">--</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> filter <span class=\"k\">=</span> config<span class=\"k\">.</span>filters<span class=\"k\">[</span>i<span class=\"k\">],</span>","\t\t\tnot <span class=\"k\">=</span> filter<span class=\"k\">.</span>charAt<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">==</span> <span class=\"s\">'!'</span><span class=\"k\">;</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> not <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tfilter <span class=\"k\">=</span> filter<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> name<span class=\"k\">.</span>indexOf<span class=\"k\">(</span>filter<span class=\"k\">)</span> <span class=\"k\">!==</span> <span class=\"k\">-</span><span class=\"s\">1</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span> <span class=\"k\">!</span>not<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> not <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\trun <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">return</span> run<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> push<span class=\"k\">(</span>result<span class=\"k\">,</span> actual<span class=\"k\">,</span> expected<span class=\"k\">,</span> message<span class=\"k\">)</span> <span class=\"k\">{</span>","\tmessage <span class=\"k\">=</span> message <span class=\"k\">||</span> <span class=\"k\">(</span>result <span class=\"k\">?</span> <span class=\"s\">\"okay\"</span> <span class=\"k\">:</span> <span class=\"s\">\"failed\"</span><span class=\"k\">);</span>","\tQUnit<span class=\"k\">.</span>ok<span class=\"k\">(</span> result<span class=\"k\">,</span> result <span class=\"k\">?</span> message <span class=\"k\">+</span> <span class=\"s\">\": \"</span> <span class=\"k\">+</span> expected <span class=\"k\">:</span> message <span class=\"k\">+</span> <span class=\"s\">\", expected: \"</span> <span class=\"k\">+</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>parse<span class=\"k\">(</span>expected<span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">\" result: \"</span> <span class=\"k\">+</span> QUnit<span class=\"k\">.</span>jsDump<span class=\"k\">.</span>parse<span class=\"k\">(</span>actual<span class=\"k\">)</span> <span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> synchronize<span class=\"k\">(</span> callback <span class=\"k\">)</span> <span class=\"k\">{</span>","\tconfig<span class=\"k\">.</span>queue<span class=\"k\">.</span>push<span class=\"k\">(</span> callback <span class=\"k\">);</span>","","\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>autorun <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>blocking <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tprocess<span class=\"k\">();</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> process<span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">while</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>queue<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>config<span class=\"k\">.</span>blocking <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconfig<span class=\"k\">.</span>queue<span class=\"k\">.</span>shift<span class=\"k\">()();</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> saveGlobal<span class=\"k\">()</span> <span class=\"k\">{</span>","\tconfig<span class=\"k\">.</span>pollution <span class=\"k\">=</span> <span class=\"k\">[];</span>","\t","\t<span class=\"k\">if</span> <span class=\"k\">(</span> config<span class=\"k\">.</span>noglobals <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> key <span class=\"k\">in</span> window <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\tconfig<span class=\"k\">.</span>pollution<span class=\"k\">.</span>push<span class=\"k\">(</span> key <span class=\"k\">);</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> checkPollution<span class=\"k\">(</span> name <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> old <span class=\"k\">=</span> config<span class=\"k\">.</span>pollution<span class=\"k\">;</span>","\tsaveGlobal<span class=\"k\">();</span>","\t","\t<span class=\"k\">var</span> newGlobals <span class=\"k\">=</span> diff<span class=\"k\">(</span> old<span class=\"k\">,</span> config<span class=\"k\">.</span>pollution <span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> newGlobals<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tok<span class=\"k\">(</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"Introduced global variable(s): \"</span> <span class=\"k\">+</span> newGlobals<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">)</span> <span class=\"k\">);</span>","\t\tconfig<span class=\"k\">.</span>expected<span class=\"k\">++;</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">var</span> deletedGlobals <span class=\"k\">=</span> diff<span class=\"k\">(</span> config<span class=\"k\">.</span>pollution<span class=\"k\">,</span> old <span class=\"k\">);</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> deletedGlobals<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tok<span class=\"k\">(</span> <span class=\"k\">false</span><span class=\"k\">,</span> <span class=\"s\">\"Deleted global variable(s): \"</span> <span class=\"k\">+</span> deletedGlobals<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">\", \"</span><span class=\"k\">)</span> <span class=\"k\">);</span>","\t\tconfig<span class=\"k\">.</span>expected<span class=\"k\">++;</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"c\">// returns a new Array with the elements that are in a but not in b</span>","<span class=\"k\">function</span> diff<span class=\"k\">(</span> a<span class=\"k\">,</span> b <span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">var</span> result <span class=\"k\">=</span> a<span class=\"k\">.</span>slice<span class=\"k\">();</span>","\t<span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> result<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> j <span class=\"k\">&lt;</span> b<span class=\"k\">.</span>length<span class=\"k\">;</span> j<span class=\"k\">++</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> result<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">===</span> b<span class=\"k\">[</span>j<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\tresult<span class=\"k\">.</span>splice<span class=\"k\">(</span>i<span class=\"k\">,</span> <span class=\"s\">1</span><span class=\"k\">);</span>","\t\t\t\ti<span class=\"k\">--;</span>","\t\t\t\t<span class=\"k\">break</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t<span class=\"k\">}</span>","\t<span class=\"k\">}</span>","\t<span class=\"k\">return</span> result<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> fail<span class=\"k\">(</span>message<span class=\"k\">,</span> exception<span class=\"k\">,</span> callback<span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> console <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> console<span class=\"k\">.</span>error <span class=\"k\">&amp;&amp;</span> console<span class=\"k\">.</span>warn <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\tconsole<span class=\"k\">.</span>error<span class=\"k\">(</span>message<span class=\"k\">);</span>","\t\tconsole<span class=\"k\">.</span>error<span class=\"k\">(</span>exception<span class=\"k\">);</span>","\t\tconsole<span class=\"k\">.</span>warn<span class=\"k\">(</span>callback<span class=\"k\">.</span>toString<span class=\"k\">());</span>","","\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> window<span class=\"k\">.</span>opera <span class=\"k\">&amp;&amp;</span> opera<span class=\"k\">.</span>postError <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\topera<span class=\"k\">.</span>postError<span class=\"k\">(</span>message<span class=\"k\">,</span> exception<span class=\"k\">,</span> callback<span class=\"k\">.</span>toString<span class=\"k\">);</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> extend<span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> prop <span class=\"k\">in</span> b <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\ta<span class=\"k\">[</span>prop<span class=\"k\">]</span> <span class=\"k\">=</span> b<span class=\"k\">[</span>prop<span class=\"k\">];</span>","\t<span class=\"k\">}</span>","","\t<span class=\"k\">return</span> a<span class=\"k\">;</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> addEvent<span class=\"k\">(</span>elem<span class=\"k\">,</span> type<span class=\"k\">,</span> fn<span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">if</span> <span class=\"k\">(</span> elem<span class=\"k\">.</span>addEventListener <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\telem<span class=\"k\">.</span>addEventListener<span class=\"k\">(</span> type<span class=\"k\">,</span> fn<span class=\"k\">,</span> <span class=\"k\">false</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> elem<span class=\"k\">.</span>attachEvent <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\telem<span class=\"k\">.</span>attachEvent<span class=\"k\">(</span> <span class=\"s\">\"on\"</span> <span class=\"k\">+</span> type<span class=\"k\">,</span> fn <span class=\"k\">);</span>","\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\tfn<span class=\"k\">();</span>","\t<span class=\"k\">}</span>","<span class=\"k\">}</span>","","<span class=\"k\">function</span> id<span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","\t<span class=\"k\">return</span> <span class=\"k\">!!(</span><span class=\"k\">typeof</span> document <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> document <span class=\"k\">&amp;&amp;</span> document<span class=\"k\">.</span>getElementById<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span>","\t\tdocument<span class=\"k\">.</span>getElementById<span class=\"k\">(</span> name <span class=\"k\">);</span>","<span class=\"k\">}</span>","","<span class=\"c\">// Test for equality any JavaScript type.</span>","<span class=\"c\">// Discussions and reference: http://philrathe.com/articles/equiv</span>","<span class=\"c\">// Test suites: http://philrathe.com/tests/equiv</span>","<span class=\"c\">// Author: Philippe Rath&#195;&#169; &lt;prathe@gmail.com&gt;</span>","QUnit<span class=\"k\">.</span>equiv <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","","    <span class=\"k\">var</span> innerEquiv<span class=\"k\">;</span> <span class=\"c\">// the real equiv function</span>","    <span class=\"k\">var</span> callers <span class=\"k\">=</span> <span class=\"k\">[];</span> <span class=\"c\">// stack to decide between skip/abort functions</span>","","","    <span class=\"c\">// Determine what is o.</span>","    <span class=\"k\">function</span> hoozit<span class=\"k\">(</span>o<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"String\"</span><span class=\"k\">,</span> o<span class=\"k\">))</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">\"string\"</span><span class=\"k\">;</span>","            ","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"Boolean\"</span><span class=\"k\">,</span> o<span class=\"k\">))</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">\"boolean\"</span><span class=\"k\">;</span>","","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"Number\"</span><span class=\"k\">,</span> o<span class=\"k\">))</span> <span class=\"k\">{</span>","","            <span class=\"k\">if</span> <span class=\"k\">(</span>isNaN<span class=\"k\">(</span>o<span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"s\">\"nan\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"s\">\"number\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span>","","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> o <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">;</span>","","        <span class=\"c\">// consider: typeof null === object</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>o <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">\"null\"</span><span class=\"k\">;</span>","","        <span class=\"c\">// consider: typeof [] === object</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span> <span class=\"s\">\"Array\"</span><span class=\"k\">,</span> o<span class=\"k\">))</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">\"array\"</span><span class=\"k\">;</span>","        ","        <span class=\"c\">// consider: typeof new Date() === object</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span> <span class=\"s\">\"Date\"</span><span class=\"k\">,</span> o<span class=\"k\">))</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">\"date\"</span><span class=\"k\">;</span>","","        <span class=\"c\">// consider: /./ instanceof Object;</span>","        <span class=\"c\">//           /./ instanceof RegExp;</span>","        <span class=\"c\">//          typeof /./ === \"function\"; // =&gt; false in IE and Opera,</span>","        <span class=\"c\">//                                          true in FF and Safari</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span> <span class=\"s\">\"RegExp\"</span><span class=\"k\">,</span> o<span class=\"k\">))</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">\"regexp\"</span><span class=\"k\">;</span>","","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> o <span class=\"k\">===</span> <span class=\"s\">\"object\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">\"object\"</span><span class=\"k\">;</span>","","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span> <span class=\"s\">\"Function\"</span><span class=\"k\">,</span> o<span class=\"k\">))</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"s\">\"function\"</span><span class=\"k\">;</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> undefined<span class=\"k\">;</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Call the o related callback with the given arguments.</span>","    <span class=\"k\">function</span> bindCallbacks<span class=\"k\">(</span>o<span class=\"k\">,</span> callbacks<span class=\"k\">,</span> args<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">var</span> prop <span class=\"k\">=</span> hoozit<span class=\"k\">(</span>o<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>prop<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>hoozit<span class=\"k\">(</span>callbacks<span class=\"k\">[</span>prop<span class=\"k\">])</span> <span class=\"k\">===</span> <span class=\"s\">\"function\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> callbacks<span class=\"k\">[</span>prop<span class=\"k\">].</span>apply<span class=\"k\">(</span>callbacks<span class=\"k\">,</span> args<span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> callbacks<span class=\"k\">[</span>prop<span class=\"k\">];</span> <span class=\"c\">// or undefined</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","    <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> callbacks <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","","        <span class=\"c\">// for string, boolean, number and null</span>","        <span class=\"k\">function</span> useStrictEquality<span class=\"k\">(</span>b<span class=\"k\">,</span> a<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>b <span class=\"k\">instanceof</span> a<span class=\"k\">.</span>constructor <span class=\"k\">||</span> a <span class=\"k\">instanceof</span> b<span class=\"k\">.</span>constructor<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">// to catch short annotaion VS 'new' annotation of a declaration</span>","                <span class=\"c\">// e.g. var i = 1;</span>","                <span class=\"c\">//      var j = new Number(1);</span>","                <span class=\"k\">return</span> a <span class=\"k\">==</span> b<span class=\"k\">;</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> a <span class=\"k\">===</span> b<span class=\"k\">;</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> <span class=\"k\">{</span>","            <span class=\"s\">\"string\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","            <span class=\"s\">\"boolean\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","            <span class=\"s\">\"number\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","            <span class=\"s\">\"null\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","            <span class=\"s\">\"undefined\"</span><span class=\"k\">:</span> useStrictEquality<span class=\"k\">,</span>","","            <span class=\"s\">\"nan\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>b<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> isNaN<span class=\"k\">(</span>b<span class=\"k\">);</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            <span class=\"s\">\"date\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>b<span class=\"k\">,</span> a<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> hoozit<span class=\"k\">(</span>b<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"date\"</span> <span class=\"k\">&amp;&amp;</span> a<span class=\"k\">.</span>valueOf<span class=\"k\">()</span> <span class=\"k\">===</span> b<span class=\"k\">.</span>valueOf<span class=\"k\">();</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            <span class=\"s\">\"regexp\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>b<span class=\"k\">,</span> a<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> hoozit<span class=\"k\">(</span>b<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"regexp\"</span> <span class=\"k\">&amp;&amp;</span>","                    a<span class=\"k\">.</span>source <span class=\"k\">===</span> b<span class=\"k\">.</span>source <span class=\"k\">&amp;&amp;</span> <span class=\"c\">// the regex itself</span>","                    a<span class=\"k\">.</span>global <span class=\"k\">===</span> b<span class=\"k\">.</span>global <span class=\"k\">&amp;&amp;</span> <span class=\"c\">// and its modifers (gmi) ...</span>","                    a<span class=\"k\">.</span>ignoreCase <span class=\"k\">===</span> b<span class=\"k\">.</span>ignoreCase <span class=\"k\">&amp;&amp;</span>","                    a<span class=\"k\">.</span>multiline <span class=\"k\">===</span> b<span class=\"k\">.</span>multiline<span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            <span class=\"c\">// - skip when the property is a method of an instance (OOP)</span>","            <span class=\"c\">// - abort otherwise,</span>","            <span class=\"c\">//   initial === would have catch identical references anyway</span>","            <span class=\"s\">\"function\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> caller <span class=\"k\">=</span> callers<span class=\"k\">[</span>callers<span class=\"k\">.</span>length <span class=\"k\">-</span> <span class=\"s\">1</span><span class=\"k\">];</span>","                <span class=\"k\">return</span> caller <span class=\"k\">!==</span> Object <span class=\"k\">&amp;&amp;</span>","                        <span class=\"k\">typeof</span> caller <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            <span class=\"s\">\"array\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>b<span class=\"k\">,</span> a<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> i<span class=\"k\">;</span>","                <span class=\"k\">var</span> len<span class=\"k\">;</span>","","                <span class=\"c\">// b could be an object literal here</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span> <span class=\"k\">(</span>hoozit<span class=\"k\">(</span>b<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"s\">\"array\"</span><span class=\"k\">))</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                len <span class=\"k\">=</span> a<span class=\"k\">.</span>length<span class=\"k\">;</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span>len <span class=\"k\">!==</span> b<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"c\">// safe and faster</span>","                    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span> innerEquiv<span class=\"k\">(</span>a<span class=\"k\">[</span>i<span class=\"k\">],</span> b<span class=\"k\">[</span>i<span class=\"k\">]))</span> <span class=\"k\">{</span>","                        <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","            <span class=\"k\">}</span><span class=\"k\">,</span>","","            <span class=\"s\">\"object\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>b<span class=\"k\">,</span> a<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">var</span> i<span class=\"k\">;</span>","                <span class=\"k\">var</span> eq <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"c\">// unless we can proove it</span>","                <span class=\"k\">var</span> aProperties <span class=\"k\">=</span> <span class=\"k\">[],</span> bProperties <span class=\"k\">=</span> <span class=\"k\">[];</span> <span class=\"c\">// collection of strings</span>","","                <span class=\"c\">// comparing constructors is more strict than using instanceof</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span> a<span class=\"k\">.</span>constructor <span class=\"k\">!==</span> b<span class=\"k\">.</span>constructor<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                <span class=\"k\">}</span>","","                <span class=\"c\">// stack constructor before traversing properties</span>","                callers<span class=\"k\">.</span>push<span class=\"k\">(</span>a<span class=\"k\">.</span>constructor<span class=\"k\">);</span>","","                <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">in</span> a<span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"c\">// be strict: don't ensures hasOwnProperty and go deep</span>","","                    aProperties<span class=\"k\">.</span>push<span class=\"k\">(</span>i<span class=\"k\">);</span> <span class=\"c\">// collect a's properties</span>","","                    <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span> innerEquiv<span class=\"k\">(</span>a<span class=\"k\">[</span>i<span class=\"k\">],</span> b<span class=\"k\">[</span>i<span class=\"k\">]))</span> <span class=\"k\">{</span>","                        eq <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                <span class=\"k\">}</span>","","                callers<span class=\"k\">.</span>pop<span class=\"k\">();</span> <span class=\"c\">// unstack, we are done</span>","","                <span class=\"k\">for</span> <span class=\"k\">(</span>i <span class=\"k\">in</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","                    bProperties<span class=\"k\">.</span>push<span class=\"k\">(</span>i<span class=\"k\">);</span> <span class=\"c\">// collect b's properties</span>","                <span class=\"k\">}</span>","","                <span class=\"c\">// Ensures identical properties name</span>","                <span class=\"k\">return</span> eq <span class=\"k\">&amp;&amp;</span> innerEquiv<span class=\"k\">(</span>aProperties<span class=\"k\">.</span>sort<span class=\"k\">(),</span> bProperties<span class=\"k\">.</span>sort<span class=\"k\">());</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span><span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">();</span>","","    innerEquiv <span class=\"k\">=</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span> <span class=\"c\">// can take multiple arguments</span>","        <span class=\"k\">var</span> args <span class=\"k\">=</span> Array<span class=\"k\">.</span>prototype<span class=\"k\">.</span>slice<span class=\"k\">.</span>apply<span class=\"k\">(</span>arguments<span class=\"k\">);</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>args<span class=\"k\">.</span>length <span class=\"k\">&lt;</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"c\">// end transition</span>","        <span class=\"k\">}</span>","","        <span class=\"k\">return</span> <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>a<span class=\"k\">,</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span>a <span class=\"k\">===</span> b<span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span> <span class=\"c\">// catch the most you can</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>a <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">||</span> b <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">||</span> <span class=\"k\">typeof</span> a <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">||</span> <span class=\"k\">typeof</span> b <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">||</span> hoozit<span class=\"k\">(</span>a<span class=\"k\">)</span> <span class=\"k\">!==</span> hoozit<span class=\"k\">(</span>b<span class=\"k\">))</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"c\">// don't lose time with error prone cases</span>","            <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                <span class=\"k\">return</span> bindCallbacks<span class=\"k\">(</span>a<span class=\"k\">,</span> callbacks<span class=\"k\">,</span> <span class=\"k\">[</span>b<span class=\"k\">,</span> a<span class=\"k\">]);</span>","            <span class=\"k\">}</span>","","        <span class=\"c\">// apply transition with (1..n) arguments</span>","        <span class=\"k\">}</span><span class=\"k\">)(</span>args<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">],</span> args<span class=\"k\">[</span><span class=\"s\">1</span><span class=\"k\">])</span> <span class=\"k\">&amp;&amp;</span> arguments<span class=\"k\">.</span>callee<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">,</span> args<span class=\"k\">.</span>splice<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">,</span> args<span class=\"k\">.</span>length <span class=\"k\">-</span><span class=\"s\">1</span><span class=\"k\">));</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"k\">return</span> innerEquiv<span class=\"k\">;</span>","","<span class=\"k\">}</span><span class=\"k\">();</span>","","<span class=\"c\">/**</span>","<span class=\"c\"> * jsDump</span>","<span class=\"c\"> * Copyright (c) 2008 Ariel Flesler - aflesler(at)gmail(dot)com | http://flesler.blogspot.com</span>","<span class=\"c\"> * Licensed under BSD (http://www.opensource.org/licenses/bsd-license.php)</span>","<span class=\"c\"> * Date: 5/15/2008</span>","<span class=\"c\"> * @projectDescription Advanced and extensible data dumping for Javascript.</span>","<span class=\"c\"> * @version 1.0.0</span>","<span class=\"c\"> * @author Ariel Flesler</span>","<span class=\"c\"> * @link {http://flesler.blogspot.com/2008/05/jsdump-pretty-dump-of-any-javascript.html}</span>","<span class=\"c\"> */</span>","QUnit<span class=\"k\">.</span>jsDump <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t<span class=\"k\">function</span> quote<span class=\"k\">(</span> str <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> <span class=\"s\">'\"'</span> <span class=\"k\">+</span> str<span class=\"k\">.</span>toString<span class=\"k\">().</span>replace<span class=\"k\">(</span><span class=\"s\">/\"/g</span><span class=\"k\">,</span> <span class=\"s\">'</span><span class=\"t\">\\\\</span><span class=\"s\">\"'</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">'\"'</span><span class=\"k\">;</span>","\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t<span class=\"k\">function</span> literal<span class=\"k\">(</span> o <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">return</span> o <span class=\"k\">+</span> <span class=\"s\">''</span><span class=\"k\">;</span>\t","\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t<span class=\"k\">function</span> join<span class=\"k\">(</span> pre<span class=\"k\">,</span> arr<span class=\"k\">,</span> post <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> s <span class=\"k\">=</span> jsDump<span class=\"k\">.</span>separator<span class=\"k\">(),</span>","\t\t\tbase <span class=\"k\">=</span> jsDump<span class=\"k\">.</span>indent<span class=\"k\">(),</span>","\t\t\tinner <span class=\"k\">=</span> jsDump<span class=\"k\">.</span>indent<span class=\"k\">(</span><span class=\"s\">1</span><span class=\"k\">);</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> arr<span class=\"k\">.</span>join <span class=\"k\">)</span>","\t\t\tarr <span class=\"k\">=</span> arr<span class=\"k\">.</span>join<span class=\"k\">(</span> <span class=\"s\">','</span> <span class=\"k\">+</span> s <span class=\"k\">+</span> inner <span class=\"k\">);</span>","\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>arr <span class=\"k\">)</span>","\t\t\t<span class=\"k\">return</span> pre <span class=\"k\">+</span> post<span class=\"k\">;</span>","\t\t<span class=\"k\">return</span> <span class=\"k\">[</span> pre<span class=\"k\">,</span> inner <span class=\"k\">+</span> arr<span class=\"k\">,</span> base <span class=\"k\">+</span> post <span class=\"k\">].</span>join<span class=\"k\">(</span>s<span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t<span class=\"k\">function</span> array<span class=\"k\">(</span> arr <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t<span class=\"k\">var</span> i <span class=\"k\">=</span> arr<span class=\"k\">.</span>length<span class=\"k\">,</span>\tret <span class=\"k\">=</span> Array<span class=\"k\">(</span>i<span class=\"k\">);</span>\t\t\t\t\t","\t\t<span class=\"k\">this</span><span class=\"k\">.</span>up<span class=\"k\">();</span>","\t\t<span class=\"k\">while</span> <span class=\"k\">(</span> i<span class=\"k\">--</span> <span class=\"k\">)</span>","\t\t\tret<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>parse<span class=\"k\">(</span> arr<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">);</span>\t\t\t\t","\t\t<span class=\"k\">this</span><span class=\"k\">.</span>down<span class=\"k\">();</span>","\t\t<span class=\"k\">return</span> join<span class=\"k\">(</span> <span class=\"s\">'['</span><span class=\"k\">,</span> ret<span class=\"k\">,</span> <span class=\"s\">']'</span> <span class=\"k\">);</span>","\t<span class=\"k\">}</span><span class=\"k\">;</span>","\t","\t<span class=\"k\">var</span> reName <span class=\"k\">=</span> <span class=\"s\">/^function (\\w+)/</span><span class=\"k\">;</span>","\t","\t<span class=\"k\">var</span> jsDump <span class=\"k\">=</span> <span class=\"k\">{</span>","\t\tparse<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span> obj<span class=\"k\">,</span> type <span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"c\">//type is used mostly internally, you can fix a (custom)type in advance</span>","\t\t\t<span class=\"k\">var</span>\tparser <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>parsers<span class=\"k\">[</span> type <span class=\"k\">||</span> <span class=\"k\">this</span><span class=\"k\">.</span>typeOf<span class=\"k\">(</span>obj<span class=\"k\">)</span> <span class=\"k\">];</span>","\t\t\ttype <span class=\"k\">=</span> <span class=\"k\">typeof</span> parser<span class=\"k\">;</span>\t\t\t","\t\t\t","\t\t\t<span class=\"k\">return</span> type <span class=\"k\">==</span> <span class=\"s\">'function'</span> <span class=\"k\">?</span> parser<span class=\"k\">.</span>call<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">,</span> obj <span class=\"k\">)</span> <span class=\"k\">:</span>","\t\t\t\t   type <span class=\"k\">==</span> <span class=\"s\">'string'</span> <span class=\"k\">?</span> parser <span class=\"k\">:</span>","\t\t\t\t   <span class=\"k\">this</span><span class=\"k\">.</span>parsers<span class=\"k\">.</span>error<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\ttypeOf<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span> obj <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">var</span> type<span class=\"k\">;</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> obj <span class=\"k\">===</span> <span class=\"k\">null</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"null\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">typeof</span> obj <span class=\"k\">===</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"undefined\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"RegExp\"</span><span class=\"k\">,</span> obj<span class=\"k\">))</span> <span class=\"k\">{</span>","\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"regexp\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"Date\"</span><span class=\"k\">,</span> obj<span class=\"k\">))</span> <span class=\"k\">{</span>","\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"date\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"Function\"</span><span class=\"k\">,</span> obj<span class=\"k\">))</span> <span class=\"k\">{</span>","\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"function\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"Array\"</span><span class=\"k\">,</span> obj<span class=\"k\">))</span> <span class=\"k\">{</span>","\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"array\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"Window\"</span><span class=\"k\">,</span> obj<span class=\"k\">)</span> <span class=\"k\">||</span> QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"global\"</span><span class=\"k\">,</span> obj<span class=\"k\">))</span> <span class=\"k\">{</span>","\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"window\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"HTMLDocument\"</span><span class=\"k\">,</span> obj<span class=\"k\">))</span> <span class=\"k\">{</span>","\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"document\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"HTMLCollection\"</span><span class=\"k\">,</span> obj<span class=\"k\">)</span> <span class=\"k\">||</span> QUnit<span class=\"k\">.</span>is<span class=\"k\">(</span><span class=\"s\">\"NodeList\"</span><span class=\"k\">,</span> obj<span class=\"k\">))</span> <span class=\"k\">{</span>","\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"nodelist\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"s\">/^\\[object HTML/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>toString<span class=\"k\">.</span>call<span class=\"k\">(</span> obj <span class=\"k\">)))</span> <span class=\"k\">{</span>","\t\t\t\ttype <span class=\"k\">=</span> <span class=\"s\">\"node\"</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","\t\t\t\ttype <span class=\"k\">=</span> <span class=\"k\">typeof</span> obj<span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span>","\t\t\t<span class=\"k\">return</span> type<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\tseparator<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>multiline <span class=\"k\">?</span>\t<span class=\"k\">this</span><span class=\"k\">.</span>HTML <span class=\"k\">?</span> <span class=\"s\">'&lt;br /&gt;'</span> <span class=\"k\">:</span> <span class=\"s\">'</span><span class=\"t\">\\n</span><span class=\"s\">'</span> <span class=\"k\">:</span> <span class=\"k\">this</span><span class=\"k\">.</span>HTML <span class=\"k\">?</span> <span class=\"s\">'&amp;nbsp;'</span> <span class=\"k\">:</span> <span class=\"s\">' '</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\tindent<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span> extra <span class=\"k\">)</span> <span class=\"k\">{</span><span class=\"c\">// extra can be a number, shortcut for increasing-calling-decreasing</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span><span class=\"k\">this</span><span class=\"k\">.</span>multiline <span class=\"k\">)</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">var</span> chr <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>indentChar<span class=\"k\">;</span>","\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>HTML <span class=\"k\">)</span>","\t\t\t\tchr <span class=\"k\">=</span> chr<span class=\"k\">.</span>replace<span class=\"k\">(</span><span class=\"s\">/\\t/g</span><span class=\"k\">,</span><span class=\"s\">'   '</span><span class=\"k\">).</span>replace<span class=\"k\">(</span><span class=\"s\">/ /g</span><span class=\"k\">,</span><span class=\"s\">'&amp;nbsp;'</span><span class=\"k\">);</span>","\t\t\t<span class=\"k\">return</span> Array<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>_depth_ <span class=\"k\">+</span> <span class=\"k\">(</span>extra<span class=\"k\">||</span><span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">).</span>join<span class=\"k\">(</span>chr<span class=\"k\">);</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\tup<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span> a <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>_depth_ <span class=\"k\">+=</span> a <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\tdown<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span> a <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>_depth_ <span class=\"k\">-=</span> a <span class=\"k\">||</span> <span class=\"s\">1</span><span class=\"k\">;</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\tsetParser<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span> name<span class=\"k\">,</span> parser <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>parsers<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> parser<span class=\"k\">;</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t<span class=\"c\">// The next 3 are exposed so you can use them</span>","\t\tquote<span class=\"k\">:</span>quote<span class=\"k\">,</span> ","\t\tliteral<span class=\"k\">:</span>literal<span class=\"k\">,</span>","\t\tjoin<span class=\"k\">:</span>join<span class=\"k\">,</span>","\t\t<span class=\"c\">//</span>","\t\t_depth_<span class=\"k\">:</span> <span class=\"s\">1</span><span class=\"k\">,</span>","\t\t<span class=\"c\">// This is the list of parsers, to modify them, use jsDump.setParser</span>","\t\tparsers<span class=\"k\">:</span><span class=\"k\">{</span>","\t\t\twindow<span class=\"k\">:</span> <span class=\"s\">'[Window]'</span><span class=\"k\">,</span>","\t\t\tdocument<span class=\"k\">:</span> <span class=\"s\">'[Document]'</span><span class=\"k\">,</span>","\t\t\terror<span class=\"k\">:</span><span class=\"s\">'[ERROR]'</span><span class=\"k\">,</span> <span class=\"c\">//when no parser is found, shouldn't happen</span>","\t\t\tunknown<span class=\"k\">:</span> <span class=\"s\">'[Unknown]'</span><span class=\"k\">,</span>","\t\t\t<span class=\"s\">'null'</span><span class=\"k\">:</span><span class=\"s\">'null'</span><span class=\"k\">,</span>","\t\t\tundefined<span class=\"k\">:</span><span class=\"s\">'undefined'</span><span class=\"k\">,</span>","\t\t\t<span class=\"s\">'function'</span><span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span> fn <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">var</span> ret <span class=\"k\">=</span> <span class=\"s\">'function'</span><span class=\"k\">,</span>","\t\t\t\t\tname <span class=\"k\">=</span> <span class=\"s\">'name'</span> <span class=\"k\">in</span> fn <span class=\"k\">?</span> fn<span class=\"k\">.</span>name <span class=\"k\">:</span> <span class=\"k\">(</span>reName<span class=\"k\">.</span>exec<span class=\"k\">(</span>fn<span class=\"k\">)||[])[</span><span class=\"s\">1</span><span class=\"k\">];</span><span class=\"c\">//functions never have name in IE</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> name <span class=\"k\">)</span>","\t\t\t\t\tret <span class=\"k\">+=</span> <span class=\"s\">' '</span> <span class=\"k\">+</span> name<span class=\"k\">;</span>","\t\t\t\tret <span class=\"k\">+=</span> <span class=\"s\">'('</span><span class=\"k\">;</span>","\t\t\t\t","\t\t\t\tret <span class=\"k\">=</span> <span class=\"k\">[</span> ret<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>parse<span class=\"k\">(</span> fn<span class=\"k\">,</span> <span class=\"s\">'functionArgs'</span> <span class=\"k\">),</span> <span class=\"s\">'){'</span><span class=\"k\">].</span>join<span class=\"k\">(</span><span class=\"s\">''</span><span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">return</span> join<span class=\"k\">(</span> ret<span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">.</span>parse<span class=\"k\">(</span>fn<span class=\"k\">,</span><span class=\"s\">'functionCode'</span><span class=\"k\">),</span> <span class=\"s\">'}'</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tarray<span class=\"k\">:</span> array<span class=\"k\">,</span>","\t\t\tnodelist<span class=\"k\">:</span> array<span class=\"k\">,</span>","\t\t\targuments<span class=\"k\">:</span> array<span class=\"k\">,</span>","\t\t\tobject<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span> map <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">var</span> ret <span class=\"k\">=</span> <span class=\"k\">[</span> <span class=\"k\">];</span>","\t\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>up<span class=\"k\">();</span>","\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> key <span class=\"k\">in</span> map <span class=\"k\">)</span>","\t\t\t\t\tret<span class=\"k\">.</span>push<span class=\"k\">(</span> <span class=\"k\">this</span><span class=\"k\">.</span>parse<span class=\"k\">(</span>key<span class=\"k\">,</span><span class=\"s\">'key'</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">': '</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>parse<span class=\"k\">(</span>map<span class=\"k\">[</span>key<span class=\"k\">])</span> <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">this</span><span class=\"k\">.</span>down<span class=\"k\">();</span>","\t\t\t\t<span class=\"k\">return</span> join<span class=\"k\">(</span> <span class=\"s\">'{'</span><span class=\"k\">,</span> ret<span class=\"k\">,</span> <span class=\"s\">'}'</span> <span class=\"k\">);</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tnode<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span> node <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t<span class=\"k\">var</span> open <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>HTML <span class=\"k\">?</span> <span class=\"s\">'&amp;lt;'</span> <span class=\"k\">:</span> <span class=\"s\">'&lt;'</span><span class=\"k\">,</span>","\t\t\t\t\tclose <span class=\"k\">=</span> <span class=\"k\">this</span><span class=\"k\">.</span>HTML <span class=\"k\">?</span> <span class=\"s\">'&amp;gt;'</span> <span class=\"k\">:</span> <span class=\"s\">'&gt;'</span><span class=\"k\">;</span>","\t\t\t\t\t","\t\t\t\t<span class=\"k\">var</span> tag <span class=\"k\">=</span> node<span class=\"k\">.</span>nodeName<span class=\"k\">.</span>toLowerCase<span class=\"k\">(),</span>","\t\t\t\t\tret <span class=\"k\">=</span> open <span class=\"k\">+</span> tag<span class=\"k\">;</span>","\t\t\t\t\t","\t\t\t\t<span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> a <span class=\"k\">in</span> <span class=\"k\">this</span><span class=\"k\">.</span>DOMAttrs <span class=\"k\">)</span> <span class=\"k\">{</span>","\t\t\t\t\t<span class=\"k\">var</span> val <span class=\"k\">=</span> node<span class=\"k\">[</span><span class=\"k\">this</span><span class=\"k\">.</span>DOMAttrs<span class=\"k\">[</span>a<span class=\"k\">]];</span>","\t\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> val <span class=\"k\">)</span>","\t\t\t\t\t\tret <span class=\"k\">+=</span> <span class=\"s\">' '</span> <span class=\"k\">+</span> a <span class=\"k\">+</span> <span class=\"s\">'='</span> <span class=\"k\">+</span> <span class=\"k\">this</span><span class=\"k\">.</span>parse<span class=\"k\">(</span> val<span class=\"k\">,</span> <span class=\"s\">'attribute'</span> <span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">}</span>","\t\t\t\t<span class=\"k\">return</span> ret <span class=\"k\">+</span> close <span class=\"k\">+</span> open <span class=\"k\">+</span> <span class=\"s\">'/'</span> <span class=\"k\">+</span> tag <span class=\"k\">+</span> close<span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tfunctionArgs<span class=\"k\">:</span><span class=\"k\">function</span><span class=\"k\">(</span> fn <span class=\"k\">)</span> <span class=\"k\">{</span><span class=\"c\">//function calls it internally, it's the arguments part of the function</span>","\t\t\t\t<span class=\"k\">var</span> l <span class=\"k\">=</span> fn<span class=\"k\">.</span>length<span class=\"k\">;</span>","\t\t\t\t<span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>l <span class=\"k\">)</span> <span class=\"k\">return</span> <span class=\"s\">''</span><span class=\"k\">;</span>\t\t\t\t","\t\t\t\t","\t\t\t\t<span class=\"k\">var</span> args <span class=\"k\">=</span> Array<span class=\"k\">(</span>l<span class=\"k\">);</span>","\t\t\t\t<span class=\"k\">while</span> <span class=\"k\">(</span> l<span class=\"k\">--</span> <span class=\"k\">)</span>","\t\t\t\t\targs<span class=\"k\">[</span>l<span class=\"k\">]</span> <span class=\"k\">=</span> String<span class=\"k\">.</span>fromCharCode<span class=\"k\">(</span><span class=\"s\">97</span><span class=\"k\">+</span>l<span class=\"k\">);</span><span class=\"c\">//97 is 'a'</span>","\t\t\t\t<span class=\"k\">return</span> <span class=\"s\">' '</span> <span class=\"k\">+</span> args<span class=\"k\">.</span>join<span class=\"k\">(</span><span class=\"s\">', '</span><span class=\"k\">)</span> <span class=\"k\">+</span> <span class=\"s\">' '</span><span class=\"k\">;</span>","\t\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\t\tkey<span class=\"k\">:</span>quote<span class=\"k\">,</span> <span class=\"c\">//object calls it internally, the key part of an item in a map</span>","\t\t\tfunctionCode<span class=\"k\">:</span><span class=\"s\">'[code]'</span><span class=\"k\">,</span> <span class=\"c\">//function calls it internally, it's the content of the function</span>","\t\t\tattribute<span class=\"k\">:</span>quote<span class=\"k\">,</span> <span class=\"c\">//node calls it internally, it's an html attribute value</span>","\t\t\tstring<span class=\"k\">:</span>quote<span class=\"k\">,</span>","\t\t\tdate<span class=\"k\">:</span>quote<span class=\"k\">,</span>","\t\t\tregexp<span class=\"k\">:</span>literal<span class=\"k\">,</span> <span class=\"c\">//regex</span>","\t\t\tnumber<span class=\"k\">:</span>literal<span class=\"k\">,</span>","\t\t\t<span class=\"s\">'boolean'</span><span class=\"k\">:</span>literal","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\tDOMAttrs<span class=\"k\">:</span><span class=\"k\">{</span><span class=\"c\">//attributes to dump from nodes, name=&gt;realName</span>","\t\t\tid<span class=\"k\">:</span><span class=\"s\">'id'</span><span class=\"k\">,</span>","\t\t\tname<span class=\"k\">:</span><span class=\"s\">'name'</span><span class=\"k\">,</span>","\t\t\t<span class=\"s\">'class'</span><span class=\"k\">:</span><span class=\"s\">'className'</span>","\t\t<span class=\"k\">}</span><span class=\"k\">,</span>","\t\tHTML<span class=\"k\">:</span><span class=\"k\">true</span><span class=\"k\">,</span><span class=\"c\">//if true, entities are escaped ( &lt;, &gt;, \\t, space and \\n )</span>","\t\tindentChar<span class=\"k\">:</span><span class=\"s\">'   '</span><span class=\"k\">,</span><span class=\"c\">//indentation unit</span>","\t\tmultiline<span class=\"k\">:</span><span class=\"k\">true</span> <span class=\"c\">//if true, items in a collection, are separated by a \\n, else just a space.</span>","\t<span class=\"k\">}</span><span class=\"k\">;</span>","","\t<span class=\"k\">return</span> jsDump<span class=\"k\">;</span>","<span class=\"k\">}</span><span class=\"k\">)();</span>","","<span class=\"k\">}</span><span class=\"k\">)(</span><span class=\"k\">this</span><span class=\"k\">);</span>"];
