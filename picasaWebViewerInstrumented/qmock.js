/* automatically generated by JSCoverage - do not edit */
if (! top._$jscoverage) {
  top._$jscoverage = {};
}
var _$jscoverage = top._$jscoverage;
if (! _$jscoverage['qmock.js']) {
  _$jscoverage['qmock.js'] = [];
  _$jscoverage['qmock.js'][52] = 0;
  _$jscoverage['qmock.js'][60] = 0;
  _$jscoverage['qmock.js'][65] = 0;
  _$jscoverage['qmock.js'][70] = 0;
  _$jscoverage['qmock.js'][72] = 0;
  _$jscoverage['qmock.js'][74] = 0;
  _$jscoverage['qmock.js'][76] = 0;
  _$jscoverage['qmock.js'][79] = 0;
  _$jscoverage['qmock.js'][82] = 0;
  _$jscoverage['qmock.js'][88] = 0;
  _$jscoverage['qmock.js'][90] = 0;
  _$jscoverage['qmock.js'][92] = 0;
  _$jscoverage['qmock.js'][95] = 0;
  _$jscoverage['qmock.js'][97] = 0;
  _$jscoverage['qmock.js'][111] = 0;
  _$jscoverage['qmock.js'][113] = 0;
  _$jscoverage['qmock.js'][117] = 0;
  _$jscoverage['qmock.js'][121] = 0;
  _$jscoverage['qmock.js'][129] = 0;
  _$jscoverage['qmock.js'][130] = 0;
  _$jscoverage['qmock.js'][136] = 0;
  _$jscoverage['qmock.js'][141] = 0;
  _$jscoverage['qmock.js'][146] = 0;
  _$jscoverage['qmock.js'][148] = 0;
  _$jscoverage['qmock.js'][150] = 0;
  _$jscoverage['qmock.js'][153] = 0;
  _$jscoverage['qmock.js'][154] = 0;
  _$jscoverage['qmock.js'][158] = 0;
  _$jscoverage['qmock.js'][159] = 0;
  _$jscoverage['qmock.js'][162] = 0;
  _$jscoverage['qmock.js'][163] = 0;
  _$jscoverage['qmock.js'][165] = 0;
  _$jscoverage['qmock.js'][168] = 0;
  _$jscoverage['qmock.js'][170] = 0;
  _$jscoverage['qmock.js'][174] = 0;
  _$jscoverage['qmock.js'][175] = 0;
  _$jscoverage['qmock.js'][179] = 0;
  _$jscoverage['qmock.js'][180] = 0;
  _$jscoverage['qmock.js'][189] = 0;
  _$jscoverage['qmock.js'][192] = 0;
  _$jscoverage['qmock.js'][198] = 0;
  _$jscoverage['qmock.js'][199] = 0;
  _$jscoverage['qmock.js'][201] = 0;
  _$jscoverage['qmock.js'][202] = 0;
  _$jscoverage['qmock.js'][203] = 0;
  _$jscoverage['qmock.js'][209] = 0;
  _$jscoverage['qmock.js'][213] = 0;
  _$jscoverage['qmock.js'][216] = 0;
  _$jscoverage['qmock.js'][221] = 0;
  _$jscoverage['qmock.js'][223] = 0;
  _$jscoverage['qmock.js'][226] = 0;
  _$jscoverage['qmock.js'][227] = 0;
  _$jscoverage['qmock.js'][231] = 0;
  _$jscoverage['qmock.js'][232] = 0;
  _$jscoverage['qmock.js'][239] = 0;
  _$jscoverage['qmock.js'][240] = 0;
  _$jscoverage['qmock.js'][241] = 0;
  _$jscoverage['qmock.js'][245] = 0;
  _$jscoverage['qmock.js'][247] = 0;
  _$jscoverage['qmock.js'][252] = 0;
  _$jscoverage['qmock.js'][256] = 0;
  _$jscoverage['qmock.js'][259] = 0;
  _$jscoverage['qmock.js'][265] = 0;
  _$jscoverage['qmock.js'][274] = 0;
  _$jscoverage['qmock.js'][275] = 0;
  _$jscoverage['qmock.js'][278] = 0;
  _$jscoverage['qmock.js'][280] = 0;
  _$jscoverage['qmock.js'][281] = 0;
  _$jscoverage['qmock.js'][282] = 0;
  _$jscoverage['qmock.js'][287] = 0;
  _$jscoverage['qmock.js'][291] = 0;
  _$jscoverage['qmock.js'][297] = 0;
  _$jscoverage['qmock.js'][298] = 0;
  _$jscoverage['qmock.js'][299] = 0;
  _$jscoverage['qmock.js'][301] = 0;
  _$jscoverage['qmock.js'][309] = 0;
  _$jscoverage['qmock.js'][314] = 0;
  _$jscoverage['qmock.js'][315] = 0;
  _$jscoverage['qmock.js'][320] = 0;
  _$jscoverage['qmock.js'][321] = 0;
  _$jscoverage['qmock.js'][340] = 0;
  _$jscoverage['qmock.js'][343] = 0;
  _$jscoverage['qmock.js'][346] = 0;
  _$jscoverage['qmock.js'][350] = 0;
  _$jscoverage['qmock.js'][359] = 0;
  _$jscoverage['qmock.js'][366] = 0;
  _$jscoverage['qmock.js'][367] = 0;
  _$jscoverage['qmock.js'][369] = 0;
  _$jscoverage['qmock.js'][372] = 0;
  _$jscoverage['qmock.js'][378] = 0;
  _$jscoverage['qmock.js'][379] = 0;
  _$jscoverage['qmock.js'][383] = 0;
  _$jscoverage['qmock.js'][384] = 0;
  _$jscoverage['qmock.js'][387] = 0;
  _$jscoverage['qmock.js'][388] = 0;
  _$jscoverage['qmock.js'][391] = 0;
  _$jscoverage['qmock.js'][395] = 0;
  _$jscoverage['qmock.js'][396] = 0;
  _$jscoverage['qmock.js'][399] = 0;
  _$jscoverage['qmock.js'][404] = 0;
  _$jscoverage['qmock.js'][405] = 0;
  _$jscoverage['qmock.js'][410] = 0;
  _$jscoverage['qmock.js'][413] = 0;
  _$jscoverage['qmock.js'][414] = 0;
  _$jscoverage['qmock.js'][416] = 0;
  _$jscoverage['qmock.js'][417] = 0;
  _$jscoverage['qmock.js'][419] = 0;
  _$jscoverage['qmock.js'][421] = 0;
  _$jscoverage['qmock.js'][423] = 0;
  _$jscoverage['qmock.js'][427] = 0;
  _$jscoverage['qmock.js'][429] = 0;
  _$jscoverage['qmock.js'][431] = 0;
  _$jscoverage['qmock.js'][432] = 0;
  _$jscoverage['qmock.js'][440] = 0;
  _$jscoverage['qmock.js'][441] = 0;
  _$jscoverage['qmock.js'][445] = 0;
  _$jscoverage['qmock.js'][446] = 0;
  _$jscoverage['qmock.js'][447] = 0;
  _$jscoverage['qmock.js'][448] = 0;
  _$jscoverage['qmock.js'][449] = 0;
  _$jscoverage['qmock.js'][450] = 0;
  _$jscoverage['qmock.js'][451] = 0;
  _$jscoverage['qmock.js'][452] = 0;
  _$jscoverage['qmock.js'][453] = 0;
  _$jscoverage['qmock.js'][454] = 0;
  _$jscoverage['qmock.js'][455] = 0;
  _$jscoverage['qmock.js'][456] = 0;
  _$jscoverage['qmock.js'][458] = 0;
  _$jscoverage['qmock.js'][459] = 0;
  _$jscoverage['qmock.js'][461] = 0;
  _$jscoverage['qmock.js'][466] = 0;
  _$jscoverage['qmock.js'][467] = 0;
  _$jscoverage['qmock.js'][468] = 0;
  _$jscoverage['qmock.js'][472] = 0;
  _$jscoverage['qmock.js'][474] = 0;
  _$jscoverage['qmock.js'][477] = 0;
  _$jscoverage['qmock.js'][480] = 0;
  _$jscoverage['qmock.js'][483] = 0;
  _$jscoverage['qmock.js'][486] = 0;
  _$jscoverage['qmock.js'][489] = 0;
  _$jscoverage['qmock.js'][490] = 0;
  _$jscoverage['qmock.js'][491] = 0;
  _$jscoverage['qmock.js'][494] = 0;
  _$jscoverage['qmock.js'][495] = 0;
  _$jscoverage['qmock.js'][496] = 0;
  _$jscoverage['qmock.js'][497] = 0;
  _$jscoverage['qmock.js'][505] = 0;
  _$jscoverage['qmock.js'][508] = 0;
  _$jscoverage['qmock.js'][511] = 0;
  _$jscoverage['qmock.js'][513] = 0;
  _$jscoverage['qmock.js'][514] = 0;
  _$jscoverage['qmock.js'][521] = 0;
  _$jscoverage['qmock.js'][526] = 0;
  _$jscoverage['qmock.js'][527] = 0;
  _$jscoverage['qmock.js'][532] = 0;
  _$jscoverage['qmock.js'][539] = 0;
  _$jscoverage['qmock.js'][571] = 0;
  _$jscoverage['qmock.js'][574] = 0;
  _$jscoverage['qmock.js'][577] = 0;
  _$jscoverage['qmock.js'][578] = 0;
  _$jscoverage['qmock.js'][579] = 0;
  _$jscoverage['qmock.js'][583] = 0;
  _$jscoverage['qmock.js'][584] = 0;
  _$jscoverage['qmock.js'][588] = 0;
  _$jscoverage['qmock.js'][589] = 0;
  _$jscoverage['qmock.js'][590] = 0;
  _$jscoverage['qmock.js'][594] = 0;
  _$jscoverage['qmock.js'][595] = 0;
  _$jscoverage['qmock.js'][599] = 0;
  _$jscoverage['qmock.js'][600] = 0;
  _$jscoverage['qmock.js'][604] = 0;
  _$jscoverage['qmock.js'][605] = 0;
  _$jscoverage['qmock.js'][609] = 0;
  _$jscoverage['qmock.js'][610] = 0;
  _$jscoverage['qmock.js'][614] = 0;
  _$jscoverage['qmock.js'][615] = 0;
  _$jscoverage['qmock.js'][616] = 0;
  _$jscoverage['qmock.js'][618] = 0;
  _$jscoverage['qmock.js'][619] = 0;
  _$jscoverage['qmock.js'][623] = 0;
  _$jscoverage['qmock.js'][624] = 0;
  _$jscoverage['qmock.js'][625] = 0;
  _$jscoverage['qmock.js'][626] = 0;
  _$jscoverage['qmock.js'][630] = 0;
  _$jscoverage['qmock.js'][635] = 0;
  _$jscoverage['qmock.js'][636] = 0;
  _$jscoverage['qmock.js'][640] = 0;
  _$jscoverage['qmock.js'][644] = 0;
  _$jscoverage['qmock.js'][648] = 0;
  _$jscoverage['qmock.js'][651] = 0;
  _$jscoverage['qmock.js'][660] = 0;
  _$jscoverage['qmock.js'][661] = 0;
  _$jscoverage['qmock.js'][663] = 0;
  _$jscoverage['qmock.js'][666] = 0;
  _$jscoverage['qmock.js'][667] = 0;
  _$jscoverage['qmock.js'][673] = 0;
  _$jscoverage['qmock.js'][679] = 0;
  _$jscoverage['qmock.js'][680] = 0;
  _$jscoverage['qmock.js'][683] = 0;
  _$jscoverage['qmock.js'][688] = 0;
  _$jscoverage['qmock.js'][690] = 0;
  _$jscoverage['qmock.js'][694] = 0;
  _$jscoverage['qmock.js'][700] = 0;
  _$jscoverage['qmock.js'][701] = 0;
  _$jscoverage['qmock.js'][702] = 0;
  _$jscoverage['qmock.js'][706] = 0;
  _$jscoverage['qmock.js'][710] = 0;
  _$jscoverage['qmock.js'][729] = 0;
  _$jscoverage['qmock.js'][730] = 0;
  _$jscoverage['qmock.js'][742] = 0;
  _$jscoverage['qmock.js'][743] = 0;
  _$jscoverage['qmock.js'][744] = 0;
  _$jscoverage['qmock.js'][748] = 0;
  _$jscoverage['qmock.js'][749] = 0;
  _$jscoverage['qmock.js'][755] = 0;
  _$jscoverage['qmock.js'][759] = 0;
  _$jscoverage['qmock.js'][760] = 0;
  _$jscoverage['qmock.js'][763] = 0;
  _$jscoverage['qmock.js'][764] = 0;
  _$jscoverage['qmock.js'][765] = 0;
  _$jscoverage['qmock.js'][768] = 0;
  _$jscoverage['qmock.js'][769] = 0;
  _$jscoverage['qmock.js'][771] = 0;
  _$jscoverage['qmock.js'][772] = 0;
  _$jscoverage['qmock.js'][773] = 0;
  _$jscoverage['qmock.js'][777] = 0;
  _$jscoverage['qmock.js'][780] = 0;
  _$jscoverage['qmock.js'][781] = 0;
  _$jscoverage['qmock.js'][783] = 0;
  _$jscoverage['qmock.js'][785] = 0;
  _$jscoverage['qmock.js'][790] = 0;
  _$jscoverage['qmock.js'][791] = 0;
  _$jscoverage['qmock.js'][795] = 0;
  _$jscoverage['qmock.js'][796] = 0;
  _$jscoverage['qmock.js'][798] = 0;
  _$jscoverage['qmock.js'][803] = 0;
  _$jscoverage['qmock.js'][804] = 0;
  _$jscoverage['qmock.js'][805] = 0;
  _$jscoverage['qmock.js'][806] = 0;
  _$jscoverage['qmock.js'][807] = 0;
  _$jscoverage['qmock.js'][808] = 0;
  _$jscoverage['qmock.js'][813] = 0;
  _$jscoverage['qmock.js'][816] = 0;
  _$jscoverage['qmock.js'][817] = 0;
  _$jscoverage['qmock.js'][821] = 0;
  _$jscoverage['qmock.js'][823] = 0;
  _$jscoverage['qmock.js'][828] = 0;
  _$jscoverage['qmock.js'][829] = 0;
  _$jscoverage['qmock.js'][833] = 0;
  _$jscoverage['qmock.js'][835] = 0;
  _$jscoverage['qmock.js'][837] = 0;
  _$jscoverage['qmock.js'][840] = 0;
  _$jscoverage['qmock.js'][843] = 0;
  _$jscoverage['qmock.js'][844] = 0;
}
_$jscoverage['qmock.js'][52]++;
(function initialiseQMock(Mock, container) {
  _$jscoverage['qmock.js'][60]++;
  var undefined, slice = Array.prototype.slice;
  _$jscoverage['qmock.js'][65]++;
  function Variable() {
}
  _$jscoverage['qmock.js'][65]++;
  ;
  _$jscoverage['qmock.js'][70]++;
  function expose(obj, context, key) {
    _$jscoverage['qmock.js'][72]++;
    var cachedObj = obj;
    _$jscoverage['qmock.js'][74]++;
    context[key] = {get: (function () {
  _$jscoverage['qmock.js'][76]++;
  return obj;
}), set: (function () {
  _$jscoverage['qmock.js'][79]++;
  obj = arguments[0] || null;
}), restore: (function () {
  _$jscoverage['qmock.js'][82]++;
  obj = cachedObj;
})};
}
  _$jscoverage['qmock.js'][88]++;
  function createMockFromJSON(mockedMembers) {
    _$jscoverage['qmock.js'][90]++;
    if (! mockedMembers) {
      _$jscoverage['qmock.js'][90]++;
      return false;
    }
    _$jscoverage['qmock.js'][92]++;
    var propertyWhitelist = "calls min max";
    _$jscoverage['qmock.js'][95]++;
    for (var key in mockedMembers) {
      _$jscoverage['qmock.js'][97]++;
      var memberConfig = mockedMembers[key], isMethod = ! ! (memberConfig.value === undefined), member = this.expects.apply(member, (memberConfig.calls !== undefined)? [memberConfig.calls]: [memberConfig.min? memberConfig.min: 0, memberConfig.max? memberConfig.max: Infinity])[isMethod? "method": "property"](key);
      _$jscoverage['qmock.js'][111]++;
      if (isMethod) {
        _$jscoverage['qmock.js'][113]++;
      setExpectations:
        for (var expectation in memberConfig) {
          _$jscoverage['qmock.js'][117]++;
          if ((member[expectation] !== undefined) && (member[expectation].constructor === Function)) {
            _$jscoverage['qmock.js'][121]++;
            member[expectation][((expectation === "interface" || expectation === "accepts") && memberConfig[expectation].constructor === Array)? "apply": "call"](member, memberConfig[expectation]);
          }
          else {
            _$jscoverage['qmock.js'][129]++;
            if (! ! /propertyWhitelist/.test(expectation)) {
              _$jscoverage['qmock.js'][130]++;
              throwMockException("InvalidExpectationMethodCallException", member.name + "." + expectation, "Key to mutator method on mockedMember object", name);
            }
          }
}
      }
      else {
        _$jscoverage['qmock.js'][136]++;
        member.withValue(memberConfig.value);
      }
}
}
  _$jscoverage['qmock.js'][141]++;
  var assertObject = (function () {
  _$jscoverage['qmock.js'][146]++;
  var assertHash = (function () {
  _$jscoverage['qmock.js'][148]++;
  function isHash(obj) {
    _$jscoverage['qmock.js'][150]++;
    var result = false;
    _$jscoverage['qmock.js'][153]++;
    if (obj === undefined || obj === null) {
      _$jscoverage['qmock.js'][154]++;
      return result;
    }
    _$jscoverage['qmock.js'][158]++;
    obj.test = true;
    _$jscoverage['qmock.js'][159]++;
    result = ! ! obj.test;
    _$jscoverage['qmock.js'][162]++;
    if (result) {
      _$jscoverage['qmock.js'][163]++;
      delete obj.test;
    }
    _$jscoverage['qmock.js'][165]++;
    return result;
}
  _$jscoverage['qmock.js'][168]++;
  function assertHash(expected, actual, opt_strictValueChecking, opt_exceptionType, opt_exceptionHandler) {
    _$jscoverage['qmock.js'][170]++;
    var result = true;
    _$jscoverage['qmock.js'][174]++;
    if (arguments.length < 2) {
      _$jscoverage['qmock.js'][175]++;
      throw {type: "MissingParametersException", msg: "assertHash() requires at least an expected and actual parameter to be passed to interface"};
    }
    else {
      _$jscoverage['qmock.js'][179]++;
      if ((isHash(expected) === false) || (isHash(actual) === false)) {
        _$jscoverage['qmock.js'][180]++;
        throw {type: "MalformedArgumentsException", msg: "assertHash() requires the 'expected' and 'actual' parameters to be Hashes. Expected was: " + expected + ", actual was: " + actual};
      }
      else {
        _$jscoverage['qmock.js'][189]++;
      checkingMembers:
        for (var key in expected) {
          _$jscoverage['qmock.js'][192]++;
          if (expected.hasOwnProperty(key)) {
            _$jscoverage['qmock.js'][198]++;
            if (key in Object(actual)) {
              _$jscoverage['qmock.js'][199]++;
              result &= assertObject(expected[key], actual[key], opt_strictValueChecking, opt_exceptionType, opt_exceptionHandler);
            }
            else {
              _$jscoverage['qmock.js'][201]++;
              opt_exceptionHandler && opt_exceptionHandler("MissingHashKeyException", "assertHash", key, "not found on object");
              _$jscoverage['qmock.js'][202]++;
              result = false;
              _$jscoverage['qmock.js'][203]++;
              continue checkingMembers;
            }
          }
}
      }
    }
    _$jscoverage['qmock.js'][209]++;
    return ! ! result;
}
  _$jscoverage['qmock.js'][213]++;
  ;
  _$jscoverage['qmock.js'][213]++;
  ;
  _$jscoverage['qmock.js'][213]++;
  ;
  _$jscoverage['qmock.js'][213]++;
  ;
  _$jscoverage['qmock.js'][213]++;
  expose(isHash, assertHash, "_isHash");
  _$jscoverage['qmock.js'][216]++;
  return assertHash;
})();
  _$jscoverage['qmock.js'][221]++;
  function assertCollection(expected, actual, opt_strictValueChecking, opt_exceptionType, opt_exceptionHandler, opt_identifier) {
    _$jscoverage['qmock.js'][223]++;
    var result = true;
    _$jscoverage['qmock.js'][226]++;
    if (arguments.length < 2) {
      _$jscoverage['qmock.js'][227]++;
      throw {type: "MissingParametersException", msg: "assertCollection() requires at least an expected and actual parameter to be passed to interface"};
    }
    else {
      _$jscoverage['qmock.js'][231]++;
      if ((! expected || expected.length === undefined) || (! actual || actual.length === undefined)) {
        _$jscoverage['qmock.js'][232]++;
        throw {type: "MalformedArgumentsException", msg: "assertCollection() requires the 'expected' and 'actual' collection parameters to be an Array-like collection"};
      }
    }
    _$jscoverage['qmock.js'][239]++;
    if (expected.length !== actual.length) {
      _$jscoverage['qmock.js'][240]++;
      opt_exceptionHandler && opt_exceptionHandler("MismatchedNumberOfMembersException", opt_identifier || "Function()", expected.length, actual.length);
      _$jscoverage['qmock.js'][241]++;
      result = false;
    }
    else {
      _$jscoverage['qmock.js'][245]++;
      for (var i = 0, len = actual.length; i < len; i++) {
        _$jscoverage['qmock.js'][247]++;
        result &= assertObject(expected[i], actual[i], opt_strictValueChecking, opt_exceptionType, opt_exceptionHandler);
}
    }
    _$jscoverage['qmock.js'][252]++;
    return ! ! result;
}
  _$jscoverage['qmock.js'][256]++;
  function assertObject(expected, actual, opt_strictValueChecking, opt_exceptionType, opt_exceptionHandler) {
    _$jscoverage['qmock.js'][259]++;
    var expectedType = (expected !== null && expected !== undefined)? expected.constructor: expected;
    _$jscoverage['qmock.js'][265]++;
    isValue = isRegExp = isCollection = false, strictValueChecking = opt_strictValueChecking || false, exceptionType = opt_exceptionType || (strictValueChecking === true? "IncorrectArgumentValueException": "IncorrectArgumentTypeException"), nativeTypes = [Number, String, Boolean, Date, Function, Object, Array, RegExp, Variable], result = true, identifier = "getClass()";
    _$jscoverage['qmock.js'][274]++;
    function _compare(expected, actual, serialiser) {
      _$jscoverage['qmock.js'][275]++;
      return (expected && expected[serialiser] && expected[serialiser]()) === (actual && actual[serialiser] && actual[serialiser]());
}
    _$jscoverage['qmock.js'][278]++;
  assertNativeType:
    for (var i = 0, len = nativeTypes.length; i < len; i++) {
      _$jscoverage['qmock.js'][280]++;
      if (expected === nativeTypes[i]) {
        _$jscoverage['qmock.js'][281]++;
        expectedType = expected;
        _$jscoverage['qmock.js'][282]++;
        break assertNativeType;
      }
}
    _$jscoverage['qmock.js'][287]++;
    switch (expectedType) {
    case Variable:
      _$jscoverage['qmock.js'][291]++;
      break;
    case null:
    case undefined:
      _$jscoverage['qmock.js'][297]++;
      if (expected !== actual) {
        _$jscoverage['qmock.js'][298]++;
        opt_exceptionHandler && opt_exceptionHandler(exceptionType, identifier, expected, actual);
        _$jscoverage['qmock.js'][299]++;
        result = false;
      }
      _$jscoverage['qmock.js'][301]++;
      break;
    case Date:
    case Number:
    case String:
    case Boolean:
      _$jscoverage['qmock.js'][309]++;
      isValue = true;
    default:
      _$jscoverage['qmock.js'][314]++;
      if (expectedType === RegExp) {
        _$jscoverage['qmock.js'][315]++;
        isRegExp = true;
      }
      _$jscoverage['qmock.js'][320]++;
      if (expected.hasOwnProperty && expected.hasOwnProperty("length")) {
        _$jscoverage['qmock.js'][321]++;
        isCollection = true;
      }
      _$jscoverage['qmock.js'][340]++;
      if (Object(actual) instanceof expectedType || actual === expectedType) {
        _$jscoverage['qmock.js'][343]++;
        if (strictValueChecking === true) {
          _$jscoverage['qmock.js'][346]++;
          try {
            _$jscoverage['qmock.js'][350]++;
            if ((isValue === true && ! _compare(expected, actual, "valueOf")) || (isRegExp === true && ! _compare(expected, actual, "toString")) || ((isValue === false) && (actual !== expectedType) && (((isCollection === true)? assertCollection: assertHash)(expected, actual, true, exceptionType, (isCollection === true)? null: opt_exceptionHandler) === false))) {
              _$jscoverage['qmock.js'][359]++;
              result = false;
            }
          }
          catch (error) {
            _$jscoverage['qmock.js'][366]++;
            if (error && error.type && error.type === "MalformedArgumentsException") {
              _$jscoverage['qmock.js'][367]++;
              opt_exceptionHandler && opt_exceptionHandler(error.type, identifier, expected, actual);
            }
            else {
              _$jscoverage['qmock.js'][369]++;
              throw error;
            }
            _$jscoverage['qmock.js'][372]++;
            result = false;
          }
        }
        else {
          _$jscoverage['qmock.js'][378]++;
          if ((expectedType === Object) && (actual && actual.constructor !== Object.prototype.constructor)) {
            _$jscoverage['qmock.js'][379]++;
            result = false;
          }
        }
      }
      else {
        _$jscoverage['qmock.js'][383]++;
        if (actual !== expectedType) {
          _$jscoverage['qmock.js'][384]++;
          result = false;
        }
      }
      _$jscoverage['qmock.js'][387]++;
      if (result === false) {
        _$jscoverage['qmock.js'][388]++;
        opt_exceptionHandler && opt_exceptionHandler(exceptionType, identifier, expected, actual);
      }
    }
    _$jscoverage['qmock.js'][391]++;
    return result;
}
  _$jscoverage['qmock.js'][395]++;
  ;
  _$jscoverage['qmock.js'][395]++;
  ;
  _$jscoverage['qmock.js'][395]++;
  ;
  _$jscoverage['qmock.js'][395]++;
  ;
  _$jscoverage['qmock.js'][395]++;
  expose(assertHash, assertObject, "_assertHash");
  _$jscoverage['qmock.js'][396]++;
  ;
  _$jscoverage['qmock.js'][396]++;
  ;
  _$jscoverage['qmock.js'][396]++;
  ;
  _$jscoverage['qmock.js'][396]++;
  ;
  _$jscoverage['qmock.js'][396]++;
  expose(assertCollection, assertObject, "_assertCollection");
  _$jscoverage['qmock.js'][399]++;
  return assertObject;
})();
  _$jscoverage['qmock.js'][404]++;
  function createException(exceptionType, objName, expected, actual) {
    _$jscoverage['qmock.js'][405]++;
    var e = {type: exceptionType}, fn = "'" + objName + "'";
    _$jscoverage['qmock.js'][410]++;
    switch (true) {
    case "IncorrectNumberOfArgumentsException" === exceptionType:
    case "MismatchedNumberOfMembersException" === exceptionType:
      _$jscoverage['qmock.js'][413]++;
      e.message = fn + " expected: " + expected + " items, actual number was: " + actual;
      _$jscoverage['qmock.js'][414]++;
      break;
    case "IncorrectNumberOfMethodCallsException" === exceptionType:
      _$jscoverage['qmock.js'][416]++;
      e.message = fn + " expected: " + expected + " method calls, actual number was: " + actual;
      _$jscoverage['qmock.js'][417]++;
      break;
    case "MissingHashKeyException":
      _$jscoverage['qmock.js'][419]++;
      e.message = fn + " expected: " + expected + " key/property to exist on 'actual' object, actual was: " + actual;
    default:
      _$jscoverage['qmock.js'][421]++;
      e.message = fn + " expected: " + expected + ", actual was: " + actual;
    }
    _$jscoverage['qmock.js'][423]++;
    return e;
}
  _$jscoverage['qmock.js'][427]++;
  function MockConstructor() {
    _$jscoverage['qmock.js'][429]++;
    var mock = (function MockObject() {
  _$jscoverage['qmock.js'][431]++;
  MockObject.actualArguments = arguments;
  _$jscoverage['qmock.js'][432]++;
  return MockObject;
}), methods = [], exceptions = [], identifier = assertObject(String, arguments && arguments[0])? arguments[0]: "'Constructor' (#protip - you can pass in a (String) when instantiating a new Mock, which helps inform constructor-level error messages)", assertCollection = assertObject._assertCollection.get();
    _$jscoverage['qmock.js'][440]++;
    function throwMockException() {
      _$jscoverage['qmock.js'][441]++;
      exceptions.push(createException.apply(null, arguments));
}
    _$jscoverage['qmock.js'][445]++;
    function MockedMember(min, max) {
      _$jscoverage['qmock.js'][446]++;
      this.name = "";
      _$jscoverage['qmock.js'][447]++;
      this.expectedCalls = (min !== undefined)? min: false;
      _$jscoverage['qmock.js'][448]++;
      this.maxCalls = max || false;
      _$jscoverage['qmock.js'][449]++;
      this.actualCalls = 0;
      _$jscoverage['qmock.js'][450]++;
      this.expectedArgs = [{"accepts": [undefined]}];
      _$jscoverage['qmock.js'][451]++;
      this.actualArgs = [];
      _$jscoverage['qmock.js'][452]++;
      this.callbackArgs = [];
      _$jscoverage['qmock.js'][453]++;
      this.requiredNumberofArguments = false;
      _$jscoverage['qmock.js'][454]++;
      this.allowOverload = true;
      _$jscoverage['qmock.js'][455]++;
      this.returnValue = undefined;
      _$jscoverage['qmock.js'][456]++;
      this.strictValueChecking = false;
      _$jscoverage['qmock.js'][458]++;
      methods.push(this);
}
    _$jscoverage['qmock.js'][459]++;
    ;
    _$jscoverage['qmock.js'][461]++;
    MockedMember.prototype = {"method": (function (name) {
  _$jscoverage['qmock.js'][466]++;
  if (mock[name] !== undefined) {
    _$jscoverage['qmock.js'][467]++;
    throwMockException("InvalidMethodNameException", "Constructor function", "unique method name", "was reserved method name '" + name + "'");
    _$jscoverage['qmock.js'][468]++;
    throw exceptions;
  }
  _$jscoverage['qmock.js'][472]++;
  mock[name] = (function (method, name) {
  _$jscoverage['qmock.js'][474]++;
  method.name = name;
  _$jscoverage['qmock.js'][477]++;
  return (function updateMethodState() {
  _$jscoverage['qmock.js'][480]++;
  var parameters = slice.call(arguments, 0);
  _$jscoverage['qmock.js'][483]++;
  method.actualCalls++;
  _$jscoverage['qmock.js'][486]++;
  method.actualArgs.push(parameters);
  _$jscoverage['qmock.js'][489]++;
  for (var i = 0, len = parameters.length; i < len; i++) {
    _$jscoverage['qmock.js'][490]++;
    if (parameters[i] && parameters[i].constructor === Function) {
      _$jscoverage['qmock.js'][491]++;
      parameters[i].apply(undefined, method.callbackArgs);
    }
    else {
      _$jscoverage['qmock.js'][494]++;
      if (parameters[i] !== undefined && ! parameters[i].nodeName) {
        _$jscoverage['qmock.js'][495]++;
        for (var key in parameters[i]) {
          _$jscoverage['qmock.js'][496]++;
          if (parameters[i][key] && parameters[i][key].constructor === Function && method.callbackArgs && method.callbackArgs.length && method.callbackArgs.length > 0) {
            _$jscoverage['qmock.js'][497]++;
            parameters[i][key].apply(undefined, method.callbackArgs);
          }
}
      }
    }
}
  _$jscoverage['qmock.js'][505]++;
  return (function getReturnValue(presentation) {
  _$jscoverage['qmock.js'][508]++;
  var obj = method.returnValue;
  _$jscoverage['qmock.js'][511]++;
assertingPresentations:
  for (var i = 0, len = method.expectedArgs.length; i < len; i++) {
    _$jscoverage['qmock.js'][513]++;
    try {
      _$jscoverage['qmock.js'][514]++;
      if (assertCollection(method.expectedArgs[i].accepts, presentation, true)) {
        _$jscoverage['qmock.js'][521]++;
        obj = (method.returnValue && method.returnValue === mock)? mock: method.expectedArgs[i].returns;
      }
    }
    catch (e) {
      _$jscoverage['qmock.js'][526]++;
      if (e[0] && e[0].type === "MissingHashKeyException") {
        _$jscoverage['qmock.js'][527]++;
        continue assertingPresentations;
      }
    }
}
  _$jscoverage['qmock.js'][532]++;
  return obj;
})(parameters);
});
})(this, name);
  _$jscoverage['qmock.js'][539]++;
  return this;
}), "interface": (function setInterfaceExpectations() {
  _$jscoverage['qmock.js'][571]++;
  if (this.requiredNumberofArguments === false) {
    _$jscoverage['qmock.js'][574]++;
    this.requiredNumberofArguments = arguments[0].accepts.length;
    _$jscoverage['qmock.js'][577]++;
    for (var i = 0, len = arguments.length; i < len; i++) {
      _$jscoverage['qmock.js'][578]++;
      if (! arguments[i].required) {
        _$jscoverage['qmock.js'][579]++;
        arguments[i].required = arguments[i].accepts.length;
      }
}
  }
  _$jscoverage['qmock.js'][583]++;
  this.expectedArgs = arguments;
  _$jscoverage['qmock.js'][584]++;
  return this;
}), "accepts": (function setSingleInterfaceExpectation() {
  _$jscoverage['qmock.js'][588]++;
  this.requiredNumberofArguments = arguments.length;
  _$jscoverage['qmock.js'][589]++;
  this.expectedArgs = [{"accepts": slice.call(arguments, 0)}];
  _$jscoverage['qmock.js'][590]++;
  return this;
}), "returns": (function (stub) {
  _$jscoverage['qmock.js'][594]++;
  this.returnValue = stub;
  _$jscoverage['qmock.js'][595]++;
  return this;
}), "required": (function (requiredArgs) {
  _$jscoverage['qmock.js'][599]++;
  this.requiredNumberofArguments = requiredArgs;
  _$jscoverage['qmock.js'][600]++;
  return this;
}), "overload": (function (overload_flag) {
  _$jscoverage['qmock.js'][604]++;
  this.allowOverload = overload_flag;
  _$jscoverage['qmock.js'][605]++;
  return this;
}), "strict": (function () {
  _$jscoverage['qmock.js'][609]++;
  this.strictValueChecking = true;
  _$jscoverage['qmock.js'][610]++;
  return this;
}), "property": (function (name) {
  _$jscoverage['qmock.js'][614]++;
  if (mock[name] !== undefined) {
    _$jscoverage['qmock.js'][615]++;
    throwMockException("InvalidPropertyNameException", "Constructor function", "undefined property name", "should be unique (was " + name + ")");
    _$jscoverage['qmock.js'][616]++;
    throw exceptions;
  }
  _$jscoverage['qmock.js'][618]++;
  mock[name] = "stub";
  _$jscoverage['qmock.js'][619]++;
  return this;
}), "withValue": (function (value) {
  _$jscoverage['qmock.js'][623]++;
  for (property in mock) {
    _$jscoverage['qmock.js'][624]++;
    if (mock.hasOwnProperty(property)) {
      _$jscoverage['qmock.js'][625]++;
      if (mock[property] === "stub") {
        _$jscoverage['qmock.js'][626]++;
        mock[property] = value;
      }
    }
}
  _$jscoverage['qmock.js'][630]++;
  return this;
}), "callFunctionWith": (function () {
  _$jscoverage['qmock.js'][635]++;
  this.callbackArgs = arguments;
  _$jscoverage['qmock.js'][636]++;
  return this;
}), "andChain": (function () {
  _$jscoverage['qmock.js'][640]++;
  return this.returnValue = mock;
}), "andExpects": (function (calls) {
  _$jscoverage['qmock.js'][644]++;
  return mock.expects(calls);
}), "verifyMethod": (function () {
  _$jscoverage['qmock.js'][648]++;
assertMethod:
  with (this) {
    _$jscoverage['qmock.js'][651]++;
  assertMethodCalls:
    switch (expectedCalls !== false) {
    case (maxCalls === Infinity) && (actualCalls > expectedCalls):
    case (maxCalls > 0) && (actualCalls >= expectedCalls) && (actualCalls <= maxCalls):
    case (expectedCalls === actualCalls):
      _$jscoverage['qmock.js'][660]++;
      if (actualCalls === 0) {
        _$jscoverage['qmock.js'][661]++;
        return;
      }
      else {
        _$jscoverage['qmock.js'][663]++;
        break assertMethodCalls;
      }
    default:
      _$jscoverage['qmock.js'][666]++;
      throwMockException("IncorrectNumberOfMethodCallsException", name, expectedCalls, actualCalls);
      _$jscoverage['qmock.js'][667]++;
      break assertMethod;
    }
    _$jscoverage['qmock.js'][673]++;
  assertInterface:
    switch (true) {
    case (allowOverload === false) && (requiredNumberofArguments !== false) && (requiredNumberofArguments !== actualArgs[0].length):
    case (allowOverload === true) && (requiredNumberofArguments !== false) && (requiredNumberofArguments > actualArgs[0].length):
      _$jscoverage['qmock.js'][679]++;
      throwMockException("IncorrectNumberOfArgumentsException", name, expectedArgs.length, actualArgs.length);
      _$jscoverage['qmock.js'][680]++;
      break assertMethod;
    default:
      _$jscoverage['qmock.js'][683]++;
      (function () {
  _$jscoverage['qmock.js'][688]++;
  if (requiredNumberofArguments !== false || (actualCalls > 0 && actualArgs[0].length > 0)) {
    _$jscoverage['qmock.js'][690]++;
  assertPresentations:
    for (var i = 0, len = actualArgs.length; i < len; i++) {
      _$jscoverage['qmock.js'][694]++;
    assertExpectations:
      for (var j = 0, _len = expectedArgs.length; j < _len; j++) {
        _$jscoverage['qmock.js'][700]++;
        if (expectedArgs[j].required > actualArgs[i].length) {
          _$jscoverage['qmock.js'][701]++;
          throwMockException("IncorrectNumberOfArgumentsException", name, expectedArgs.length, actualArgs.length);
          _$jscoverage['qmock.js'][702]++;
          continue assertPresentations;
        }
        _$jscoverage['qmock.js'][706]++;
        var cachedExceptionTotal = exceptions.length;
        _$jscoverage['qmock.js'][710]++;
        if (assertCollection((allowOverload === false && requiredNumberofArguments !== false)? expectedArgs[j].accepts: slice.call(expectedArgs[j].accepts, 0, actualArgs[i].length), (allowOverload === false && requiredNumberofArguments !== false)? actualArgs[i]: slice.call(actualArgs[i], 0, expectedArgs[j].accepts.length), strictValueChecking, strictValueChecking? "IncorrectArgumentValueException": "IncorrectArgumentTypeException", throwMockException, name, exceptions)) {
          _$jscoverage['qmock.js'][729]++;
          exceptions.slice(0, cachedExceptionTotal);
          _$jscoverage['qmock.js'][730]++;
          continue assertPresentations;
        }
}
}
  }
}).call(this);
    }
  }
}), atLeast: (function (n) {
  _$jscoverage['qmock.js'][742]++;
  this.expectedCalls = n;
  _$jscoverage['qmock.js'][743]++;
  this.maxCalls = Infinity;
  _$jscoverage['qmock.js'][744]++;
  return this;
}), noMoreThan: (function (n) {
  _$jscoverage['qmock.js'][748]++;
  this.maxCalls = n;
  _$jscoverage['qmock.js'][749]++;
  return this;
})};
    _$jscoverage['qmock.js'][755]++;
    MockedMember.prototype.withArguments = MockedMember.prototype.accepts;
    _$jscoverage['qmock.js'][759]++;
    mock.expects = mock.andExpects = (function mockExpectsNewMethod(min, max) {
  _$jscoverage['qmock.js'][760]++;
  return new MockedMember(min, max);
});
    _$jscoverage['qmock.js'][763]++;
    mock.accepts = (function mockExpectsArguments() {
  _$jscoverage['qmock.js'][764]++;
  mock.expectsArguments = arguments;
  _$jscoverage['qmock.js'][765]++;
  return mock;
});
    _$jscoverage['qmock.js'][768]++;
    mock.actualArguments = [];
    _$jscoverage['qmock.js'][769]++;
    mock.strictValueChecking = false;
    _$jscoverage['qmock.js'][771]++;
    mock.strict = (function mockExpectsStrictParameterValues() {
  _$jscoverage['qmock.js'][772]++;
  mock.strictValueChecking = true;
  _$jscoverage['qmock.js'][773]++;
  return mock;
});
    _$jscoverage['qmock.js'][777]++;
    mock.verify = (function verifyMock() {
  _$jscoverage['qmock.js'][780]++;
  with (mock) {
    _$jscoverage['qmock.js'][781]++;
    if (expectsArguments.length !== actualArguments.length) {
      _$jscoverage['qmock.js'][783]++;
      throwMockException("IncorrectNumberOfArgumentsException", "Constructor function", expectsArguments.length, actualArguments.length);
    }
    else {
      _$jscoverage['qmock.js'][785]++;
      assertCollection(expectsArguments, actualArguments, strictValueChecking, null, throwMockException);
    }
  }
  _$jscoverage['qmock.js'][790]++;
  for (var i = 0, len = methods.length; i < len; i++) {
    _$jscoverage['qmock.js'][791]++;
    methods[i].verifyMethod();
}
  _$jscoverage['qmock.js'][795]++;
  if (exceptions.length !== 0) {
    _$jscoverage['qmock.js'][796]++;
    throw exceptions;
  }
  else {
    _$jscoverage['qmock.js'][798]++;
    return true;
  }
});
    _$jscoverage['qmock.js'][803]++;
    mock.reset = (function resetMock() {
  _$jscoverage['qmock.js'][804]++;
  exceptions = [];
  _$jscoverage['qmock.js'][805]++;
  this.actualArguments = [];
  _$jscoverage['qmock.js'][806]++;
  for (var i = 0, len = methods.length; i < len; i++) {
    _$jscoverage['qmock.js'][807]++;
    methods[i].actualCalls = 0;
    _$jscoverage['qmock.js'][808]++;
    methods[i].actualArgs = [];
}
});
    _$jscoverage['qmock.js'][813]++;
    mock.expectsArguments = mock.accepts;
    _$jscoverage['qmock.js'][816]++;
    if (assertObject(Object, arguments && arguments[0])) {
      _$jscoverage['qmock.js'][817]++;
      createMockFromJSON.call(mock, arguments[0]);
    }
    _$jscoverage['qmock.js'][821]++;
    return mock;
}
  _$jscoverage['qmock.js'][823]++;
  ;
  _$jscoverage['qmock.js'][828]++;
  MockConstructor.QMock = "0.2";
  _$jscoverage['qmock.js'][829]++;
  MockConstructor.Variable = Variable;
  _$jscoverage['qmock.js'][833]++;
  ;
  _$jscoverage['qmock.js'][833]++;
  ;
  _$jscoverage['qmock.js'][833]++;
  ;
  _$jscoverage['qmock.js'][833]++;
  ;
  _$jscoverage['qmock.js'][833]++;
  expose(assertObject, MockConstructor, "_assertObject");
  _$jscoverage['qmock.js'][835]++;
  ;
  _$jscoverage['qmock.js'][835]++;
  ;
  _$jscoverage['qmock.js'][835]++;
  ;
  _$jscoverage['qmock.js'][835]++;
  expose(createException, MockConstructor, "_createException");
  _$jscoverage['qmock.js'][837]++;
  ;
  _$jscoverage['qmock.js'][837]++;
  ;
  _$jscoverage['qmock.js'][837]++;
  ;
  _$jscoverage['qmock.js'][837]++;
  ;
  _$jscoverage['qmock.js'][837]++;
  expose(createMockFromJSON, MockConstructor, "_createMockFromJSON");
  _$jscoverage['qmock.js'][840]++;
  container.Mock = MockConstructor;
  _$jscoverage['qmock.js'][843]++;
  if (typeof exports !== "undefined" && typeof require !== "undefined") {
    _$jscoverage['qmock.js'][844]++;
    exports.Mocks = MockConstructor;
  }
})("Mock", this);
_$jscoverage['qmock.js'].source = [" <span class=\"c\">/**</span>","<span class=\"c\"> * QMock - Copyright (c) 2008</span>","<span class=\"c\"> * Dual licensed under the MIT (MIT-LICENSE.txt)</span>","<span class=\"c\"> * and GPL (GPL-LICENSE.txt) licenses.</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * @author Mark Meyer // Andy Beeching</span>","<span class=\"c\"> * @classDescription qMock is a lightweight object mocking library</span>","<span class=\"c\"> * @dependencies None - free as a bird</span>","<span class=\"c\"> * @example var mock = new Mock();</span>","<span class=\"c\"> *</span>","<span class=\"c\"> * TODO: Support multiple callbacks with correlating arguments</span>","<span class=\"c\"> * TODO: Optional strict method ordering flag? e.g. {ordered: true}</span>","<span class=\"c\"> * TODO: Document Mock object (plus Method) API</span>","<span class=\"c\"> * TODO: Add 'Collection' Argument for DOM Manipulation</span>","<span class=\"c\"> * TODO: Skin testrunner</span>","<span class=\"c\"> * TODO: Add scriptDoc support for instance methods and IDE completion</span>","<span class=\"c\"> * TODO: Support for custom exceptions?</span>","<span class=\"c\"> * TODO: Force array literals in params via JSON</span>","<span class=\"c\"> * TODO: Strict flag for argument literal checking...</span>","<span class=\"c\"> * TODO: Expectations on invocations to go through calls only - ditch syntactic sugar...</span>","<span class=\"c\"> * TODO: Support for HTMLCollections, nodeLists?</span>","<span class=\"c\"> * TODO: Support for DOM Element References</span>","<span class=\"c\"> * TODO: Refactor out strict type checking function into unit testable privileged object.</span>","<span class=\"c\"> * TODO: Better support for multiple parameter error messages.</span>","<span class=\"c\"> * TODO: Decide how to flag overload vs strict argumement NUMBER check</span>","<span class=\"c\"> * TODO: Ensure support for all major testruners - QUnit/YUI/GOOG/Evidence/ScrewUnit/JsSpec..</span>","<span class=\"c\"> * TODO: Figure out a way to re-use mockedMember constructor wih mock constructors...SERIOUSLY NEED THIS, Constuctor features are messy as f*ck.</span>","<span class=\"c\"> * TODO: Refactor out object checking logic and make leaner....</span>","<span class=\"c\"> * TODO: Make code more readable with if (key in obj) notation... (rather than if(obj[key]))...</span>","<span class=\"c\"> * TODO: Question use of Constructor flag exception object? Really needed if execption thrown has enough detail? Or refactor as propert on exception thrown? e.g. e.objectType: \"Constructor\", \"Method\".</span>","<span class=\"c\"> * TODO: Add in optimisations for compilers like YUI &amp; Google Closure.</span>","<span class=\"c\"> * TODO: add a end() utility function for restoration of scope to Mock obj (instead of member)</span>","<span class=\"c\"> * TODO: Look into dynamic generation of mocks based on code lib, and or pdoc comments? Mental.</span>","<span class=\"c\"> * TODO: Refactor conditionals with short-circuit evaluation...</span>","<span class=\"c\"> * TODO: Strict return support for single expected presentations? Too complex?</span>","<span class=\"c\"> * TODO: Protect against API collisions between QMock and Mocks through internal re-mapping (can I not just invoke directly off prototype chain?)</span>","<span class=\"c\"> * TODO: Extend callback parameter invocation to support multiple callback scenarios</span>","<span class=\"c\"> * TODO: Write simple helper function to test valid stuff in loops</span>","<span class=\"c\"> * TODO: Early exclusions via returns</span>","<span class=\"c\"> * TODO: Need to look into using getPrototypeOf method for object type checking...</span>","<span class=\"c\"> * TODO: Does assertHash check keys as well as values??!</span>","<span class=\"c\"> * TODO: Check able to delete QMock for clean-up purposes?</span>","<span class=\"c\"> * TODO: Add in support for NaN data type</span>","<span class=\"c\"> * TODO: Check whether my assertHash handles {DontEnum} enumeration...!</span>","<span class=\"c\"> * TODO: Group QUnit tests into sub-modules?</span>","<span class=\"c\"> * TODO: Support for identifiers.. might wait until refactor of all constructor/methods to subclassed mockMember instances.</span>","<span class=\"c\"> * TDOO: Support for classical, protypical, &amp; parasitic inheritance instance checking</span>","<span class=\"c\"> * TODO: Double check inheritance properties of instanceof - plus support for 'interface' conformance as well?</span>","<span class=\"c\"> * TODO: Patch QUnit to support a sentence like: 700 tests of 702 run passed, 2 failed and 150 weren't run.</span>","<span class=\"c\"> */</span>","","<span class=\"k\">(</span><span class=\"k\">function</span> initialiseQMock <span class=\"k\">(</span>Mock<span class=\"k\">,</span> container<span class=\"k\">)</span> <span class=\"k\">{</span>","  ","  <span class=\"c\">/**</span>","<span class=\"c\">  * Helpers - Protected</span>","<span class=\"c\">  */</span>","  ","  <span class=\"c\">// So Dmitry Baranovskiy doesn't shout at me ([O:O]) - http://sitepoint.com/blogs/2009/11/12/google-closure-how-not-to-write-javascript/</span>","  <span class=\"c\">// Really this is ultra defensive but since undefined is used in parameter verification code let's be sure it actually is typeof \"undefined\".</span>","  <span class=\"k\">var</span> undefined<span class=\"k\">,</span>","      slice <span class=\"k\">=</span> Array<span class=\"k\">.</span>prototype<span class=\"k\">.</span>slice<span class=\"k\">;</span>","    ","  <span class=\"c\">// Allow pass-through argument checking</span>","  <span class=\"c\">// Either reference static member off Mock class (Mock.Variable), or alias - e.g. var Selector = Mock.Variable;</span>","  <span class=\"k\">function</span> Variable <span class=\"k\">()</span> <span class=\"k\">{}</span><span class=\"k\">;</span>","  ","  <span class=\"c\">// PRIVATE static methods</span>","  ","  <span class=\"c\">// Function to expose private objects on a target object for testing (plus injection of mocks/stubs and reset functionality)</span>","  <span class=\"k\">function</span> expose <span class=\"k\">(</span>obj<span class=\"k\">,</span> context<span class=\"k\">,</span> key<span class=\"k\">)</span> <span class=\"k\">{</span>","    ","    <span class=\"k\">var</span> cachedObj <span class=\"k\">=</span> obj<span class=\"k\">;</span> <span class=\"c\">// can this part be improved by one cache for all or many atomic caches?</span>","    ","    context<span class=\"k\">[</span>key<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">{</span>","      get<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> obj<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      set<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        obj <span class=\"k\">=</span> arguments<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">||</span> <span class=\"k\">null</span><span class=\"k\">;</span> ","      <span class=\"k\">}</span><span class=\"k\">,</span>","      restore<span class=\"k\">:</span> <span class=\"k\">function</span><span class=\"k\">()</span> <span class=\"k\">{</span>","        obj <span class=\"k\">=</span> cachedObj<span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","  ","  <span class=\"c\">// Function to handle JSON based mock creation</span>","  <span class=\"k\">function</span> createMockFromJSON <span class=\"k\">(</span>mockedMembers<span class=\"k\">)</span> <span class=\"k\">{</span>","    ","    <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!</span>mockedMembers <span class=\"k\">)</span> <span class=\"k\">{</span> <span class=\"k\">return</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"k\">}</span>","    ","    <span class=\"k\">var</span> propertyWhitelist <span class=\"k\">=</span> <span class=\"s\">\"calls min max\"</span><span class=\"k\">;</span> <span class=\"c\">// List of method/property identifiers that are used in Qmock - protected.</span>","","    <span class=\"c\">// loop through expected members on mock</span>","    <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> mockedMembers<span class=\"k\">)</span> <span class=\"k\">{</span>","      ","      <span class=\"k\">var</span> memberConfig <span class=\"k\">=</span> mockedMembers<span class=\"k\">[</span>key<span class=\"k\">],</span>","        isMethod <span class=\"k\">=</span> <span class=\"k\">!!(</span> memberConfig<span class=\"k\">[</span><span class=\"s\">\"value\"</span><span class=\"k\">]</span> <span class=\"k\">===</span> undefined <span class=\"k\">),</span>","        ","      <span class=\"c\">// register property or method onto mock interface</span>","      member <span class=\"k\">=</span> <span class=\"k\">this</span>","        <span class=\"k\">.</span>expects","          <span class=\"k\">.</span>apply<span class=\"k\">(</span>member<span class=\"k\">,</span>","            <span class=\"k\">(</span>memberConfig<span class=\"k\">.</span>calls <span class=\"k\">!==</span> undefined<span class=\"k\">)</span> ","              <span class=\"k\">?</span> <span class=\"k\">[</span>memberConfig<span class=\"k\">.</span>calls<span class=\"k\">]</span> ","              <span class=\"k\">:</span> <span class=\"k\">[</span> <span class=\"k\">(</span>memberConfig<span class=\"k\">.</span>min<span class=\"k\">)</span> <span class=\"k\">?</span> memberConfig<span class=\"k\">.</span>min <span class=\"k\">:</span> <span class=\"s\">0</span><span class=\"k\">,</span>","                  <span class=\"k\">(</span>memberConfig<span class=\"k\">.</span>max<span class=\"k\">)</span> <span class=\"k\">?</span> memberConfig<span class=\"k\">.</span>max <span class=\"k\">:</span> Infinity <span class=\"k\">]</span>","              <span class=\"k\">)[(</span> isMethod <span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"s\">\"method\"</span> <span class=\"k\">:</span> <span class=\"s\">\"property\"</span><span class=\"k\">](</span>key<span class=\"k\">);</span>","","      <span class=\"c\">// Set expectations for method or value of property</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span> isMethod <span class=\"k\">)</span> <span class=\"k\">{</span>","","        setExpectations<span class=\"k\">:</span>","          <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> expectation <span class=\"k\">in</span> memberConfig<span class=\"k\">)</span> <span class=\"k\">{</span>","","          <span class=\"c\">// Check property exists on mock object and is a callable method</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">(</span>member<span class=\"k\">[</span>expectation<span class=\"k\">]</span> <span class=\"k\">!==</span> undefined<span class=\"k\">)</span> ","            <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>member<span class=\"k\">[</span>expectation<span class=\"k\">].</span>constructor <span class=\"k\">===</span> Function<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","","            <span class=\"c\">// Disco.</span>","            member<span class=\"k\">[</span>expectation<span class=\"k\">][</span>","              <span class=\"k\">(</span> <span class=\"k\">(</span>expectation <span class=\"k\">===</span> <span class=\"s\">\"interface\"</span> <span class=\"k\">||</span> expectation <span class=\"k\">===</span> <span class=\"s\">\"accepts\"</span><span class=\"k\">)</span> ","              <span class=\"k\">&amp;&amp;</span> memberConfig<span class=\"k\">[</span>expectation<span class=\"k\">].</span>constructor <span class=\"k\">===</span> Array<span class=\"k\">)</span>","                <span class=\"k\">?</span> <span class=\"s\">\"apply\"</span>","                <span class=\"k\">:</span> <span class=\"s\">\"call\"</span>","            <span class=\"k\">](</span>member<span class=\"k\">,</span> memberConfig<span class=\"k\">[</span>expectation<span class=\"k\">]);</span>","","          <span class=\"c\">// If not callable check property not whitelisted before throwing error</span>","          <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">!!</span><span class=\"s\">/propertyWhitelist/</span><span class=\"k\">.</span>test<span class=\"k\">(</span>expectation<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            throwMockException<span class=\"k\">(</span><span class=\"s\">\"InvalidExpectationMethodCallException\"</span><span class=\"k\">,</span> member<span class=\"k\">[</span><span class=\"s\">\"name\"</span><span class=\"k\">]</span> <span class=\"k\">+</span> <span class=\"s\">'.'</span> <span class=\"k\">+</span> expectation<span class=\"k\">,</span> <span class=\"s\">\"Key to mutator method on mockedMember object\"</span><span class=\"k\">,</span> name<span class=\"k\">);</span>","          <span class=\"k\">}</span>","  ","        <span class=\"k\">}</span> <span class=\"c\">// end setExpectations loop</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"c\">// If expectation not method then simply set property</span>","        member<span class=\"k\">.</span>withValue<span class=\"k\">(</span>memberConfig<span class=\"k\">[</span><span class=\"s\">\"value\"</span><span class=\"k\">]);</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span>","  <span class=\"k\">}</span>","  ","  <span class=\"k\">var</span> assertObject <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","    ","    <span class=\"c\">// PRIVATE Helper functions</span>","        ","    <span class=\"c\">// Function to assert members of an object, returns Boolean</span>","    <span class=\"k\">var</span> assertHash <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","      ","      <span class=\"k\">function</span> isHash <span class=\"k\">(</span> obj <span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","","        <span class=\"c\">// exclude null/undefined early</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span> obj <span class=\"k\">===</span> undefined <span class=\"k\">||</span> obj <span class=\"k\">===</span> <span class=\"k\">null</span><span class=\"k\">)</span> <span class=\"k\">{</span> ","          <span class=\"k\">return</span> result<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        ","        <span class=\"c\">// If object then should allow mutation</span>","        obj<span class=\"k\">[</span><span class=\"s\">'test'</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        result <span class=\"k\">=</span> <span class=\"k\">!!(</span>obj<span class=\"k\">[</span><span class=\"s\">'test'</span><span class=\"k\">]);</span>","        ","        <span class=\"c\">// cleanup to avoid false positives later on</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>result<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">delete</span> obj<span class=\"k\">[</span><span class=\"s\">'test'</span><span class=\"k\">];</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> result<span class=\"k\">;</span>        ","      <span class=\"k\">}</span>","      ","      <span class=\"k\">function</span> assertHash <span class=\"k\">(</span>expected<span class=\"k\">,</span> actual<span class=\"k\">,</span> opt_strictValueChecking<span class=\"k\">,</span> opt_exceptionType<span class=\"k\">,</span> opt_exceptionHandler<span class=\"k\">)</span> <span class=\"k\">{</span>","      ","        <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      ","        <span class=\"c\">// asserHash interface checks</span>","        <span class=\"c\">// Required parameters &amp; characteristics (e.g. is enumerable)</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>arguments<span class=\"k\">.</span>length <span class=\"k\">&lt;</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">throw</span> <span class=\"k\">{</span>","            type<span class=\"k\">:</span> <span class=\"s\">\"MissingParametersException\"</span><span class=\"k\">,</span>","            msg<span class=\"k\">:</span> <span class=\"s\">\"assertHash() requires at least an expected and actual parameter to be passed to interface\"</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">(</span>isHash<span class=\"k\">(</span>expected<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">false</span><span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">(</span>isHash<span class=\"k\">(</span>actual<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">false</span><span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">throw</span> <span class=\"k\">{</span>","            type<span class=\"k\">:</span> <span class=\"s\">\"MalformedArgumentsException\"</span><span class=\"k\">,</span>","            msg<span class=\"k\">:</span> <span class=\"s\">\"assertHash() requires the 'expected' and 'actual' parameters to be Hashes. Expected was: \"</span> <span class=\"k\">+</span> expected <span class=\"k\">+</span> <span class=\"s\">\", actual was: \"</span> <span class=\"k\">+</span> actual","          <span class=\"k\">}</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"c\">// Is this the correct check? Everything in JS is essentially a hash (as all derive from Object.prototype), except for falsy data types (undefined, null, NaN)?</span>","        <span class=\"c\">// Worth testing to see if absolutely generic (aka can enumerate over non object literal hashes)</span>","        <span class=\"c\">// What about DontEnum stuff? Sort of taken by hasOwnProperty, so what about checking inherited props? Or make clear in description really meant for object literals? If so, should text for object literal? How - Array trick-esque thingy?</span>","        ","          checkingMembers<span class=\"k\">:</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span> <span class=\"k\">var</span> key <span class=\"k\">in</span> expected <span class=\"k\">)</span> <span class=\"k\">{</span>","              <span class=\"c\">// expectations don't support prototypical inheritance...</span>","              <span class=\"k\">if</span> <span class=\"k\">(</span> expected<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span>key<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                <span class=\"c\">// but actual values do (and also shadowed natives, e.g. toString as a key - see {DontEnum} tests)</span>","                <span class=\"c\">// We 'objectify' the 'actual' object as the in operator throws errors when executed against primitive values (e.g. key in \"\" --&gt; key in Object(\"\")))</span>","                <span class=\"c\">// We use the in operator as opposed to a dynamic lookup because in the case of an assigned falsy value to actual[key] the result is false (as opposed to true - the property does exist on the actual object)</span>","                <span class=\"c\">// in operator performs lookup resolution on [[Prototype]] chain</span>","                <span class=\"c\">// FF 3.6 won't eumerate function instance prototype property (https://developer.mozilla.org/En/Firefox_3.6_for_developers#JavaScript)</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span> key <span class=\"k\">in</span> Object<span class=\"k\">(</span>actual<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                  result <span class=\"k\">&amp;=</span> assertObject<span class=\"k\">(</span>expected<span class=\"k\">[</span>key<span class=\"k\">],</span> actual<span class=\"k\">[</span>key<span class=\"k\">],</span> opt_strictValueChecking<span class=\"k\">,</span> opt_exceptionType<span class=\"k\">,</span> opt_exceptionHandler<span class=\"k\">);</span>","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                  opt_exceptionHandler <span class=\"k\">&amp;&amp;</span> opt_exceptionHandler<span class=\"k\">(</span> <span class=\"s\">\"MissingHashKeyException\"</span><span class=\"k\">,</span> <span class=\"s\">\"assertHash\"</span><span class=\"k\">,</span> key<span class=\"k\">,</span> <span class=\"s\">\"not found on object\"</span> <span class=\"k\">)</span>","                  result <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                  <span class=\"k\">continue</span> checkingMembers<span class=\"k\">;</span>","                <span class=\"k\">}</span>","              <span class=\"k\">}</span>","            <span class=\"k\">}</span>","        <span class=\"k\">}</span>","          ","        <span class=\"k\">return</span> <span class=\"k\">!!</span>result<span class=\"k\">;</span>","      <span class=\"k\">}</span>","      ","      <span class=\"c\">// Expose for testing</span>","      <span class=\"k\">;;;;</span> expose<span class=\"k\">(</span> isHash<span class=\"k\">,</span> assertHash<span class=\"k\">,</span> <span class=\"s\">\"_isHash\"</span> <span class=\"k\">);</span>","      ","      <span class=\"c\">// Return priviledged object</span>","      <span class=\"k\">return</span> assertHash<span class=\"k\">;</span>","            ","    <span class=\"k\">}</span><span class=\"k\">)();</span>","    ","    <span class=\"c\">// Delegate function that asserts elements of a collection</span>","    <span class=\"k\">function</span> assertCollection <span class=\"k\">(</span>expected<span class=\"k\">,</span> actual<span class=\"k\">,</span> opt_strictValueChecking<span class=\"k\">,</span> opt_exceptionType<span class=\"k\">,</span> opt_exceptionHandler<span class=\"k\">,</span> opt_identifier<span class=\"k\">)</span> <span class=\"k\">{</span>","","      <span class=\"k\">var</span> result <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","","      <span class=\"c\">// assertCollection interface checks</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>arguments<span class=\"k\">.</span>length <span class=\"k\">&lt;</span> <span class=\"s\">2</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">throw</span> <span class=\"k\">{</span>","          type<span class=\"k\">:</span> <span class=\"s\">\"MissingParametersException\"</span><span class=\"k\">,</span>","          msg<span class=\"k\">:</span> <span class=\"s\">\"assertCollection() requires at least an expected and actual parameter to be passed to interface\"</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">(!</span>expected <span class=\"k\">||</span> expected<span class=\"k\">.</span>length <span class=\"k\">===</span> undefined<span class=\"k\">)</span> <span class=\"k\">||</span> <span class=\"k\">(!</span>actual <span class=\"k\">||</span> actual<span class=\"k\">.</span>length <span class=\"k\">===</span> undefined<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">throw</span> <span class=\"k\">{</span>","          type<span class=\"k\">:</span> <span class=\"s\">\"MalformedArgumentsException\"</span><span class=\"k\">,</span>","          msg<span class=\"k\">:</span> <span class=\"s\">\"assertCollection() requires the 'expected' and 'actual' collection parameters to be an Array-like collection\"</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// assertCollection parameter checks</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span> expected<span class=\"k\">.</span>length <span class=\"k\">!==</span> actual<span class=\"k\">.</span>length <span class=\"k\">)</span> <span class=\"k\">{</span>","        opt_exceptionHandler <span class=\"k\">&amp;&amp;</span> opt_exceptionHandler <span class=\"k\">(</span><span class=\"s\">'MismatchedNumberOfMembersException'</span><span class=\"k\">,</span> opt_identifier <span class=\"k\">||</span> <span class=\"s\">'Function()'</span><span class=\"k\">,</span> expected<span class=\"k\">.</span>length<span class=\"k\">,</span> actual<span class=\"k\">.</span>length <span class=\"k\">)</span>","        result <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","","        <span class=\"c\">// Only assert on absolute number of params declared in method signature as expectations don't exist for overloaded interfaces</span>","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> len <span class=\"k\">=</span> actual<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","          <span class=\"c\">// 1:1 assertion</span>","          result <span class=\"k\">&amp;=</span> assertObject <span class=\"k\">(</span> expected<span class=\"k\">[</span>i<span class=\"k\">],</span> actual<span class=\"k\">[</span>i<span class=\"k\">],</span> opt_strictValueChecking<span class=\"k\">,</span> opt_exceptionType<span class=\"k\">,</span> opt_exceptionHandler <span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","","      <span class=\"c\">// Return a Boolean for recursive calls, exceptions handled in opt_exceptionsHandler.</span>","      <span class=\"k\">return</span> <span class=\"k\">!!</span>result<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// Key function to test objects against each other.</span>","    <span class=\"k\">function</span> assertObject <span class=\"k\">(</span>expected<span class=\"k\">,</span> actual<span class=\"k\">,</span> opt_strictValueChecking<span class=\"k\">,</span> opt_exceptionType<span class=\"k\">,</span> opt_exceptionHandler<span class=\"k\">)</span> <span class=\"k\">{</span>","            ","      <span class=\"c\">// Test whether expected is a constructor for native object types (aside from null // undefined)</span>","      <span class=\"k\">var</span> expectedType <span class=\"k\">=</span> <span class=\"k\">(</span>expected <span class=\"k\">!==</span> <span class=\"k\">null</span> <span class=\"k\">&amp;&amp;</span> expected <span class=\"k\">!==</span> undefined<span class=\"k\">)</span> <span class=\"k\">?</span> expected<span class=\"k\">.</span>constructor <span class=\"k\">:</span> expected","        <span class=\"c\">/*expectedType = (expected !== null &amp;&amp; expected !== undefined) </span>","<span class=\"c\">          ? ( expected.constructor === Function ) // but also matches function literals :-(</span>","<span class=\"c\">            ? expected</span>","<span class=\"c\">            : expected.constructor</span>","<span class=\"c\">              : expected,*/</span>","        isValue <span class=\"k\">=</span> isRegExp <span class=\"k\">=</span> isCollection <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">,</span>","        strictValueChecking <span class=\"k\">=</span> opt_strictValueChecking <span class=\"k\">||</span> <span class=\"k\">false</span><span class=\"k\">,</span>","        exceptionType <span class=\"k\">=</span> opt_exceptionType <span class=\"k\">||</span> <span class=\"k\">(</span> strictValueChecking <span class=\"k\">===</span> <span class=\"k\">true</span> <span class=\"k\">?</span> <span class=\"s\">\"IncorrectArgumentValueException\"</span> <span class=\"k\">:</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">),</span>","        <span class=\"c\">// What happened to isNative fn?!? - see Kangax blog... damn me and my lack of self-documentation sometimes.</span>","        nativeTypes <span class=\"k\">=</span> <span class=\"k\">[</span>Number<span class=\"k\">,</span> String<span class=\"k\">,</span> Boolean<span class=\"k\">,</span> Date<span class=\"k\">,</span> Function<span class=\"k\">,</span> Object<span class=\"k\">,</span> Array<span class=\"k\">,</span> RegExp<span class=\"k\">,</span> Variable<span class=\"k\">],</span>","        result <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">,</span>","        <span class=\"c\">// WTF?</span>","        identifier <span class=\"k\">=</span> <span class=\"s\">\"getClass()\"</span><span class=\"k\">;</span>","        ","      <span class=\"k\">function</span> _compare <span class=\"k\">(</span>expected<span class=\"k\">,</span> actual<span class=\"k\">,</span> serialiser<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">(</span> expected <span class=\"k\">&amp;&amp;</span> expected<span class=\"k\">[</span>serialiser<span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> expected<span class=\"k\">[</span>serialiser<span class=\"k\">]()</span> <span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">(</span> actual <span class=\"k\">&amp;&amp;</span> actual<span class=\"k\">[</span>serialiser<span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> actual<span class=\"k\">[</span>serialiser<span class=\"k\">]()</span> <span class=\"k\">)</span>","      <span class=\"k\">}</span>","","      assertNativeType<span class=\"k\">:</span> ","        <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> len <span class=\"k\">=</span> nativeTypes<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span> expected <span class=\"k\">===</span> nativeTypes<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            expectedType <span class=\"k\">=</span> expected<span class=\"k\">;</span>","            <span class=\"k\">break</span> assertNativeType<span class=\"k\">;</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","      ","      <span class=\"c\">// n.b. switch statements check by identity (aka strict === rather than ... ? See Nyman talk)</span>","      <span class=\"k\">switch</span><span class=\"k\">(</span>expectedType<span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"c\">// Pass-through</span>","        <span class=\"k\">case</span> Variable<span class=\"k\">:</span>","          <span class=\"k\">break</span><span class=\"k\">;</span>","","        <span class=\"c\">// False (however unlikely) - compare by type</span>","        <span class=\"k\">case</span> <span class=\"k\">null</span><span class=\"k\">:</span>","        <span class=\"k\">case</span> undefined<span class=\"k\">:</span>","        <span class=\"c\">// case NaN: TBD</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span> expected <span class=\"k\">!==</span> actual <span class=\"k\">)</span> <span class=\"k\">{</span>","            opt_exceptionHandler <span class=\"k\">&amp;&amp;</span> opt_exceptionHandler<span class=\"k\">(</span>exceptionType<span class=\"k\">,</span> identifier<span class=\"k\">,</span> expected<span class=\"k\">,</span> actual<span class=\"k\">);</span>","            result <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","          <span class=\"k\">}</span>","          <span class=\"k\">break</span><span class=\"k\">;</span>","          ","        <span class=\"c\">// Primitives (plus Date) - compare by prototype or value (where strictValue === true)</span>","        <span class=\"k\">case</span> Date<span class=\"k\">:</span>","        <span class=\"k\">case</span> Number<span class=\"k\">:</span>","        <span class=\"k\">case</span> String<span class=\"k\">:</span>","        <span class=\"k\">case</span> Boolean<span class=\"k\">:</span>","          <span class=\"c\">// set Primitive flag</span>","          isValue <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","          ","        <span class=\"k\">default</span><span class=\"k\">:</span>","","          <span class=\"c\">// set RegExp flag</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span> expectedType <span class=\"k\">===</span> RegExp <span class=\"k\">)</span> <span class=\"k\">{</span>","            isRegExp <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span> ","          <span class=\"k\">}</span>","          ","          <span class=\"c\">// set collection flag</span>","          <span class=\"c\">// We use hasOwnProperty() because a lookup a force to Boolean lookup generates false positives (e.g. 0), and the 'in' operator crawls the prototype chain</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span> expected<span class=\"k\">.</span>hasOwnProperty <span class=\"k\">&amp;&amp;</span> expected<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span><span class=\"s\">'length'</span><span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            isCollection <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","          <span class=\"k\">}</span>","        ","        ","          <span class=\"c\">// Let's make sure the types match first of all...</span>","          <span class=\"c\">// If not strict then check if a instance of expectation - acts on CURRENT prototype object - DOUBLE CHECK this - surely traverses [[Prototype]] chain to check all sub/superclasses and root node(s)?</span>","          <span class=\"c\">// May need refactoring to use getPrototypeOf() for more robust solution</span>","          <span class=\"c\">// Or check received value is not simply a constructor itself.</span>","          <span class=\"c\">// Alternative code for 1st expression (which uses Object())</span>","          <span class=\"c\">//} else if  {</span>","          <span class=\"c\">/*} else if ( ( (actual !== null &amp;&amp; actual !== undefined) ? actual.constructor : actual ) === expectedType ) {</span>","<span class=\"c\">            return true;</span>","<span class=\"c\">          } else {</span>","<span class=\"c\">            // Otherwise throw exception</span>","<span class=\"c\">            throwException(exceptionType, name, \"getClass() - Number/String/Boolean/Array/Object\", actual); // Need to inject correct className</span>","<span class=\"c\">          }*/</span>","          <span class=\"c\">// Use of Object() converts primitve literal values into objects which plays nice with the instanceof operator (n.b. [[Prototype]] *is* setup, e.g. \"\".constuctor (which lives on __proto__, the prototype of the constructor function, exists)).</span>","          <span class=\"c\">// I'd love to know why! instanceof crawls [[Prototype]]</span>","          ","          <span class=\"k\">if</span> <span class=\"k\">(</span> Object <span class=\"k\">(</span> actual <span class=\"k\">)</span> <span class=\"k\">instanceof</span> expectedType <span class=\"k\">||</span> actual <span class=\"k\">===</span> expectedType <span class=\"k\">)</span> <span class=\"k\">{</span>","            ","            <span class=\"c\">// If strict then 'deep' assertion</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span> strictValueChecking <span class=\"k\">===</span> <span class=\"k\">true</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","              ","              <span class=\"c\">// Catch errors thrown by collaborator object interface (e.g. assertHash())</span>","              <span class=\"k\">try</span> <span class=\"k\">{</span>","                ","                <span class=\"c\">// Handle primtive values - if correct types then identity check</span>","                <span class=\"c\">// Using Object.prototype.valueOf() allows us to compare Dates along with the normal primitve values w/o custom handling (e.g. UTC conversion)</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">(</span> isValue <span class=\"k\">===</span> <span class=\"k\">true</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>_compare<span class=\"k\">(</span>expected<span class=\"k\">,</span> actual<span class=\"k\">,</span> <span class=\"s\">\"valueOf\"</span><span class=\"k\">)</span> <span class=\"k\">)</span>","","                <span class=\"c\">// Handle regular expression objects. Note: NOT testing implementation, just the string representation of the object</span>","                <span class=\"k\">||</span> <span class=\"k\">(</span> isRegExp <span class=\"k\">===</span> <span class=\"k\">true</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>_compare<span class=\"k\">(</span>expected<span class=\"k\">,</span> actual<span class=\"k\">,</span> <span class=\"s\">\"toString\"</span><span class=\"k\">)</span> <span class=\"k\">)</span>","","                <span class=\"c\">// Handle composite values &amp; custom Data Types - first check for match on constructor, then match on collection, e.g. members (strict checking)</span>","                <span class=\"k\">||</span> <span class=\"k\">(</span> <span class=\"k\">(</span>isValue <span class=\"k\">===</span> <span class=\"k\">false</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span> actual <span class=\"k\">!==</span> expectedType <span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span> <span class=\"k\">(</span> <span class=\"k\">(</span>isCollection <span class=\"k\">===</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">?</span> assertCollection <span class=\"k\">:</span> assertHash<span class=\"k\">)(</span>expected<span class=\"k\">,</span> actual<span class=\"k\">,</span> <span class=\"k\">true</span><span class=\"k\">,</span> exceptionType<span class=\"k\">,</span> <span class=\"k\">(</span>isCollection <span class=\"k\">===</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"k\">null</span> <span class=\"k\">:</span> opt_exceptionHandler<span class=\"k\">)</span> <span class=\"k\">===</span> <span class=\"k\">false</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                ","                  <span class=\"c\">// FAIL.</span>","                  result <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","                ","                <span class=\"k\">}</span>","                ","              <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>error<span class=\"k\">)</span> <span class=\"k\">{</span>","","                <span class=\"c\">// If MissingHashKeyException thrown then create custom error listing the missing keys.</span>","                <span class=\"k\">if</span> <span class=\"k\">(</span> error <span class=\"k\">&amp;&amp;</span> error<span class=\"k\">.</span>type <span class=\"k\">&amp;&amp;</span> error<span class=\"k\">.</span>type <span class=\"k\">===</span> <span class=\"s\">\"MalformedArgumentsException\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                  opt_exceptionHandler <span class=\"k\">&amp;&amp;</span> opt_exceptionHandler<span class=\"k\">(</span>error<span class=\"k\">.</span>type<span class=\"k\">,</span> identifier<span class=\"k\">,</span> expected<span class=\"k\">,</span> actual<span class=\"k\">);</span> ","                <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                  <span class=\"k\">throw</span> error<span class=\"k\">;</span>","                <span class=\"k\">}</span>","                <span class=\"c\">// Ensure normal flow control plays out</span>","                result <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","              <span class=\"k\">}</span>","","          <span class=\"k\">}</span>","          <span class=\"c\">// Handle expected object literals whose Type match all types (aside from falsy types)  </span>","          <span class=\"c\">// aka check Object actually is an Object instance</span>","          <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">(</span> expectedType <span class=\"k\">===</span> Object <span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span> actual <span class=\"k\">&amp;&amp;</span> actual<span class=\"k\">.</span>constructor <span class=\"k\">!==</span> Object<span class=\"k\">.</span>prototype<span class=\"k\">.</span>constructor <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            result <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","          <span class=\"k\">}</span>","          ","        <span class=\"c\">// If not strict check actual isn't a constructor in own right</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span> actual <span class=\"k\">!==</span> expectedType <span class=\"k\">)</span> <span class=\"k\">{</span>","          result <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","        <span class=\"k\">}</span>","        <span class=\"c\">// Throw error if negative match</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span> result <span class=\"k\">===</span> <span class=\"k\">false</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","          opt_exceptionHandler <span class=\"k\">&amp;&amp;</span> opt_exceptionHandler<span class=\"k\">(</span>exceptionType<span class=\"k\">,</span> identifier<span class=\"k\">,</span> expected<span class=\"k\">,</span> actual<span class=\"k\">);</span> <span class=\"c\">// Need to inject correct className</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span> <span class=\"c\">// end switch</span>","       <span class=\"k\">return</span> result<span class=\"k\">;</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// Expose for testing</span>","    <span class=\"k\">;;;;</span> expose<span class=\"k\">(</span> assertHash<span class=\"k\">,</span> assertObject<span class=\"k\">,</span> <span class=\"s\">\"_assertHash\"</span> <span class=\"k\">);</span>","    <span class=\"k\">;;;;</span> expose<span class=\"k\">(</span> assertCollection<span class=\"k\">,</span> assertObject<span class=\"k\">,</span> <span class=\"s\">\"_assertCollection\"</span> <span class=\"k\">);</span>","    ","    <span class=\"c\">// Return privileged function</span>","    <span class=\"k\">return</span> assertObject<span class=\"k\">;</span>","    ","  <span class=\"k\">}</span><span class=\"k\">)();</span> <span class=\"c\">// end assertObject declaration</span>","  ","  <span class=\"c\">// Function to build pretty exception objects - TBR function signature</span>","  <span class=\"k\">function</span> createException <span class=\"k\">(</span>exceptionType<span class=\"k\">,</span> objName<span class=\"k\">,</span> expected<span class=\"k\">,</span> actual<span class=\"k\">)</span> <span class=\"k\">{</span>","    <span class=\"k\">var</span> e <span class=\"k\">=</span> <span class=\"k\">{</span>","        type <span class=\"k\">:</span> exceptionType","      <span class=\"k\">}</span><span class=\"k\">,</span>","      fn <span class=\"k\">=</span> <span class=\"s\">\"'\"</span> <span class=\"k\">+</span> objName <span class=\"k\">+</span> <span class=\"s\">\"'\"</span><span class=\"k\">;</span>","    ","    <span class=\"k\">switch</span> <span class=\"k\">(</span><span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">case</span> <span class=\"s\">\"IncorrectNumberOfArgumentsException\"</span> <span class=\"k\">===</span> exceptionType   <span class=\"k\">:</span>","      <span class=\"k\">case</span> <span class=\"s\">\"MismatchedNumberOfMembersException\"</span> <span class=\"k\">===</span> exceptionType     <span class=\"k\">:</span>","        e<span class=\"k\">.</span>message <span class=\"k\">=</span> fn <span class=\"k\">+</span> <span class=\"s\">\" expected: \"</span> <span class=\"k\">+</span> expected <span class=\"k\">+</span> <span class=\"s\">\" items, actual number was: \"</span> <span class=\"k\">+</span> actual<span class=\"k\">;</span>","        <span class=\"k\">break</span><span class=\"k\">;</span>","      <span class=\"k\">case</span> <span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span> <span class=\"k\">===</span> exceptionType  <span class=\"k\">:</span>","        e<span class=\"k\">.</span>message <span class=\"k\">=</span> fn <span class=\"k\">+</span> <span class=\"s\">\" expected: \"</span> <span class=\"k\">+</span> expected <span class=\"k\">+</span> <span class=\"s\">\" method calls, actual number was: \"</span> <span class=\"k\">+</span> actual<span class=\"k\">;</span>","        <span class=\"k\">break</span><span class=\"k\">;</span>","      <span class=\"k\">case</span> <span class=\"s\">\"MissingHashKeyException\"</span> <span class=\"k\">:</span>","        e<span class=\"k\">.</span>message <span class=\"k\">=</span> fn <span class=\"k\">+</span> <span class=\"s\">\" expected: \"</span> <span class=\"k\">+</span> expected <span class=\"k\">+</span> <span class=\"s\">\" key/property to exist on 'actual' object, actual was: \"</span> <span class=\"k\">+</span> actual<span class=\"k\">;</span>","      <span class=\"k\">default</span><span class=\"k\">:</span>","        e<span class=\"k\">.</span>message <span class=\"k\">=</span> fn <span class=\"k\">+</span> <span class=\"s\">\" expected: \"</span> <span class=\"k\">+</span> expected <span class=\"k\">+</span> <span class=\"s\">\", actual was: \"</span> <span class=\"k\">+</span> actual<span class=\"k\">;</span>","    <span class=\"k\">}</span>","    <span class=\"k\">return</span> e<span class=\"k\">;</span>","  <span class=\"k\">}</span>","  ","  <span class=\"c\">// PUBLIC MOCK OBJECT CONSTRUCTOR</span>","  <span class=\"k\">function</span> MockConstructor <span class=\"k\">()</span> <span class=\"k\">{</span>","","    <span class=\"k\">var</span> mock <span class=\"k\">=</span> <span class=\"k\">function</span> MockObject <span class=\"k\">()</span> <span class=\"k\">{</span>","          <span class=\"c\">// Can't use MockObject fn name, dies in IE &lt;&lt;&lt; Changed to be ES5 compatible - test in IE!!</span>","          MockObject<span class=\"k\">.</span>actualArguments <span class=\"k\">=</span> arguments<span class=\"k\">;</span>","          <span class=\"k\">return</span> MockObject<span class=\"k\">;</span>","        <span class=\"k\">}</span><span class=\"k\">,</span>","        methods <span class=\"k\">=</span> <span class=\"k\">[],</span> <span class=\"c\">// List of MockedMember method instances declared on mock</span>","        exceptions <span class=\"k\">=</span> <span class=\"k\">[],</span> <span class=\"c\">// List of exceptions thrown by verify/verifyMethod functions,</span>","        identifier <span class=\"k\">=</span> <span class=\"k\">(</span> assertObject<span class=\"k\">(</span> String<span class=\"k\">,</span> arguments <span class=\"k\">&amp;&amp;</span> arguments<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">?</span> arguments<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">:</span> <span class=\"s\">\"'Constructor' (#protip - you can pass in a (String) when instantiating a new Mock, which helps inform constructor-level error messages)\"</span><span class=\"k\">,</span>","        assertCollection <span class=\"k\">=</span> assertObject<span class=\"k\">[</span><span class=\"s\">\"_assertCollection\"</span><span class=\"k\">].</span>get<span class=\"k\">();</span> <span class=\"c\">// TBR</span>","  ","    <span class=\"c\">// Function to push arguments into Mock exceptions list</span>","    <span class=\"k\">function</span> throwMockException <span class=\"k\">()</span> <span class=\"k\">{</span>","      exceptions<span class=\"k\">.</span>push<span class=\"k\">(</span> createException<span class=\"k\">.</span>apply<span class=\"k\">(</span><span class=\"k\">null</span><span class=\"k\">,</span> arguments<span class=\"k\">)</span> <span class=\"k\">);</span>","    <span class=\"k\">}</span>","","    <span class=\"c\">// CONSTRUCTOR for mocked methods</span>","    <span class=\"k\">function</span> MockedMember <span class=\"k\">(</span>min<span class=\"k\">,</span> max<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>name <span class=\"k\">=</span> <span class=\"s\">\"\"</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>expectedCalls <span class=\"k\">=</span> <span class=\"k\">(</span> min <span class=\"k\">!==</span> undefined <span class=\"k\">)</span> <span class=\"k\">?</span> min <span class=\"k\">:</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>maxCalls <span class=\"k\">=</span> max <span class=\"k\">||</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>actualCalls <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>expectedArgs <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"k\">{</span><span class=\"s\">\"accepts\"</span><span class=\"k\">:</span> <span class=\"k\">[</span>undefined<span class=\"k\">]</span><span class=\"k\">}</span><span class=\"k\">];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>actualArgs <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>callbackArgs <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>requiredNumberofArguments <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>allowOverload <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>returnValue <span class=\"k\">=</span> undefined<span class=\"k\">;</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>strictValueChecking <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span>","      <span class=\"c\">// Store reference to method in method list for reset functionality &lt;str&gt;and potential strict execution order tracking&lt;str&gt;.</span>","      methods<span class=\"k\">.</span>push<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","    ","    MockedMember<span class=\"k\">.</span>prototype <span class=\"k\">=</span> <span class=\"k\">{</span>","      ","      <span class=\"s\">\"method\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","","        <span class=\"c\">// Throw error if collision with mockMember API</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>mock<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">!==</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","          throwMockException<span class=\"k\">(</span><span class=\"s\">\"InvalidMethodNameException\"</span><span class=\"k\">,</span> <span class=\"s\">\"Constructor function\"</span><span class=\"k\">,</span> <span class=\"s\">\"unique method name\"</span><span class=\"k\">,</span> <span class=\"s\">\"was reserved method name '\"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\"'\"</span><span class=\"k\">);</span>","          <span class=\"k\">throw</span> exceptions<span class=\"k\">;</span>","        <span class=\"k\">}</span>","      ","          <span class=\"c\">// Register public interface to mocked method instance on mock klass, bind to curried function</span>","          mock<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">(</span>method<span class=\"k\">,</span> name<span class=\"k\">)</span> <span class=\"k\">{</span>","        ","          method<span class=\"k\">[</span><span class=\"s\">\"name\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> name<span class=\"k\">;</span>","","          <span class=\"c\">// Invoked when mock is called within SUT object.</span>","          <span class=\"k\">return</span> <span class=\"k\">function</span> updateMethodState <span class=\"k\">()</span> <span class=\"k\">{</span>","                   ","            <span class=\"c\">// Normalise Arguments</span>","            <span class=\"k\">var</span> parameters <span class=\"k\">=</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">);</span>","                         ","            <span class=\"c\">// Track method invocations</span>","            method<span class=\"k\">.</span>actualCalls<span class=\"k\">++;</span>","         ","            <span class=\"c\">// Store method call params for verification</span>","            method<span class=\"k\">.</span>actualArgs<span class=\"k\">.</span>push<span class=\"k\">(</span>parameters<span class=\"k\">);</span>","                   ","            <span class=\"c\">// Execute any callback functions specified with associated args.</span>","            <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> len <span class=\"k\">=</span> parameters<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","              <span class=\"k\">if</span> <span class=\"k\">(</span>parameters<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> parameters<span class=\"k\">[</span>i<span class=\"k\">].</span>constructor <span class=\"k\">===</span> Function<span class=\"k\">)</span> <span class=\"k\">{</span>","                  parameters<span class=\"k\">[</span>i<span class=\"k\">].</span>apply<span class=\"k\">(</span>undefined<span class=\"k\">,</span> method<span class=\"k\">.</span>callbackArgs<span class=\"k\">);</span>","              <span class=\"k\">}</span>","\t\t\t  <span class=\"c\">//BEGIN ETM - Support JSON Function Callbacks </span>","              <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"k\">(</span>parameters<span class=\"k\">[</span>i<span class=\"k\">]</span> <span class=\"k\">!==</span> undefined <span class=\"k\">&amp;&amp;</span> <span class=\"k\">!</span>parameters<span class=\"k\">[</span>i<span class=\"k\">].</span>nodeName<span class=\"k\">)</span> <span class=\"k\">{</span> \t                    ","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> key <span class=\"k\">in</span> parameters<span class=\"k\">[</span>i<span class=\"k\">])</span> <span class=\"k\">{</span>","        \t\t  <span class=\"k\">if</span> <span class=\"k\">(</span>parameters<span class=\"k\">[</span>i<span class=\"k\">][</span>key<span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> parameters<span class=\"k\">[</span>i<span class=\"k\">][</span>key<span class=\"k\">].</span>constructor <span class=\"k\">===</span> Function <span class=\"k\">&amp;&amp;</span> method<span class=\"k\">.</span>callbackArgs <span class=\"k\">&amp;&amp;</span> method<span class=\"k\">.</span>callbackArgs<span class=\"k\">.</span>length <span class=\"k\">&amp;&amp;</span> method<span class=\"k\">.</span>callbackArgs<span class=\"k\">.</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span> ","    \t\t\t\t  parameters<span class=\"k\">[</span>i<span class=\"k\">][</span>key<span class=\"k\">].</span>apply<span class=\"k\">(</span>undefined<span class=\"k\">,</span> method<span class=\"k\">.</span>callbackArgs<span class=\"k\">);</span>\t\t","        \t\t  <span class=\"k\">}</span>            \t ","                <span class=\"k\">}</span>","          \t  <span class=\"k\">}</span>","              <span class=\"c\">//END ETM - Support JSON Function Callbacks              </span>","            <span class=\"k\">}</span>","           ","            <span class=\"c\">// Assert arguments against expected presentations and return appropriate object</span>","            <span class=\"k\">return</span> <span class=\"k\">(</span><span class=\"k\">function</span> getReturnValue<span class=\"k\">(</span>presentation<span class=\"k\">)</span> <span class=\"k\">{</span>","     ","              <span class=\"c\">// Make default return value the defualt method value (undefined || Object || self (mock - chained))</span>","              <span class=\"k\">var</span> obj <span class=\"k\">=</span> method<span class=\"k\">.</span>returnValue<span class=\"k\">;</span>","            ","              <span class=\"c\">// Compare actual with expected arguments and if true return correct object</span>","              assertingPresentations<span class=\"k\">:</span>","                <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> len <span class=\"k\">=</span> method<span class=\"k\">.</span>expectedArgs<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","                  <span class=\"k\">try</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span> assertCollection<span class=\"k\">(</span>","                          method<span class=\"k\">.</span>expectedArgs<span class=\"k\">[</span>i<span class=\"k\">][</span><span class=\"s\">\"accepts\"</span><span class=\"k\">],</span> <span class=\"c\">// 'expected' inputs</span>","                          presentation<span class=\"k\">,</span> <span class=\"c\">// 'actual' inputs</span>","                          <span class=\"k\">true</span> <span class=\"c\">// Must be strict 1:1 match to return a certain value</span>","                        <span class=\"k\">)</span>","                    <span class=\"k\">)</span> <span class=\"k\">{</span>","                      <span class=\"c\">// If match found against presentation return bound object (or self if chained)</span>","                      obj <span class=\"k\">=</span> <span class=\"k\">(</span>method<span class=\"k\">.</span>returnValue <span class=\"k\">&amp;&amp;</span> method<span class=\"k\">.</span>returnValue <span class=\"k\">===</span> mock<span class=\"k\">)</span> ","                        <span class=\"k\">?</span> mock ","                        <span class=\"k\">:</span> method<span class=\"k\">.</span>expectedArgs<span class=\"k\">[</span>i<span class=\"k\">][</span><span class=\"s\">\"returns\"</span><span class=\"k\">];</span>","                    <span class=\"k\">}</span>","                  <span class=\"k\">}</span> <span class=\"k\">catch</span> <span class=\"k\">(</span>e<span class=\"k\">)</span> <span class=\"k\">{</span>","                    <span class=\"k\">if</span> <span class=\"k\">(</span> e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">&amp;&amp;</span> e<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>type <span class=\"k\">===</span> <span class=\"s\">\"MissingHashKeyException\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","                      <span class=\"k\">continue</span> assertingPresentations<span class=\"k\">;</span>","                    <span class=\"k\">}</span>","                  <span class=\"k\">}</span>","              <span class=\"k\">}</span>","          ","              <span class=\"k\">return</span> obj<span class=\"k\">;</span>","           ","           <span class=\"k\">}</span><span class=\"k\">)(</span>parameters<span class=\"k\">)</span><span class=\"k\">}</span><span class=\"k\">;</span>","          ","          <span class=\"k\">}</span><span class=\"k\">)(</span><span class=\"k\">this</span><span class=\"k\">,</span> name<span class=\"k\">);</span>","      ","        <span class=\"c\">// chain</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span> ","","      <span class=\"k\">}</span><span class=\"k\">,</span>","      ","      <span class=\"s\">\"interface\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> setInterfaceExpectations <span class=\"k\">()</span> <span class=\"k\">{</span>","      ","        <span class=\"c\">/*// Check for valid input to interface</span>","<span class=\"c\">        for (var i = 0, len = arguments.length, i++) {</span>","<span class=\"c\">          var acceptsProperty = arguments[i][accepts] || false; // attach hasOwnProperty check.</span>","<span class=\"c\">          if ( acceptsProperty === false ) { </span>","<span class=\"c\">            throw {</span>","<span class=\"c\">              type: \"MissingAcceptsPropertyException\",</span>","<span class=\"c\">              msg: \"Qmock expects arguments to setInterfaceExpectations() to contain an accepts property\"</span>","<span class=\"c\">            }</span>","<span class=\"c\">          } else if ( acceptsProperty.constructor !== Array ) {</span>","<span class=\"c\">            throw {</span>","<span class=\"c\">              type: \"InvalidAcceptsValueException\",</span>","<span class=\"c\">              msg: \"Qmock expects value of 'accepts' in arguments to be an Array\"</span>","<span class=\"c\">            }  </span>","<span class=\"c\">          }</span>","<span class=\"c\">        }*/</span>","      ","        <span class=\"c\">// Expected format of arguments - {accepts: [], returns: value}</span>","  ","        <span class=\"c\">// Where arguments can equal either any type, or overloadable pairings.</span>","        <span class=\"c\">// e.g. \"string\" or {params: foo, returns: bar}. Note array literals must be nested ({params: [\"string\", [1,2,3]], returns: \"meh\"})</span>","        <span class=\"c\">// Normalize input to accepts into key/value expectation pairings</span>","        ","        <span class=\"c\">// THIS NEEDS A DEBATE - DEFAULT IS FOR IMPLICT STRICT NUMBER OF, &amp; VALUE OF, ARG CHECKING FOR 'PRESENTATIONS'.</span>","        <span class=\"c\">// If required number of arguments not already set, then implicitly set it to length of param array (so let ppl customise it)</span>","        <span class=\"c\">// Add in per presentation strict argument length unless already set either globally or locally (recommendation to keep it consistent locally - don't let mocks change behaviour in test group too much)</span>","        <span class=\"c\">// This should probably be part of the refactor... feels messy!</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">.</span>requiredNumberofArguments <span class=\"k\">===</span> <span class=\"k\">false</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        ","          <span class=\"c\">// Set minimum expectations</span>","          <span class=\"k\">this</span><span class=\"k\">.</span>requiredNumberofArguments <span class=\"k\">=</span> arguments<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">][</span><span class=\"s\">\"accepts\"</span><span class=\"k\">].</span>length<span class=\"k\">;</span> ","        ","          <span class=\"c\">// Assign explicit expectation if exist</span>","          <span class=\"k\">for</span><span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> len <span class=\"k\">=</span> arguments<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span><span class=\"k\">(!</span>arguments<span class=\"k\">[</span>i<span class=\"k\">][</span><span class=\"s\">\"required\"</span><span class=\"k\">])</span> <span class=\"k\">{</span>","              arguments<span class=\"k\">[</span>i<span class=\"k\">][</span><span class=\"s\">\"required\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> arguments<span class=\"k\">[</span>i<span class=\"k\">][</span><span class=\"s\">\"accepts\"</span><span class=\"k\">].</span>length<span class=\"k\">;</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>expectedArgs <span class=\"k\">=</span> arguments<span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      ","      <span class=\"s\">\"accepts\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> setSingleInterfaceExpectation <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>requiredNumberofArguments <span class=\"k\">=</span> arguments<span class=\"k\">.</span>length<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>expectedArgs <span class=\"k\">=</span> <span class=\"k\">[</span><span class=\"k\">{</span><span class=\"s\">\"accepts\"</span><span class=\"k\">:</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>arguments<span class=\"k\">,</span> <span class=\"s\">0</span><span class=\"k\">)</span><span class=\"k\">}</span><span class=\"k\">];</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      ","      <span class=\"s\">\"returns\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>stub<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>returnValue <span class=\"k\">=</span> stub<span class=\"k\">;</span> <span class=\"c\">// default is undefined</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      ","      <span class=\"s\">\"required\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>requiredArgs<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>requiredNumberofArguments <span class=\"k\">=</span> requiredArgs<span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      ","      <span class=\"s\">\"overload\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>overload_flag<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>allowOverload <span class=\"k\">=</span> overload_flag<span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      ","      <span class=\"s\">\"strict\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>strictValueChecking <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      ","      <span class=\"s\">\"property\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>name<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>mock<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">!==</span> undefined<span class=\"k\">)</span> <span class=\"k\">{</span>","          throwMockException<span class=\"k\">(</span><span class=\"s\">\"InvalidPropertyNameException\"</span><span class=\"k\">,</span> <span class=\"s\">\"Constructor function\"</span><span class=\"k\">,</span> <span class=\"s\">\"undefined property name\"</span><span class=\"k\">,</span> <span class=\"s\">\"should be unique (was \"</span> <span class=\"k\">+</span> name <span class=\"k\">+</span> <span class=\"s\">\")\"</span><span class=\"k\">);</span>","          <span class=\"k\">throw</span> exceptions<span class=\"k\">;</span>","        <span class=\"k\">}</span>","        mock<span class=\"k\">[</span>name<span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">\"stub\"</span><span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      ","      <span class=\"s\">\"withValue\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>value<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">for</span><span class=\"k\">(</span>property <span class=\"k\">in</span> mock<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"k\">if</span> <span class=\"k\">(</span> mock<span class=\"k\">.</span>hasOwnProperty<span class=\"k\">(</span>property<span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","            <span class=\"k\">if</span> <span class=\"k\">(</span> mock<span class=\"k\">[</span>property<span class=\"k\">]</span> <span class=\"k\">===</span> <span class=\"s\">\"stub\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","              mock<span class=\"k\">[</span>property<span class=\"k\">]</span> <span class=\"k\">=</span> value<span class=\"k\">;</span>","            <span class=\"k\">}</span>","          <span class=\"k\">}</span>","        <span class=\"k\">}</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      ","      <span class=\"s\">\"callFunctionWith\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"c\">// Callback function arguments - useful for async requests</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>callbackArgs <span class=\"k\">=</span> arguments<span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      ","      <span class=\"s\">\"andChain\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">.</span>returnValue <span class=\"k\">=</span> mock<span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      ","      <span class=\"s\">\"andExpects\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>calls<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> mock<span class=\"k\">.</span>expects<span class=\"k\">(</span>calls<span class=\"k\">);</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      ","      <span class=\"s\">\"verifyMethod\"</span><span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","        assertMethod<span class=\"k\">:</span> ","          <span class=\"k\">with</span> <span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">)</span> <span class=\"k\">{</span>","           <span class=\"c\">// Evaluate expected method invocations against actual</span>","           assertMethodCalls<span class=\"k\">:</span>","             <span class=\"k\">switch</span> <span class=\"k\">(</span> expectedCalls <span class=\"k\">!==</span> <span class=\"k\">false</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","               <span class=\"c\">// max is infinite</span>","               <span class=\"k\">case</span> <span class=\"k\">(</span>maxCalls <span class=\"k\">===</span> Infinity<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>actualCalls <span class=\"k\">&gt;</span> expectedCalls<span class=\"k\">):</span>","               <span class=\"c\">// arbitrary range defined </span>","               <span class=\"k\">case</span> <span class=\"k\">(</span>maxCalls <span class=\"k\">&gt;</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>actualCalls <span class=\"k\">&gt;=</span> expectedCalls<span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span>actualCalls <span class=\"k\">&lt;=</span> maxCalls<span class=\"k\">):</span> ","               <span class=\"c\">// explicit call number defined</span>","               <span class=\"k\">case</span> <span class=\"k\">(</span>expectedCalls <span class=\"k\">===</span> actualCalls<span class=\"k\">):</span>","                 <span class=\"c\">// Return verifyMethod early if no args to assert.</span>","                 <span class=\"k\">if</span> <span class=\"k\">(</span>actualCalls <span class=\"k\">===</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","                   <span class=\"k\">return</span><span class=\"k\">;</span>","                 <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","                   <span class=\"k\">break</span> assertMethodCalls<span class=\"k\">;</span>","                 <span class=\"k\">}</span>","               <span class=\"k\">default</span><span class=\"k\">:</span>","                 throwMockException<span class=\"k\">(</span><span class=\"s\">\"IncorrectNumberOfMethodCallsException\"</span><span class=\"k\">,</span> name<span class=\"k\">,</span> expectedCalls<span class=\"k\">,</span> actualCalls<span class=\"k\">);</span>","                 <span class=\"k\">break</span> assertMethod<span class=\"k\">;</span>","             <span class=\"k\">}</span>","    ","          <span class=\"c\">// assert presentations.... LET's DO THAT AFTERWARDS...IN fact more like a loop around the old atomic presentation checking mechanism...</span>","    ","          <span class=\"c\">// Evaluate method interface expectations against actual</span>","          assertInterface<span class=\"k\">:</span> <span class=\"k\">switch</span> <span class=\"k\">(</span> <span class=\"k\">true</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","      ","            <span class=\"c\">// Strict Arg length checking - no overload</span>","            <span class=\"k\">case</span> <span class=\"k\">(</span> allowOverload <span class=\"k\">===</span> <span class=\"k\">false</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span> requiredNumberofArguments <span class=\"k\">!==</span> <span class=\"k\">false</span> <span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span> requiredNumberofArguments <span class=\"k\">!==</span> actualArgs<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>length <span class=\"k\">):</span> ","            <span class=\"c\">// At least n Arg length checking - overloading allowed - Global check</span>","            <span class=\"k\">case</span> <span class=\"k\">(</span> allowOverload <span class=\"k\">===</span> <span class=\"k\">true</span><span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span> requiredNumberofArguments <span class=\"k\">!==</span> <span class=\"k\">false</span> <span class=\"k\">)</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">(</span> requiredNumberofArguments <span class=\"k\">&gt;</span> actualArgs<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>length <span class=\"k\">)</span>  <span class=\"k\">:</span>","              throwMockException<span class=\"k\">(</span><span class=\"s\">\"IncorrectNumberOfArgumentsException\"</span><span class=\"k\">,</span> name<span class=\"k\">,</span> expectedArgs<span class=\"k\">.</span>length<span class=\"k\">,</span> actualArgs<span class=\"k\">.</span>length<span class=\"k\">);</span>","              <span class=\"k\">break</span> assertMethod<span class=\"k\">;</span>","","            <span class=\"k\">default</span><span class=\"k\">:</span>","              <span class=\"k\">(</span><span class=\"k\">function</span> <span class=\"k\">()</span> <span class=\"k\">{</span>","          ","              <span class=\"c\">// Only check arguments if some available or explicitly required</span>","              <span class=\"c\">// By default functions returned 'undefined'</span>","              <span class=\"c\">// This feels hacky also... refactor out if possible!</span>","              <span class=\"k\">if</span> <span class=\"k\">(</span> requiredNumberofArguments <span class=\"k\">!==</span> <span class=\"k\">false</span> <span class=\"k\">||</span> <span class=\"k\">(</span> actualCalls <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">&amp;&amp;</span> actualArgs<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">].</span>length <span class=\"k\">&gt;</span> <span class=\"s\">0</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","          ","                assertPresentations<span class=\"k\">:</span> <span class=\"c\">// For each presentation to the interface...</span>","            ","                  <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> len <span class=\"k\">=</span> actualArgs<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","            ","                    assertExpectations<span class=\"k\">:</span> <span class=\"c\">// ...Check if a matching expectation</span>","                ","                      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> j <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> _len <span class=\"k\">=</span> expectedArgs<span class=\"k\">.</span>length<span class=\"k\">;</span> j <span class=\"k\">&lt;</span> _len<span class=\"k\">;</span> j<span class=\"k\">++)</span> <span class=\"k\">{</span>","            ","                        <span class=\"c\">// Assert Number of Arguments if expectation explicitly set...</span>","                        <span class=\"c\">// At least n Arg length checking - overloading allowed - Global check</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span> expectedArgs<span class=\"k\">[</span>j<span class=\"k\">][</span><span class=\"s\">\"required\"</span><span class=\"k\">]</span> <span class=\"k\">&gt;</span> actualArgs<span class=\"k\">[</span>i<span class=\"k\">].</span>length <span class=\"k\">)</span>  <span class=\"k\">{</span>","                          throwMockException<span class=\"k\">(</span><span class=\"s\">\"IncorrectNumberOfArgumentsException\"</span><span class=\"k\">,</span> name<span class=\"k\">,</span> expectedArgs<span class=\"k\">.</span>length<span class=\"k\">,</span> actualArgs<span class=\"k\">.</span>length<span class=\"k\">);</span>","                          <span class=\"k\">continue</span> assertPresentations<span class=\"k\">;</span>","                        <span class=\"k\">}</span>      ","            ","                        <span class=\"c\">// Use to restore exceptions object to pre-presentation assertion state in case of match                         </span>","                        <span class=\"k\">var</span> cachedExceptionTotal <span class=\"k\">=</span> exceptions<span class=\"k\">.</span>length<span class=\"k\">;</span>","          ","                        <span class=\"c\">// If a match (strict value checking) between a presentation and expectation restore exceptions object and assert next interface presentation.</span>","                        <span class=\"c\">// If strict argument total checking is on just pass through expected and actual</span>","                        <span class=\"k\">if</span> <span class=\"k\">(</span> assertCollection<span class=\"k\">(</span>","                              <span class=\"c\">// expected</span>","                              <span class=\"k\">(</span> allowOverload <span class=\"k\">===</span> <span class=\"k\">false</span> <span class=\"k\">&amp;&amp;</span> requiredNumberofArguments <span class=\"k\">!==</span> <span class=\"k\">false</span> <span class=\"k\">)</span> ","                                <span class=\"k\">?</span> expectedArgs<span class=\"k\">[</span>j<span class=\"k\">][</span><span class=\"s\">\"accepts\"</span><span class=\"k\">]</span>","                                <span class=\"c\">// Else assume default mode of overloading and type checking against method interface</span>","                                <span class=\"k\">:</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>expectedArgs<span class=\"k\">[</span>j<span class=\"k\">][</span><span class=\"s\">\"accepts\"</span><span class=\"k\">],</span> <span class=\"s\">0</span><span class=\"k\">,</span> actualArgs<span class=\"k\">[</span>i<span class=\"k\">].</span>length<span class=\"k\">),</span>","                              <span class=\"c\">// actual</span>","                              <span class=\"k\">(</span> allowOverload <span class=\"k\">===</span> <span class=\"k\">false</span> <span class=\"k\">&amp;&amp;</span> requiredNumberofArguments <span class=\"k\">!==</span> <span class=\"k\">false</span> <span class=\"k\">)</span> ","                                <span class=\"k\">?</span> actualArgs<span class=\"k\">[</span>i<span class=\"k\">]</span>","                                <span class=\"c\">// Else assume default mode of overloading and type checking against method interface</span>","                                <span class=\"k\">:</span> slice<span class=\"k\">.</span>call<span class=\"k\">(</span>actualArgs<span class=\"k\">[</span>i<span class=\"k\">],</span> <span class=\"s\">0</span><span class=\"k\">,</span> expectedArgs<span class=\"k\">[</span>j<span class=\"k\">][</span><span class=\"s\">\"accepts\"</span><span class=\"k\">].</span>length<span class=\"k\">),</span>","                              strictValueChecking<span class=\"k\">,</span>","                              <span class=\"k\">(</span>strictValueChecking<span class=\"k\">)</span> <span class=\"k\">?</span> <span class=\"s\">\"IncorrectArgumentValueException\"</span> <span class=\"k\">:</span> <span class=\"s\">\"IncorrectArgumentTypeException\"</span><span class=\"k\">,</span>","                              throwMockException<span class=\"k\">,</span>","                              name<span class=\"k\">,</span>","                              exceptions","                            <span class=\"k\">)</span> ","                          <span class=\"k\">)</span> <span class=\"k\">{</span>","                              <span class=\"c\">// If match remove exceptions raised during checks and move on to next presentation.</span>","                              exceptions<span class=\"k\">.</span>slice<span class=\"k\">(</span><span class=\"s\">0</span><span class=\"k\">,</span> cachedExceptionTotal<span class=\"k\">);</span>","                              <span class=\"k\">continue</span> assertPresentations<span class=\"k\">;</span>","                        <span class=\"k\">}</span>","                        ","                      <span class=\"k\">}</span> <span class=\"c\">// end assertExpectations loop</span>","                  <span class=\"k\">}</span> <span class=\"c\">// end assertPresentations loop</span>","                <span class=\"k\">}</span>","              <span class=\"k\">}</span><span class=\"k\">).</span>call<span class=\"k\">(</span><span class=\"k\">this</span><span class=\"k\">);</span>","            <span class=\"k\">}</span> <span class=\"c\">// end assertInterface</span>","          <span class=\"k\">}</span> <span class=\"c\">// end assertMethod</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      ","      atLeast<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>n<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>expectedCalls <span class=\"k\">=</span> n<span class=\"k\">;</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>maxCalls <span class=\"k\">=</span> Infinity<span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">}</span><span class=\"k\">,</span>","      ","      noMoreThan<span class=\"k\">:</span> <span class=\"k\">function</span> <span class=\"k\">(</span>n<span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">this</span><span class=\"k\">.</span>maxCalls <span class=\"k\">=</span> n<span class=\"k\">;</span>","        <span class=\"k\">return</span> <span class=\"k\">this</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    ","    <span class=\"k\">}</span><span class=\"k\">;</span> <span class=\"c\">// End MockedMember.prototype declaration </span>","  ","    <span class=\"c\">// Backward compatibility for QMock v0.1 API</span>","    MockedMember<span class=\"k\">.</span>prototype<span class=\"k\">[</span><span class=\"s\">\"withArguments\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> MockedMember<span class=\"k\">.</span>prototype<span class=\"k\">.</span>accepts<span class=\"k\">;</span>","","    <span class=\"c\">// PUBLIC METHODS on mock</span>","    <span class=\"c\">// Creates new MockedMember instance on Mock Object and sets-up initial method expectation</span>","    mock<span class=\"k\">.</span>expects <span class=\"k\">=</span> mock<span class=\"k\">.</span>andExpects <span class=\"k\">=</span> <span class=\"k\">function</span> mockExpectsNewMethod <span class=\"k\">(</span>min<span class=\"k\">,</span> max<span class=\"k\">)</span> <span class=\"k\">{</span>","      <span class=\"k\">return</span> <span class=\"k\">new</span> MockedMember<span class=\"k\">(</span>min<span class=\"k\">,</span> max<span class=\"k\">);</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","      ","    mock<span class=\"k\">.</span>accepts <span class=\"k\">=</span> <span class=\"k\">function</span> mockExpectsArguments <span class=\"k\">()</span> <span class=\"k\">{</span>","      mock<span class=\"k\">.</span>expectsArguments <span class=\"k\">=</span> arguments<span class=\"k\">;</span>","      <span class=\"k\">return</span> mock<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  ","    mock<span class=\"k\">.</span>actualArguments <span class=\"k\">=</span> <span class=\"k\">[];</span> <span class=\"c\">// Stub, used for symbol binding</span>","    mock<span class=\"k\">.</span>strictValueChecking <span class=\"k\">=</span> <span class=\"k\">false</span><span class=\"k\">;</span> <span class=\"c\">// Default is type checking</span>","    ","    mock<span class=\"k\">.</span>strict <span class=\"k\">=</span> <span class=\"k\">function</span> mockExpectsStrictParameterValues <span class=\"k\">()</span> <span class=\"k\">{</span>","      mock<span class=\"k\">.</span>strictValueChecking <span class=\"k\">=</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">return</span> mock<span class=\"k\">;</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"c\">// Verify method, tests both constructor and declared method's respective states.</span>","    mock<span class=\"k\">.</span>verify <span class=\"k\">=</span> <span class=\"k\">function</span> verifyMock <span class=\"k\">()</span> <span class=\"k\">{</span>","      ","      <span class=\"c\">// Check Constructor Arguments</span>","      <span class=\"k\">with</span> <span class=\"k\">(</span> mock <span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">if</span> <span class=\"k\">(</span>expectsArguments<span class=\"k\">.</span>length <span class=\"k\">!==</span> actualArguments<span class=\"k\">.</span>length<span class=\"k\">)</span> <span class=\"k\">{</span>","          <span class=\"c\">// Thrown in to satisfy tests (for consistency's sake) - NEEDS TO BE REFACTORED OUT!</span>","          throwMockException<span class=\"k\">(</span><span class=\"s\">\"IncorrectNumberOfArgumentsException\"</span><span class=\"k\">,</span> <span class=\"s\">\"Constructor function\"</span><span class=\"k\">,</span> expectsArguments<span class=\"k\">.</span>length<span class=\"k\">,</span> actualArguments<span class=\"k\">.</span>length<span class=\"k\">);</span>","        <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","          assertCollection<span class=\"k\">(</span>expectsArguments<span class=\"k\">,</span> actualArguments<span class=\"k\">,</span> strictValueChecking<span class=\"k\">,</span> <span class=\"k\">null</span><span class=\"k\">,</span> throwMockException<span class=\"k\">);</span>","        <span class=\"k\">}</span>","      <span class=\"k\">}</span>","          ","      <span class=\"c\">// Verify Mocked Methods</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> len <span class=\"k\">=</span> methods<span class=\"k\">.</span>length<span class=\"k\">;</span> i <span class=\"k\">&lt;</span> len<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        methods<span class=\"k\">[</span>i<span class=\"k\">].</span>verifyMethod<span class=\"k\">();</span>","      <span class=\"k\">}</span>","      ","      <span class=\"c\">// Did it go bad?</span>","      <span class=\"k\">if</span> <span class=\"k\">(</span>exceptions<span class=\"k\">.</span>length <span class=\"k\">!==</span> <span class=\"s\">0</span><span class=\"k\">)</span> <span class=\"k\">{</span>","        <span class=\"k\">throw</span> exceptions<span class=\"k\">;</span>","      <span class=\"k\">}</span> <span class=\"k\">else</span> <span class=\"k\">{</span>","        <span class=\"k\">return</span> <span class=\"k\">true</span><span class=\"k\">;</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","","    <span class=\"c\">// Resets internal state of Mock instance</span>","    mock<span class=\"k\">.</span>reset <span class=\"k\">=</span> <span class=\"k\">function</span> resetMock <span class=\"k\">()</span> <span class=\"k\">{</span>","      exceptions <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">this</span><span class=\"k\">.</span>actualArguments <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">for</span> <span class=\"k\">(</span><span class=\"k\">var</span> i <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">,</span> len <span class=\"k\">=</span> methods<span class=\"k\">.</span>length<span class=\"k\">;</span> i<span class=\"k\">&lt;</span>len<span class=\"k\">;</span> i<span class=\"k\">++)</span> <span class=\"k\">{</span>","        methods<span class=\"k\">[</span>i<span class=\"k\">].</span>actualCalls <span class=\"k\">=</span> <span class=\"s\">0</span><span class=\"k\">;</span>","        methods<span class=\"k\">[</span>i<span class=\"k\">].</span>actualArgs <span class=\"k\">=</span> <span class=\"k\">[];</span>","      <span class=\"k\">}</span>","    <span class=\"k\">}</span><span class=\"k\">;</span>","  ","    <span class=\"c\">// Backward compatibility for QMock v0.1 API</span>","    mock<span class=\"k\">.</span>expectsArguments <span class=\"k\">=</span> mock<span class=\"k\">.</span>accepts<span class=\"k\">;</span>","    ","    <span class=\"c\">// If params passed to Mock constructor auto-magikally create mocked interface from JSON tree.</span>","    <span class=\"k\">if</span> <span class=\"k\">(</span> assertObject<span class=\"k\">(</span> Object<span class=\"k\">,</span> arguments <span class=\"k\">&amp;&amp;</span> arguments<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]</span> <span class=\"k\">)</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","      createMockFromJSON<span class=\"k\">.</span>call<span class=\"k\">(</span>mock<span class=\"k\">,</span> arguments<span class=\"k\">[</span><span class=\"s\">0</span><span class=\"k\">]);</span>","    <span class=\"k\">}</span>","    ","    <span class=\"c\">// On my command, unleash the mock! :-)</span>","    <span class=\"k\">return</span> mock<span class=\"k\">;</span>","  ","  <span class=\"k\">}</span><span class=\"k\">;</span>","      ","  <span class=\"c\">// PUBLIC static members on Mock class</span>","  ","  <span class=\"c\">// Version number  </span>","  MockConstructor<span class=\"k\">[</span><span class=\"s\">\"QMock\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> <span class=\"s\">\"0.2\"</span><span class=\"k\">;</span>","  MockConstructor<span class=\"k\">[</span><span class=\"s\">\"Variable\"</span><span class=\"k\">]</span> <span class=\"k\">=</span> Variable<span class=\"k\">;</span>","  ","  <span class=\"c\">// Expose internal methods for unit tests</span>","  <span class=\"c\">// Base object checker method</span>","  <span class=\"k\">;;;;</span> expose<span class=\"k\">(</span> assertObject<span class=\"k\">,</span> MockConstructor<span class=\"k\">,</span> <span class=\"s\">\"_assertObject\"</span> <span class=\"k\">)</span>","  <span class=\"c\">// exception object builder</span>","  <span class=\"k\">;;;;</span> expose<span class=\"k\">(</span> createException<span class=\"k\">,</span> MockConstructor<span class=\"k\">,</span> <span class=\"s\">\"_createException\"</span> <span class=\"k\">);</span>","  <span class=\"c\">// mock generator</span>","  <span class=\"k\">;;;;</span> expose<span class=\"k\">(</span> createMockFromJSON<span class=\"k\">,</span> MockConstructor<span class=\"k\">,</span> <span class=\"s\">\"_createMockFromJSON\"</span> <span class=\"k\">);</span>","  ","  <span class=\"c\">// API Registration - register qMock in mapped scope</span>","  container<span class=\"k\">.</span>Mock <span class=\"k\">=</span> MockConstructor<span class=\"k\">;</span>","  ","  <span class=\"c\">// Register qMock as a Common JS module</span>","  <span class=\"k\">if</span> <span class=\"k\">(</span> <span class=\"k\">typeof</span> exports <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">&amp;&amp;</span> <span class=\"k\">typeof</span> require <span class=\"k\">!==</span> <span class=\"s\">\"undefined\"</span> <span class=\"k\">)</span> <span class=\"k\">{</span>","    exports<span class=\"k\">.</span>Mocks <span class=\"k\">=</span> MockConstructor<span class=\"k\">;</span>","  <span class=\"k\">}</span>","  ","<span class=\"k\">}</span><span class=\"k\">)(</span><span class=\"s\">'Mock'</span><span class=\"k\">,</span> <span class=\"k\">this</span><span class=\"k\">);</span>"];
